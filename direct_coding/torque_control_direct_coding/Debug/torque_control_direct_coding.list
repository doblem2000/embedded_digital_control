
torque_control_direct_coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080080c8  080080c8  000090c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  0000a244  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  0000a244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000094b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  080084b8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000248  080086fc  0000a248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080086fc  0000a5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e71e  00000000  00000000  0000a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1b  00000000  00000000  00018992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af7  00000000  00000000  0001b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b1c  00000000  00000000  0001c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f731  00000000  00000000  00034cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8d3  00000000  00000000  000443f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  000e0d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080b0 	.word	0x080080b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	080080b0 	.word	0x080080b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <cb_init>:
	void *head;       // pointer to head
	void *tail;       // pointer to tail
	bool writing;  // signals if the buffer is being written
} circular_buffer;

void cb_init(circular_buffer *cb, size_t capacity, size_t sz) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	cb->buffer = calloc(capacity, sz);
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f004 fbaa 	bl	8005650 <calloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
	if (cb->buffer == NULL)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <cb_init+0x2a>
		printf("ALLOCATED NULL\n\r");
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <cb_init+0x6c>)
 8000f0e:	f005 f98b 	bl	8006228 <iprintf>
	// handle error
	cb->buffer_end = (char*) cb->buffer + capacity * sz;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
	cb->capacity = capacity;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	609a      	str	r2, [r3, #8]
	cb->count = 0;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
	cb->sz = sz;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
	cb->head = cb->buffer;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	615a      	str	r2, [r3, #20]
	cb->tail = cb->buffer;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
	cb->writing = false;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	080080c8 	.word	0x080080c8

08000f58 <cb_push_back>:
void cb_free(circular_buffer *cb) {
	free(cb->buffer);
	// clear out other fields too, just to be safe
}

void cb_push_back(circular_buffer *cb, const void *item) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if (cb->count == cb->capacity) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d102      	bne.n	8000f74 <cb_push_back+0x1c>
		printf("ERROR PUSH BACK \n\r");
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <cb_push_back+0x6c>)
 8000f70:	f005 f95a 	bl	8006228 <iprintf>
		// handle error
	}
	cb->writing = true;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	771a      	strb	r2, [r3, #28]
	memmove(cb->head, item, cb->sz);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6958      	ldr	r0, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	f005 f9a4 	bl	80062d2 <memmove>
	cb->head = (char*) cb->head + cb->sz;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	441a      	add	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	615a      	str	r2, [r3, #20]
	if (cb->head == cb->buffer_end)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d103      	bne.n	8000fac <cb_push_back+0x54>
		cb->head = cb->buffer;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
	cb->count++;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
	cb->writing = false;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	080080dc 	.word	0x080080dc

08000fc8 <cb_pop_front>:

void cb_pop_front(circular_buffer *cb, void *item) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	if (cb->count == 0) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <cb_pop_front+0x18>
		printf("ERROR PUSH BACK \n\r");
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <cb_pop_front+0x68>)
 8000fdc:	f005 f924 	bl	8006228 <iprintf>
		// handle error
	}
	memmove(item, cb->tail, cb->sz);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6999      	ldr	r1, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f005 f971 	bl	80062d2 <memmove>
	cb->tail = (char*) cb->tail + cb->sz;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
	if (cb->tail == cb->buffer_end)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d103      	bne.n	8001012 <cb_pop_front+0x4a>
		cb->tail = cb->buffer;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
	while ((cb->writing))
 8001012:	bf00      	nop
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fb      	bne.n	8001014 <cb_pop_front+0x4c>
		;
	cb->count--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60da      	str	r2, [r3, #12]
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	080080dc 	.word	0x080080dc

08001034 <_write>:
	double current_pos;
	double current_vel;
} record;

/* BEGIN USART WRITE FUNCTION (used by printf)*/
int _write(int file, char *data, int len) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00a      	beq.n	800105c <_write+0x28>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <_write+0x28>
		errno = EBADF;
 800104c:	f005 f9be 	bl	80063cc <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2209      	movs	r2, #9
 8001054:	601a      	str	r2, [r3, #0]
		return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e00f      	b.n	800107c <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <_write+0x50>)
 8001068:	f003 ff36 	bl	8004ed8 <HAL_UART_Transmit>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <_write+0x46>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	e000      	b.n	800107c <_write+0x48>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200003cc 	.word	0x200003cc

08001088 <setPulseFromDutyValue>:

void setPulseFromDutyValue(double dutyVal) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001098:	4877      	ldr	r0, [pc, #476]	@ (8001278 <setPulseFromDutyValue+0x1f0>)
 800109a:	f002 f9a3 	bl	80033e4 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <setPulseFromDutyValue+0x36>
		channelToModulate = TIM_CHANNEL_1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e003      	b.n	80010c6 <setPulseFromDutyValue+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d104      	bne.n	80010d6 <setPulseFromDutyValue+0x4e>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d4:	e013      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d104      	bne.n	80010e6 <setPulseFromDutyValue+0x5e>
 80010dc:	4b67      	ldr	r3, [pc, #412]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010e4:	e00b      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d104      	bne.n	80010f6 <setPulseFromDutyValue+0x6e>
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010f4:	e003      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010f6:	4b61      	ldr	r3, [pc, #388]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12b      	bne.n	800115c <setPulseFromDutyValue+0xd4>
 8001104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001108:	f7ff fd2e 	bl	8000b68 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa0d 	bl	8000534 <__aeabi_i2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f6 	bl	8000514 <__aeabi_ui2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001142:	f7ff fb8b 	bl	800085c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	494c      	ldr	r1, [pc, #304]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800114c:	680c      	ldr	r4, [r1, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd31 	bl	8000bb8 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	6363      	str	r3, [r4, #52]	@ 0x34
			(abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
}
 800115a:	e088      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d12b      	bne.n	80011ba <setPulseFromDutyValue+0x132>
 8001162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001166:	f7ff fcff 	bl	8000b68 <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9de 	bl	8000534 <__aeabi_i2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4934      	ldr	r1, [pc, #208]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011aa:	680c      	ldr	r4, [r1, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd02 	bl	8000bb8 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80011b8:	e059      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d12b      	bne.n	8001218 <setPulseFromDutyValue+0x190>
 80011c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c4:	f7ff fcd0 	bl	8000b68 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfb8      	it	lt
 80011ce:	425b      	neglt	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9af 	bl	8000534 <__aeabi_i2d>
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f998 	bl	8000514 <__aeabi_ui2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001208:	680c      	ldr	r4, [r1, #0]
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001216:	e02a      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	f7ff fca4 	bl	8000b68 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f96c 	bl	8000514 <__aeabi_ui2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4907      	ldr	r1, [pc, #28]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001260:	680c      	ldr	r4, [r1, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fca7 	bl	8000bb8 <__aeabi_d2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000
 800127c:	2000033c 	.word	0x2000033c
 8001280:	40590000 	.word	0x40590000
 8001284:	00000000 	.word	0x00000000

08001288 <getSpeedByDelta>:

double getSpeedByDelta(double ticksDelta, double Ts) {
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001292:	ed87 1b00 	vstr	d1, [r7]
	return ticksDelta * 60 / (8400 * Ts);
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <getSpeedByDelta+0x60>)
 800129c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a0:	f7ff f9b2 	bl	8000608 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	461d      	mov	r5, r3
 80012ac:	a30c      	add	r3, pc, #48	@ (adr r3, 80012e0 <getSpeedByDelta+0x58>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff facb 	bl	800085c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80012ce:	eeb0 0a47 	vmov.f32	s0, s14
 80012d2:	eef0 0a67 	vmov.f32	s1, s15
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdb0      	pop	{r4, r5, r7, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40c06800 	.word	0x40c06800
 80012e8:	404e0000 	.word	0x404e0000
 80012ec:	00000000 	.word	0x00000000

080012f0 <getTicksDelta>:

double getTicksDelta(double currentTicks, double lastTicks, double Ts) {
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80012fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80012fe:	ed87 2b00 	vstr	d2, [r7]
	double delta;

	if (abs(currentTicks - lastTicks) <= ceil(12600 * Ts))
 8001302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130a:	f7fe ffc5 	bl	8000298 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc27 	bl	8000b68 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfb8      	it	lt
 8001320:	425b      	neglt	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f906 	bl	8000534 <__aeabi_i2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	a33a      	add	r3, pc, #232	@ (adr r3, 8001418 <getTicksDelta+0x128>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001336:	f7ff f967 	bl	8000608 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b17 	vmov	d7, r2, r3
 8001342:	eeb0 0a47 	vmov.f32	s0, s14
 8001346:	eef0 0a67 	vmov.f32	s1, s15
 800134a:	f006 fe35 	bl	8007fb8 <ceil>
 800134e:	ec53 2b10 	vmov	r2, r3, d0
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7ff fbd3 	bl	8000b00 <__aeabi_dcmple>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00a      	beq.n	8001376 <getTicksDelta+0x86>
		delta = currentTicks - lastTicks;
 8001360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001364:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001368:	f7fe ff96 	bl	8000298 <__aeabi_dsub>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001374:	e041      	b.n	80013fa <getTicksDelta+0x10a>
	else {
		if (lastTicks > currentTicks)
 8001376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800137a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137e:	f7ff fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01c      	beq.n	80013c2 <getTicksDelta+0xd2>
			delta = currentTicks + pow(2, 16) - 1 - lastTicks;
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <getTicksDelta+0x120>)
 800138e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001392:	f7fe ff83 	bl	800029c <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <getTicksDelta+0x124>)
 80013a4:	f7fe ff78 	bl	8000298 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b4:	f7fe ff70 	bl	8000298 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013c0:	e01b      	b.n	80013fa <getTicksDelta+0x10a>
		else
			delta = currentTicks - pow(2, 16) + 1 - lastTicks;
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <getTicksDelta+0x120>)
 80013c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013cc:	f7fe ff64 	bl	8000298 <__aeabi_dsub>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <getTicksDelta+0x124>)
 80013de:	f7fe ff5d 	bl	800029c <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ee:	f7fe ff53 	bl	8000298 <__aeabi_dsub>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	return delta;
 80013fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	eef0 0a67 	vmov.f32	s1, s15
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	40f00000 	.word	0x40f00000
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	00000000 	.word	0x00000000
 800141c:	40c89c00 	.word	0x40c89c00

08001420 <getPosition>:
        return 0;
    }

}

double getPosition(double delta, double *ticks_star){
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0b02 	vstr	d0, [r7, #8]
 800142a:	6078      	str	r0, [r7, #4]

	double ticks_star_old = *ticks_star;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	e9c7 2308 	strd	r2, r3, [r7, #32]
	*ticks_star = ticks_star_old + delta;
 8001436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800143a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800143e:	f7fe ff2d 	bl	800029c <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
	double completeTheta = 2*M_PI*(*ticks_star)/(8400);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	a311      	add	r3, pc, #68	@ (adr r3, 8001498 <getPosition+0x78>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8d6 	bl	8000608 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	a30e      	add	r3, pc, #56	@ (adr r3, 80014a0 <getPosition+0x80>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f9f7 	bl	800085c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double position = completeTheta;
 8001476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800147a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return position;
 800147e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001482:	ec43 2b17 	vmov	d7, r2, r3

}
 8001486:	eeb0 0a47 	vmov.f32	s0, s14
 800148a:	eef0 0a67 	vmov.f32	s1, s15
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	54442d18 	.word	0x54442d18
 800149c:	401921fb 	.word	0x401921fb
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40c06800 	.word	0x40c06800

080014a8 <getDigitalSensorValue>:

	return r;

}

double getDigitalSensorValue(double raw_value){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	ed87 0b00 	vstr	d0, [r7]
	double digital_value =  raw_value * 3.3/4095;
 80014b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80014f0 <getDigitalSensorValue+0x48>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014bc:	f7ff f8a4 	bl	8000608 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	a30b      	add	r3, pc, #44	@ (adr r3, 80014f8 <getDigitalSensorValue+0x50>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f9c5 	bl	800085c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return digital_value;
 80014da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014de:	ec43 2b17 	vmov	d7, r2, r3
}
 80014e2:	eeb0 0a47 	vmov.f32	s0, s14
 80014e6:	eef0 0a67 	vmov.f32	s1, s15
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	66666666 	.word	0x66666666
 80014f4:	400a6666 	.word	0x400a6666
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40affe00 	.word	0x40affe00

08001500 <getAmpere>:

double getAmpere(double voltage_value){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	ed87 0b00 	vstr	d0, [r7]
	return ((voltage_value-2.5-0.105)/0.185);
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <getAmpere+0x68>)
 8001510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001514:	f7fe fec0 	bl	8000298 <__aeabi_dsub>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	a30d      	add	r3, pc, #52	@ (adr r3, 8001558 <getAmpere+0x58>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe feb7 	bl	8000298 <__aeabi_dsub>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	a30b      	add	r3, pc, #44	@ (adr r3, 8001560 <getAmpere+0x60>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f990 	bl	800085c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	ec43 2b17 	vmov	d7, r2, r3
}
 8001544:	eeb0 0a47 	vmov.f32	s0, s14
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	ae147ae1 	.word	0xae147ae1
 800155c:	3fbae147 	.word	0x3fbae147
 8001560:	7ae147ae 	.word	0x7ae147ae
 8001564:	3fc7ae14 	.word	0x3fc7ae14
 8001568:	40040000 	.word	0x40040000

0800156c <firstOrderLagFilter>:

double firstOrderLagFilter(double y_old, double y_hat_old, double alpha){
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	ed87 0b04 	vstr	d0, [r7, #16]
 8001576:	ed87 1b02 	vstr	d1, [r7, #8]
 800157a:	ed87 2b00 	vstr	d2, [r7]
    double y_filtered= (alpha *y_hat_old) + ((1-alpha)* y_old);
 800157e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001586:	f7ff f83f 	bl	8000608 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	4910      	ldr	r1, [pc, #64]	@ (80015dc <firstOrderLagFilter+0x70>)
 800159c:	f7fe fe7c 	bl	8000298 <__aeabi_dsub>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ac:	f7ff f82c 	bl	8000608 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fe70 	bl	800029c <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return y_filtered;
 80015c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}
 80015da:	bf00      	nop
 80015dc:	3ff00000 	.word	0x3ff00000

080015e0 <process_adc_data>:
double y_hat_old = 0;
double alpha = 0.9;
double k_t = 1.32;

double process_adc_data(uint32_t raw)
{  // Get ADC value
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    //HAL_ADC_Start(&hadc1);
    //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    //raw = HAL_ADC_GetValue(&hadc1);
	double y_hat_local_process_adc_data=0;
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double digital_current_value = getDigitalSensorValue(raw);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ff8d 	bl	8000514 <__aeabi_ui2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	ec43 2b10 	vmov	d0, r2, r3
 8001602:	f7ff ff51 	bl	80014a8 <getDigitalSensorValue>
 8001606:	ed87 0b04 	vstr	d0, [r7, #16]
    double ampere_value = getAmpere(digital_current_value);
 800160a:	ed97 0b04 	vldr	d0, [r7, #16]
 800160e:	f7ff ff77 	bl	8001500 <getAmpere>
 8001612:	ed87 0b02 	vstr	d0, [r7, #8]
    y_hat_local_process_adc_data = firstOrderLagFilter(y_old, y_hat_old, alpha);
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <process_adc_data+0x94>)
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <process_adc_data+0x98>)
 800161e:	ed93 6b00 	vldr	d6, [r3]
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <process_adc_data+0x9c>)
 8001624:	ed93 5b00 	vldr	d5, [r3]
 8001628:	eeb0 2a45 	vmov.f32	s4, s10
 800162c:	eef0 2a65 	vmov.f32	s5, s11
 8001630:	eeb0 1a46 	vmov.f32	s2, s12
 8001634:	eef0 1a66 	vmov.f32	s3, s13
 8001638:	eeb0 0a47 	vmov.f32	s0, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	f7ff ff94 	bl	800156c <firstOrderLagFilter>
 8001644:	ed87 0b06 	vstr	d0, [r7, #24]
    y_old = ampere_value;
 8001648:	490a      	ldr	r1, [pc, #40]	@ (8001674 <process_adc_data+0x94>)
 800164a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800164e:	e9c1 2300 	strd	r2, r3, [r1]
    y_hat_old = y_hat_local_process_adc_data;
 8001652:	4909      	ldr	r1, [pc, #36]	@ (8001678 <process_adc_data+0x98>)
 8001654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001658:	e9c1 2300 	strd	r2, r3, [r1]
    return y_hat_local_process_adc_data;
 800165c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001660:	ec43 2b17 	vmov	d7, r2, r3
    // Aggiungi il tuo codice di elaborazione qui
    // Ad esempio: calcolo della media, filtraggio, ecc.
}
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	eef0 0a67 	vmov.f32	s1, s15
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000480 	.word	0x20000480
 8001678:	20000490 	.word	0x20000490
 800167c:	20000060 	.word	0x20000060

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001684:	b0a3      	sub	sp, #140	@ 0x8c
 8001686:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 ffd2 	bl	8002630 <HAL_Init>

  /* USER CODE BEGIN Init */
	//size_t bufferSize = (size_t)ceil(2 * WAITING / (Ts * samplingPrescaler));
	size_t bufferSize = 1000;
 800168c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
	cb_init(&myBuff, bufferSize, sizeof(record));
 8001692:	2240      	movs	r2, #64	@ 0x40
 8001694:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001696:	483f      	ldr	r0, [pc, #252]	@ (8001794 <main+0x114>)
 8001698:	f7ff fc26 	bl	8000ee8 <cb_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f88c 	bl	80017b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f000 fae6 	bl	8001c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016a4:	f000 faba 	bl	8001c1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016a8:	f000 f9e8 	bl	8001a7c <MX_TIM3_Init>
  MX_TIM1_Init();
 80016ac:	f000 f942 	bl	8001934 <MX_TIM1_Init>
  MX_TIM4_Init();
 80016b0:	f000 fa66 	bl	8001b80 <MX_TIM4_Init>
  MX_ADC1_Init();
 80016b4:	f000 f8ec 	bl	8001890 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016b8:	f000 f994 	bl	80019e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016bc:	2100      	movs	r1, #0
 80016be:	4836      	ldr	r0, [pc, #216]	@ (8001798 <main+0x118>)
 80016c0:	f002 fc68 	bl	8003f94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	4834      	ldr	r0, [pc, #208]	@ (8001798 <main+0x118>)
 80016c8:	f002 fc64 	bl	8003f94 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 80016cc:	4833      	ldr	r0, [pc, #204]	@ (800179c <main+0x11c>)
 80016ce:	f002 fb4b 	bl	8003d68 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80016d2:	4833      	ldr	r0, [pc, #204]	@ (80017a0 <main+0x120>)
 80016d4:	f002 fba2 	bl	8003e1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80016d8:	4832      	ldr	r0, [pc, #200]	@ (80017a4 <main+0x124>)
 80016da:	f002 fb9f 	bl	8003e1c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int referenceIndex = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	657b      	str	r3, [r7, #84]	@ 0x54

	referenceVal = referenceVals[referenceIndex];
 80016e2:	4a31      	ldr	r2, [pc, #196]	@ (80017a8 <main+0x128>)
 80016e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	492f      	ldr	r1, [pc, #188]	@ (80017ac <main+0x12c>)
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 80016f4:	482e      	ldr	r0, [pc, #184]	@ (80017b0 <main+0x130>)
 80016f6:	f004 fd97 	bl	8006228 <iprintf>

	while (1) {
		size_t nEntriesToSend = myBuff.count; //number of samples not read yet
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <main+0x114>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
		record retrieved; //buffer entry

		for (size_t count = 0; count < nEntriesToSend; count++) {
 8001700:	2300      	movs	r3, #0
 8001702:	653b      	str	r3, [r7, #80]	@ 0x50
 8001704:	e02b      	b.n	800175e <main+0xde>
			cb_pop_front(&myBuff, &retrieved); //take entry from the buffer
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	4821      	ldr	r0, [pc, #132]	@ (8001794 <main+0x114>)
 800170e:	f7ff fc5b 	bl	8000fc8 <cb_pop_front>
			printf("%lu, %f, %f, %f, %f, %f, %f, %lu, %lu\n\r",
 8001712:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8001714:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001718:	ed87 7b00 	vstr	d7, [r7]
 800171c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001720:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001724:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001728:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800172c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001736:	920a      	str	r2, [sp, #40]	@ 0x28
 8001738:	ed8d 7b08 	vstr	d7, [sp, #32]
 800173c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001740:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001744:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001748:	e9cd 0100 	strd	r0, r1, [sp]
 800174c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001750:	4631      	mov	r1, r6
 8001752:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <main+0x134>)
 8001754:	f004 fd68 	bl	8006228 <iprintf>
		for (size_t count = 0; count < nEntriesToSend; count++) {
 8001758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800175a:	3301      	adds	r3, #1
 800175c:	653b      	str	r3, [r7, #80]	@ 0x50
 800175e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001762:	429a      	cmp	r2, r3
 8001764:	d3cf      	bcc.n	8001706 <main+0x86>
					retrieved.current_current,

					retrieved.cycleBeginDelay,
					retrieved.cycleCoreDuration); // send values via USART using format: value1, value2, value3, ... valuen \n \r
		}
		referenceVal = referenceVals[referenceIndex];
 8001766:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <main+0x128>)
 8001768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	490e      	ldr	r1, [pc, #56]	@ (80017ac <main+0x12c>)
 8001774:	e9c1 2300 	strd	r2, r3, [r1]
		referenceIndex = referenceIndex + 1;
 8001778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800177a:	3301      	adds	r3, #1
 800177c:	657b      	str	r3, [r7, #84]	@ 0x54
		HAL_Delay(WAITING*1000); // takes a time value in ms
 800177e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001782:	f000 ffc7 	bl	8002714 <HAL_Delay>
		if (referenceIndex > 9)
 8001786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001788:	2b09      	cmp	r3, #9
 800178a:	ddb6      	ble.n	80016fa <main+0x7a>
			referenceIndex = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	657b      	str	r3, [r7, #84]	@ 0x54
	while (1) {
 8001790:	e7b3      	b.n	80016fa <main+0x7a>
 8001792:	bf00      	nop
 8001794:	20000414 	.word	0x20000414
 8001798:	2000033c 	.word	0x2000033c
 800179c:	200002ac 	.word	0x200002ac
 80017a0:	200002f4 	.word	0x200002f4
 80017a4:	20000384 	.word	0x20000384
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000468 	.word	0x20000468
 80017b0:	080080f0 	.word	0x080080f0
 80017b4:	080080f8 	.word	0x080080f8

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	@ 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	@ 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fd9d 	bl	8006306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <SystemClock_Config+0xd0>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	4a28      	ldr	r2, [pc, #160]	@ (8001888 <SystemClock_Config+0xd0>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <SystemClock_Config+0xd0>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemClock_Config+0xd4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001804:	4a21      	ldr	r2, [pc, #132]	@ (800188c <SystemClock_Config+0xd4>)
 8001806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <SystemClock_Config+0xd4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001818:	2302      	movs	r3, #2
 800181a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800181c:	2301      	movs	r3, #1
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001820:	2310      	movs	r3, #16
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001824:	2302      	movs	r3, #2
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001828:	2300      	movs	r3, #0
 800182a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800182c:	2310      	movs	r3, #16
 800182e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001830:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001836:	2304      	movs	r3, #4
 8001838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800183a:	2304      	movs	r3, #4
 800183c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fde8 	bl	8003418 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800184e:	f000 fc2f 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f84a 	bl	8003908 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800187a:	f000 fc19 	bl	80020b0 <Error_Handler>
  }
}
 800187e:	bf00      	nop
 8001880:	3750      	adds	r7, #80	@ 0x50
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a2:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018a4:	4a21      	ldr	r2, [pc, #132]	@ (800192c <MX_ADC1_Init+0x9c>)
 80018a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <MX_ADC1_Init+0xa0>)
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018de:	2201      	movs	r2, #1
 80018e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f0:	480d      	ldr	r0, [pc, #52]	@ (8001928 <MX_ADC1_Init+0x98>)
 80018f2:	f000 ff33 	bl	800275c <HAL_ADC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018fc:	f000 fbd8 	bl	80020b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001900:	230a      	movs	r3, #10
 8001902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_ADC1_Init+0x98>)
 8001912:	f001 f8b3 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800191c:	f000 fbc8 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000264 	.word	0x20000264
 800192c:	40012000 	.word	0x40012000
 8001930:	0f000001 	.word	0x0f000001

08001934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2224      	movs	r2, #36	@ 0x24
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fcdf 	bl	8006306 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <MX_TIM1_Init+0xa8>)
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_TIM1_Init+0xac>)
 8001954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <MX_TIM1_Init+0xa8>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_TIM1_Init+0xa8>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <MX_TIM1_Init+0xa8>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_TIM1_Init+0xa8>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_TIM1_Init+0xa8>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_TIM1_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800197c:	2303      	movs	r3, #3
 800197e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001984:	2301      	movs	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001994:	2301      	movs	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_TIM1_Init+0xa8>)
 80019a8:	f002 fba4 	bl	80040f4 <HAL_TIM_Encoder_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80019b2:	f000 fb7d 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	@ (80019dc <MX_TIM1_Init+0xa8>)
 80019c4:	f003 f9b6 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80019ce:	f000 fb6f 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	@ 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002ac 	.word	0x200002ac
 80019e0:	40010000 	.word	0x40010000

080019e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a0a:	2253      	movs	r2, #83	@ 0x53
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a16:	22f9      	movs	r2, #249	@ 0xf9
 8001a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a26:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a28:	f002 f94e 	bl	8003cc8 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a32:	f000 fb3d 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4619      	mov	r1, r3
 8001a42:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a44:	f002 fdae 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 fb2f 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a60:	f003 f968 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a6a:	f000 fb21 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002f4 	.word	0x200002f4

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	@ 0x38
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001aae:	4a33      	ldr	r2, [pc, #204]	@ (8001b7c <MX_TIM3_Init+0x100>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8001ab2:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001ab4:	2253      	movs	r2, #83	@ 0x53
 8001ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 - 1;
 8001abe:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001ac0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001ac4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001ace:	2280      	movs	r2, #128	@ 0x80
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad2:	4829      	ldr	r0, [pc, #164]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001ad4:	f002 f8f8 	bl	8003cc8 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ade:	f000 fae7 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4822      	ldr	r0, [pc, #136]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001af0:	f002 fd58 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001afa:	f000 fad9 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afe:	481e      	ldr	r0, [pc, #120]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001b00:	f002 f9ee 	bl	8003ee0 <HAL_TIM_PWM_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b0a:	f000 fad1 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001b1e:	f003 f909 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b28:	f000 fac2 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	@ 0x60
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001b44:	f002 fc6c 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b4e:	f000 faaf 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2204      	movs	r2, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4807      	ldr	r0, [pc, #28]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001b5a:	f002 fc61 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b64:	f000 faa4 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b68:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <MX_TIM3_Init+0xfc>)
 8001b6a:	f000 fbb5 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	@ 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000033c 	.word	0x2000033c
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <MX_TIM4_Init+0x98>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001ba4:	2253      	movs	r2, #83	@ 0x53
 8001ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000 - 1;
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001bb0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bc2:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001bc4:	f002 f880 	bl	8003cc8 <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bce:	f000 fa6f 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001be0:	f002 fce0 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001bea:	f000 fa61 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <MX_TIM4_Init+0x94>)
 8001bfc:	f003 f89a 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001c06:	f000 fa53 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000384 	.word	0x20000384
 8001c18:	40000800 	.word	0x40000800

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f003 f8f0 	bl	8004e38 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 fa27 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003cc 	.word	0x200003cc
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_GPIO_Init+0x9c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ce0:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001ce2:	f001 fb7f 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4804      	ldr	r0, [pc, #16]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001d00:	f001 f9ec 	bl	80030dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	00000000 	.word	0x00000000

08001d18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b0a6      	sub	sp, #152	@ 0x98
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4ab1      	ldr	r2, [pc, #708]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 819a 	bne.w	800205e <HAL_TIM_PeriodElapsedCallback+0x346>
		k_controller = k_controller + 1;
 8001d2a:	4bb0      	ldr	r3, [pc, #704]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4aae      	ldr	r2, [pc, #696]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d32:	6013      	str	r3, [r2, #0]
		if (k_controller == 0) {
 8001d34:	4bad      	ldr	r3, [pc, #692]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x2e>
			ticControlStep = HAL_GetTick();
 8001d3c:	f000 fcde 	bl	80026fc <HAL_GetTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4aab      	ldr	r2, [pc, #684]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d44:	6013      	str	r3, [r2, #0]
		}
		tocControlStep = HAL_GetTick();
 8001d46:	f000 fcd9 	bl	80026fc <HAL_GetTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4aa9      	ldr	r2, [pc, #676]	@ (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d4e:	6013      	str	r3, [r2, #0]

		currentTicks = (double) __HAL_TIM_GET_COUNTER(&htim1); //take current value of ticks counting the encoder edges
 8001d50:	4ba9      	ldr	r3, [pc, #676]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbdc 	bl	8000514 <__aeabi_ui2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	49a6      	ldr	r1, [pc, #664]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001d62:	e9c1 2300 	strd	r2, r3, [r1]
		double speed = getSpeedByDelta(
 8001d66:	4ba5      	ldr	r3, [pc, #660]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001d68:	ed93 7b00 	vldr	d7, [r3]
 8001d6c:	4ba4      	ldr	r3, [pc, #656]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001d6e:	ed93 6b00 	vldr	d6, [r3]
 8001d72:	4ba4      	ldr	r3, [pc, #656]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d74:	ed93 5b00 	vldr	d5, [r3]
 8001d78:	eeb0 2a45 	vmov.f32	s4, s10
 8001d7c:	eef0 2a65 	vmov.f32	s5, s11
 8001d80:	eeb0 1a46 	vmov.f32	s2, s12
 8001d84:	eef0 1a66 	vmov.f32	s3, s13
 8001d88:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8c:	eef0 0a67 	vmov.f32	s1, s15
 8001d90:	f7ff faae 	bl	80012f0 <getTicksDelta>
 8001d94:	eeb0 6a40 	vmov.f32	s12, s0
 8001d98:	eef0 6a60 	vmov.f32	s13, s1
 8001d9c:	4b99      	ldr	r3, [pc, #612]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d9e:	ed93 7b00 	vldr	d7, [r3]
 8001da2:	eeb0 1a47 	vmov.f32	s2, s14
 8001da6:	eef0 1a67 	vmov.f32	s3, s15
 8001daa:	eeb0 0a46 	vmov.f32	s0, s12
 8001dae:	eef0 0a66 	vmov.f32	s1, s13
 8001db2:	f7ff fa69 	bl	8001288 <getSpeedByDelta>
 8001db6:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
								getTicksDelta(currentTicks, lastTicks, Ts), Ts);

		double position = getPosition(
 8001dba:	4b90      	ldr	r3, [pc, #576]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001dbc:	ed93 7b00 	vldr	d7, [r3]
 8001dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001dc2:	ed93 6b00 	vldr	d6, [r3]
 8001dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dc8:	ed93 5b00 	vldr	d5, [r3]
 8001dcc:	eeb0 2a45 	vmov.f32	s4, s10
 8001dd0:	eef0 2a65 	vmov.f32	s5, s11
 8001dd4:	eeb0 1a46 	vmov.f32	s2, s12
 8001dd8:	eef0 1a66 	vmov.f32	s3, s13
 8001ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8001de0:	eef0 0a67 	vmov.f32	s1, s15
 8001de4:	f7ff fa84 	bl	80012f0 <getTicksDelta>
 8001de8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dec:	eef0 7a60 	vmov.f32	s15, s1
 8001df0:	4885      	ldr	r0, [pc, #532]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001df2:	eeb0 0a47 	vmov.f32	s0, s14
 8001df6:	eef0 0a67 	vmov.f32	s1, s15
 8001dfa:	f7ff fb11 	bl	8001420 <getPosition>
 8001dfe:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
		/*HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		raw = HAL_ADC_GetValue(&hadc1);
		y_hat=process_adc_data(raw, y_old,  y_hat_old, alpha);*/

		double y_hat_local = y_hat;
 8001e02:	4b82      	ldr	r3, [pc, #520]	@ (800200c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

	    double reference=referenceVal;
 8001e0c:	4b80      	ldr	r3, [pc, #512]	@ (8002010 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70


	    double torque_value = k_t*y_hat_local;
 8001e16:	4b7f      	ldr	r3, [pc, #508]	@ (8002014 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e20:	f7fe fbf2 	bl	8000608 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

		double e = reference - y_hat_local;
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e34:	f7fe fa30 	bl	8000298 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		       	   	   	   z - 1

		 U(z)(z-1) = E(z) (2.556 z - 1.606)
		 u(k) = u(k-1) + 2.556 e(k) - 1.606 e(k-1)
		*/
		double z_q_gamma =  + 2.556*e -1.606 * e_last;
 8001e40:	a365      	add	r3, pc, #404	@ (adr r3, 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001e4a:	f7fe fbdd 	bl	8000608 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4614      	mov	r4, r2
 8001e54:	461d      	mov	r5, r3
 8001e56:	4b70      	ldr	r3, [pc, #448]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5c:	a360      	add	r3, pc, #384	@ (adr r3, 8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbd1 	bl	8000608 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe fa13 	bl	8000298 <__aeabi_dsub>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		double z_antiwindFunc = u_last;
 8001e7a:	4b68      	ldr	r3, [pc, #416]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		double u = z_q_gamma + z_antiwindFunc;
 8001e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e88:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001e8c:	f7fe fa06 	bl	800029c <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

		if (u > 12){
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b60      	ldr	r3, [pc, #384]	@ (8002020 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e9e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001ea2:	f7fe fe41 	bl	8000b28 <__aeabi_dcmpgt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x19e>
			u=12;
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002020 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001eb2:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		}
		if(u<-12){
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b5a      	ldr	r3, [pc, #360]	@ (8002024 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001ebc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001ec0:	f7fe fe14 	bl	8000aec <__aeabi_dcmplt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			u=-12;
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b55      	ldr	r3, [pc, #340]	@ (8002024 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001ed0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		}


		setPulseFromDutyValue(u*100/12);
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001eda:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001ede:	f7fe fb93 	bl	8000608 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b4c      	ldr	r3, [pc, #304]	@ (8002020 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ef0:	f7fe fcb4 	bl	800085c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	ec43 2b17 	vmov	d7, r2, r3
 8001efc:	eeb0 0a47 	vmov.f32	s0, s14
 8001f00:	eef0 0a67 	vmov.f32	s1, s15
 8001f04:	f7ff f8c0 	bl	8001088 <setPulseFromDutyValue>

		u_last = u;
 8001f08:	4944      	ldr	r1, [pc, #272]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f0a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
		e_last = e;
 8001f12:	4941      	ldr	r1, [pc, #260]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]

		// u si dovrebbre moltiplicare per Gv ma in questo caso è 1 perchè il guadagno dell'amplificatore di potenza è incluso nel controllore.

		controlComputationDuration = HAL_GetTick() - tocControlStep;
 8001f1c:	f000 fbee 	bl	80026fc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a40      	ldr	r2, [pc, #256]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001f2a:	6013      	str	r3, [r2, #0]
		lastTicks = currentTicks;
 8001f2c:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	4933      	ldr	r1, [pc, #204]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001f34:	e9c1 2300 	strd	r2, r3, [r1]
		// recording data in the buffer


		record r;
		r.current_u = u;
 8001f38:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		r.current_current = y_hat_local;
 8001f40:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001f44:	e9c7 2302 	strd	r2, r3, [r7, #8]
		r.current_error = e;
 8001f48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		r.current_ref = reference;
 8001f50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f54:	e9c7 2308 	strd	r2, r3, [r7, #32]
		r.cycleCoreDuration = controlComputationDuration;
 8001f58:	4b34      	ldr	r3, [pc, #208]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		r.cycleBeginDelay = tocControlStep - ticControlStep
 8001f5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1ad3      	subs	r3, r2, r3
				- (k_controller * Ts * 1000);
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fad3 	bl	8000514 <__aeabi_ui2d>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	460d      	mov	r5, r1
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe facc 	bl	8000514 <__aeabi_ui2d>
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb41 	bl	8000608 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe f97a 	bl	8000298 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
		r.cycleBeginDelay = tocControlStep - ticControlStep
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fe04 	bl	8000bb8 <__aeabi_d2uiz>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		r.currentTimestamp = HAL_GetTick();
 8001fb4:	f000 fba2 	bl	80026fc <HAL_GetTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30
		r.current_pos=position;
 8001fbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001fc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		r.current_vel=speed;
 8001fc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fc8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (samplingPrescalerCounter == (samplingPrescaler - 1)) {
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	e031      	b.n	8002038 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	20c49ba6 	.word	0x20c49ba6
 8001fdc:	400472b0 	.word	0x400472b0
 8001fe0:	0e560419 	.word	0x0e560419
 8001fe4:	3ff9b22d 	.word	0x3ff9b22d
 8001fe8:	20000384 	.word	0x20000384
 8001fec:	20000058 	.word	0x20000058
 8001ff0:	20000448 	.word	0x20000448
 8001ff4:	2000044c 	.word	0x2000044c
 8001ff8:	200002ac 	.word	0x200002ac
 8001ffc:	20000440 	.word	0x20000440
 8002000:	20000438 	.word	0x20000438
 8002004:	20000000 	.word	0x20000000
 8002008:	20000478 	.word	0x20000478
 800200c:	20000488 	.word	0x20000488
 8002010:	20000468 	.word	0x20000468
 8002014:	20000068 	.word	0x20000068
 8002018:	20000460 	.word	0x20000460
 800201c:	20000458 	.word	0x20000458
 8002020:	40280000 	.word	0x40280000
 8002024:	c0280000 	.word	0xc0280000
 8002028:	40590000 	.word	0x40590000
 800202c:	20000450 	.word	0x20000450
 8002030:	408f4000 	.word	0x408f4000
 8002034:	2000005c 	.word	0x2000005c
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d109      	bne.n	8002054 <HAL_TIM_PeriodElapsedCallback+0x33c>
			cb_push_back(&myBuff, &r);
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	4619      	mov	r1, r3
 8002046:	4816      	ldr	r0, [pc, #88]	@ (80020a0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002048:	f7fe ff86 	bl	8000f58 <cb_push_back>
			samplingPrescalerCounter = -1;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800204e:	f04f 32ff 	mov.w	r2, #4294967295
 8002052:	601a      	str	r2, [r3, #0]
		}
		samplingPrescalerCounter++;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a10      	ldr	r2, [pc, #64]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800205c:	6013      	str	r3, [r2, #0]
	}
	if (htim == &htim2) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d115      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x37a>
		uint32_t raw;
		HAL_ADC_Start(&hadc1);
 8002066:	4810      	ldr	r0, [pc, #64]	@ (80020a8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002068:	f000 fbbc 	bl	80027e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002072:	f000 fc6b 	bl	800294c <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8002076:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002078:	f000 fcf3 	bl	8002a62 <HAL_ADC_GetValue>
 800207c:	64f8      	str	r0, [r7, #76]	@ 0x4c
		y_hat=process_adc_data(raw);
 800207e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002080:	f7ff faae 	bl	80015e0 <process_adc_data>
 8002084:	eeb0 7a40 	vmov.f32	s14, s0
 8002088:	eef0 7a60 	vmov.f32	s15, s1
 800208c:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x394>)
 800208e:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002092:	bf00      	nop
 8002094:	3798      	adds	r7, #152	@ 0x98
 8002096:	46bd      	mov	sp, r7
 8002098:	bdb0      	pop	{r4, r5, r7, pc}
 800209a:	bf00      	nop
 800209c:	20000470 	.word	0x20000470
 80020a0:	20000414 	.word	0x20000414
 80020a4:	200002f4 	.word	0x200002f4
 80020a8:	20000264 	.word	0x20000264
 80020ac:	20000488 	.word	0x20000488

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <Error_Handler+0x8>

080020bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_ADC_MspInit+0x7c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d127      	bne.n	800217e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4a15      	ldr	r2, [pc, #84]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	6453      	str	r3, [r2, #68]	@ 0x44
 800213e:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_ADC_MspInit+0x80>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <HAL_ADC_MspInit+0x84>)
 800217a:	f000 ffaf 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40012000 	.word	0x40012000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020800 	.word	0x40020800

08002194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x84>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12c      	bne.n	8002210 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a17      	ldr	r2, [pc, #92]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_TIM_Encoder_MspInit+0x88>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002200:	2301      	movs	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x8c>)
 800220c:	f000 ff66 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	@ 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40010000 	.word	0x40010000
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000

08002224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002234:	d116      	bne.n	8002264 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	201c      	movs	r0, #28
 8002258:	f000 ff09 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800225c:	201c      	movs	r0, #28
 800225e:	f000 ff22 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002262:	e02e      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_TIM_Base_MspInit+0xac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10e      	bne.n	800228c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
}
 800228a:	e01a      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d115      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	201e      	movs	r0, #30
 80022b8:	f000 fed9 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022bc:	201e      	movs	r0, #30
 80022be:	f000 fef2 	bl	80030a6 <HAL_NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800

080022d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <HAL_TIM_MspPostInit+0x68>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11d      	bne.n	8002336 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_TIM_MspPostInit+0x6c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_TIM_MspPostInit+0x6c>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_TIM_MspPostInit+0x6c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002316:	2330      	movs	r3, #48	@ 0x30
 8002318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002326:	2302      	movs	r3, #2
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	@ (8002348 <HAL_TIM_MspPostInit+0x70>)
 8002332:	f000 fed3 	bl	80030dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40000400 	.word	0x40000400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400

0800234c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <HAL_UART_MspInit+0x84>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12b      	bne.n	80023c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_UART_MspInit+0x88>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a6:	230c      	movs	r3, #12
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_UART_MspInit+0x8c>)
 80023c2:	f000 fe8b 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	@ 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002432:	f000 f94f 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <TIM2_IRQHandler+0x10>)
 8002442:	f001 fefd 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200002f4 	.word	0x200002f4

08002450 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM4_IRQHandler+0x10>)
 8002456:	f001 fef3 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000384 	.word	0x20000384

08002464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_kill>:

int _kill(int pid, int sig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800247e:	f003 ffa5 	bl	80063cc <__errno>
 8002482:	4603      	mov	r3, r0
 8002484:	2216      	movs	r2, #22
 8002486:	601a      	str	r2, [r3, #0]
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_exit>:

void _exit (int status)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffe7 	bl	8002474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a6:	bf00      	nop
 80024a8:	e7fd      	b.n	80024a6 <_exit+0x12>

080024aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e00a      	b.n	80024d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024bc:	f3af 8000 	nop.w
 80024c0:	4601      	mov	r1, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbf0      	blt.n	80024bc <_read+0x12>
  }

  return len;
 80024da:	687b      	ldr	r3, [r7, #4]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800250c:	605a      	str	r2, [r3, #4]
  return 0;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_isatty>:

int _isatty(int file)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	@ (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f003 ff26 	bl	80063cc <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20018000 	.word	0x20018000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20000498 	.word	0x20000498
 80025b4:	200005f0 	.word	0x200005f0

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002614 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025e0:	f7ff ffea 	bl	80025b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e4:	480c      	ldr	r0, [pc, #48]	@ (8002618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025e6:	490d      	ldr	r1, [pc, #52]	@ (800261c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800260a:	f003 fee5 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7ff f837 	bl	8001680 <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002614:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8002620:	080084b8 	.word	0x080084b8
  ldr r2, =_sbss
 8002624:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002628:	200005ec 	.word	0x200005ec

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	@ (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 fcfd 	bl	8003058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fd2a 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd15 	bl	80030c2 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 fcdd 	bl	800306e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000070 	.word	0x20000070
 80026cc:	20000078 	.word	0x20000078
 80026d0:	20000074 	.word	0x20000074

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000078 	.word	0x20000078
 80026f8:	2000049c 	.word	0x2000049c

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000049c 	.word	0x2000049c

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000078 	.word	0x20000078

0800275c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e033      	b.n	80027da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fcc6 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa86 	bl	8002cc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Start+0x1a>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e097      	b.n	800292e <HAL_ADC_Start+0x14a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d018      	beq.n	8002846 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002824:	4b45      	ldr	r3, [pc, #276]	@ (800293c <HAL_ADC_Start+0x158>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a45      	ldr	r2, [pc, #276]	@ (8002940 <HAL_ADC_Start+0x15c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9a      	lsrs	r2, r3, #18
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002838:	e002      	b.n	8002840 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d15f      	bne.n	8002914 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800287e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002898:	f023 0206 	bic.w	r2, r3, #6
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	645a      	str	r2, [r3, #68]	@ 0x44
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_ADC_Start+0x160>)
 80028b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d129      	bne.n	800292c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	e020      	b.n	800292c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a16      	ldr	r2, [pc, #88]	@ (8002948 <HAL_ADC_Start+0x164>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d11b      	bne.n	800292c <HAL_ADC_Start+0x148>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d114      	bne.n	800292c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	e00b      	b.n	800292c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f043 0210 	orr.w	r2, r3, #16
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	f043 0201 	orr.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000070 	.word	0x20000070
 8002940:	431bde83 	.word	0x431bde83
 8002944:	40012300 	.word	0x40012300
 8002948:	40012000 	.word	0x40012000

0800294c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002968:	d113      	bne.n	8002992 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002978:	d10b      	bne.n	8002992 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e063      	b.n	8002a5a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002992:	f7ff feb3 	bl	80026fc <HAL_GetTick>
 8002996:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002998:	e021      	b.n	80029de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d01d      	beq.n	80029de <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_ADC_PollForConversion+0x6c>
 80029a8:	f7ff fea8 	bl	80026fc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d212      	bcs.n	80029de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d00b      	beq.n	80029de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e03d      	b.n	8002a5a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d1d6      	bne.n	800299a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0212 	mvn.w	r2, #18
 80029f4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d123      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11f      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e105      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x228>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d925      	bls.n	8002af4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4403      	add	r3, r0
 8002ae6:	3b1e      	subs	r3, #30
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	e022      	b.n	8002b3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	2207      	movs	r2, #7
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4403      	add	r3, r0
 8002b30:	409a      	lsls	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d824      	bhi.n	8002b8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b05      	subs	r3, #5
 8002b54:	221f      	movs	r2, #31
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	400a      	ands	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b05      	subs	r3, #5
 8002b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b8a:	e04c      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d824      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b23      	subs	r3, #35	@ 0x23
 8002ba6:	221f      	movs	r2, #31
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b23      	subs	r3, #35	@ 0x23
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bdc:	e023      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b41      	subs	r3, #65	@ 0x41
 8002bf0:	221f      	movs	r2, #31
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b41      	subs	r3, #65	@ 0x41
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x234>)
 8002c28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a21      	ldr	r2, [pc, #132]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x238>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1cc>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b12      	cmp	r3, #18
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x238>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d123      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x21e>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d003      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x1e6>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b11      	cmp	r3, #17
 8002c60:	d11b      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d111      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x23c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_ADC_ConfigChannel+0x240>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0c9a      	lsrs	r2, r3, #18
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40012300 	.word	0x40012300
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	20000070 	.word	0x20000070
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc8:	4b79      	ldr	r3, [pc, #484]	@ (8002eb0 <ADC_Init+0x1f0>)
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	021a      	lsls	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	4a58      	ldr	r2, [pc, #352]	@ (8002eb4 <ADC_Init+0x1f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e00f      	b.n	8002dbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0202 	bic.w	r2, r2, #2
 8002dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7e1b      	ldrb	r3, [r3, #24]
 8002dd8:	005a      	lsls	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dfa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	3b01      	subs	r3, #1
 8002e18:	035a      	lsls	r2, r3, #13
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	e007      	b.n	8002e34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	051a      	lsls	r2, r3, #20
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e76:	025a      	lsls	r2, r3, #9
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	029a      	lsls	r2, r3, #10
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40012300 	.word	0x40012300
 8002eb4:	0f000001 	.word	0x0f000001

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	@ (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	@ (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf28      	it	cs
 8002fca:	2304      	movcs	r3, #4
 8002fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d902      	bls.n	8002fdc <NVIC_EncodePriority+0x30>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	e000      	b.n	8002fde <NVIC_EncodePriority+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	401a      	ands	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	4313      	orrs	r3, r2
         );
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	@ 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003024:	d301      	bcc.n	800302a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003026:	2301      	movs	r3, #1
 8003028:	e00f      	b.n	800304a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <SysTick_Config+0x40>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003032:	210f      	movs	r1, #15
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f7ff ff8e 	bl	8002f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <SysTick_Config+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <SysTick_Config+0x40>)
 8003044:	2207      	movs	r2, #7
 8003046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000e010 	.word	0xe000e010

08003058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff29 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003080:	f7ff ff3e 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 8003084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f7ff ff8e 	bl	8002fac <NVIC_EncodePriority>
 8003090:	4602      	mov	r2, r0
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff5d 	bl	8002f58 <__NVIC_SetPriority>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff31 	bl	8002f1c <__NVIC_EnableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffa2 	bl	8003014 <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e159      	b.n	80033ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	f040 8148 	bne.w	80033a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d005      	beq.n	800312e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	2b02      	cmp	r3, #2
 800312c:	d130      	bne.n	8003190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 0201 	and.w	r2, r3, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b03      	cmp	r3, #3
 800319a:	d017      	beq.n	80031cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d123      	bne.n	8003220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a2 	beq.w	80033a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	4b57      	ldr	r3, [pc, #348]	@ (80033c4 <HAL_GPIO_Init+0x2e8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	4a56      	ldr	r2, [pc, #344]	@ (80033c4 <HAL_GPIO_Init+0x2e8>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003270:	6453      	str	r3, [r2, #68]	@ 0x44
 8003272:	4b54      	ldr	r3, [pc, #336]	@ (80033c4 <HAL_GPIO_Init+0x2e8>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327e:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_GPIO_Init+0x2ec>)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	@ (80033cc <HAL_GPIO_Init+0x2f0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x202>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a48      	ldr	r2, [pc, #288]	@ (80033d0 <HAL_GPIO_Init+0x2f4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x1fe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a47      	ldr	r2, [pc, #284]	@ (80033d4 <HAL_GPIO_Init+0x2f8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x1fa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a46      	ldr	r2, [pc, #280]	@ (80033d8 <HAL_GPIO_Init+0x2fc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x1f6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a45      	ldr	r2, [pc, #276]	@ (80033dc <HAL_GPIO_Init+0x300>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x1f2>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e008      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d2:	2303      	movs	r3, #3
 80032d4:	e004      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032de:	2300      	movs	r3, #0
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f002 0203 	and.w	r2, r2, #3
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	4093      	lsls	r3, r2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f0:	4935      	ldr	r1, [pc, #212]	@ (80033c8 <HAL_GPIO_Init+0x2ec>)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fe:	4b38      	ldr	r3, [pc, #224]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003322:	4a2f      	ldr	r2, [pc, #188]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003328:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800334c:	4a24      	ldr	r2, [pc, #144]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003352:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003376:	4a1a      	ldr	r2, [pc, #104]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800337c:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a0:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f aea2 	bls.w	80030f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3724      	adds	r7, #36	@ 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40020400 	.word	0x40020400
 80033d4:	40020800 	.word	0x40020800
 80033d8:	40020c00 	.word	0x40020c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40013c00 	.word	0x40013c00

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	041a      	lsls	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e267      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d075      	beq.n	8003522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003436:	4b88      	ldr	r3, [pc, #544]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b04      	cmp	r3, #4
 8003440:	d00c      	beq.n	800345c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4b85      	ldr	r3, [pc, #532]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	2b08      	cmp	r3, #8
 800344c:	d112      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b82      	ldr	r3, [pc, #520]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345a:	d10b      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	4b7e      	ldr	r3, [pc, #504]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x108>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d157      	bne.n	8003520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e242      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d106      	bne.n	800348c <HAL_RCC_OscConfig+0x74>
 800347e:	4b76      	ldr	r3, [pc, #472]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a75      	ldr	r2, [pc, #468]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e01d      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x98>
 8003496:	4b70      	ldr	r3, [pc, #448]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6f      	ldr	r2, [pc, #444]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 80034b0:	4b69      	ldr	r3, [pc, #420]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a68      	ldr	r2, [pc, #416]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b66      	ldr	r3, [pc, #408]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a65      	ldr	r2, [pc, #404]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7ff f914 	bl	80026fc <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d8:	f7ff f910 	bl	80026fc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	@ 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e207      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0xc0>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7ff f900 	bl	80026fc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7ff f8fc 	bl	80026fc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1f3      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	4b51      	ldr	r3, [pc, #324]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0xe8>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352e:	4b4a      	ldr	r3, [pc, #296]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353a:	4b47      	ldr	r3, [pc, #284]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	2b08      	cmp	r3, #8
 8003544:	d11c      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b44      	ldr	r3, [pc, #272]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d116      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e1c7      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4937      	ldr	r1, [pc, #220]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	e03a      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003588:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_RCC_OscConfig+0x244>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7ff f8b5 	bl	80026fc <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003596:	f7ff f8b1 	bl	80026fc <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1a8      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b4:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4925      	ldr	r1, [pc, #148]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCC_OscConfig+0x244>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7ff f894 	bl	80026fc <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d8:	f7ff f890 	bl	80026fc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e187      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d036      	beq.n	8003670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <HAL_RCC_OscConfig+0x248>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7ff f874 	bl	80026fc <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003618:	f7ff f870 	bl	80026fc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e167      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCC_OscConfig+0x240>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x200>
 8003636:	e01b      	b.n	8003670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <HAL_RCC_OscConfig+0x248>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7ff f85d 	bl	80026fc <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	e00e      	b.n	8003664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003646:	f7ff f859 	bl	80026fc <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d907      	bls.n	8003664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e150      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
 8003658:	40023800 	.word	0x40023800
 800365c:	42470000 	.word	0x42470000
 8003660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ea      	bne.n	8003646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8097 	beq.w	80037ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003682:	4b81      	ldr	r3, [pc, #516]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	4a7c      	ldr	r2, [pc, #496]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	@ 0x40
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b77      	ldr	r3, [pc, #476]	@ (800388c <HAL_RCC_OscConfig+0x474>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b74      	ldr	r3, [pc, #464]	@ (800388c <HAL_RCC_OscConfig+0x474>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a73      	ldr	r2, [pc, #460]	@ (800388c <HAL_RCC_OscConfig+0x474>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7ff f819 	bl	80026fc <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7ff f815 	bl	80026fc <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e10c      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b6a      	ldr	r3, [pc, #424]	@ (800388c <HAL_RCC_OscConfig+0x474>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x2ea>
 80036f4:	4b64      	ldr	r3, [pc, #400]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	4a63      	ldr	r2, [pc, #396]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003700:	e01c      	b.n	800373c <HAL_RCC_OscConfig+0x324>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x30c>
 800370a:	4b5f      	ldr	r3, [pc, #380]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370e:	4a5e      	ldr	r2, [pc, #376]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6713      	str	r3, [r2, #112]	@ 0x70
 8003716:	4b5c      	ldr	r3, [pc, #368]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	4a5b      	ldr	r2, [pc, #364]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	@ 0x70
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0x324>
 8003724:	4b58      	ldr	r3, [pc, #352]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	4a57      	ldr	r2, [pc, #348]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003730:	4b55      	ldr	r3, [pc, #340]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003734:	4a54      	ldr	r2, [pc, #336]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fe ffda 	bl	80026fc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe ffd6 	bl	80026fc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0cb      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	4b49      	ldr	r3, [pc, #292]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ee      	beq.n	800374c <HAL_RCC_OscConfig+0x334>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7fe ffc4 	bl	80026fc <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe ffc0 	bl	80026fc <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e0b5      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378e:	4b3e      	ldr	r3, [pc, #248]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ee      	bne.n	8003778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a0:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a1 	beq.w	80038f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b6:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d05c      	beq.n	800387c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d141      	bne.n	800384e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b31      	ldr	r3, [pc, #196]	@ (8003890 <HAL_RCC_OscConfig+0x478>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe ff94 	bl	80026fc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe ff90 	bl	80026fc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e087      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	3b01      	subs	r3, #1
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	491b      	ldr	r1, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003820:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_RCC_OscConfig+0x478>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe ff69 	bl	80026fc <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe ff65 	bl	80026fc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e05c      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x416>
 800384c:	e054      	b.n	80038f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <HAL_RCC_OscConfig+0x478>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe ff52 	bl	80026fc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe ff4e 	bl	80026fc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e045      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_RCC_OscConfig+0x470>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x444>
 800387a:	e03d      	b.n	80038f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e038      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000
 8003890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x4ec>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d028      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d121      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d11a      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d111      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	3b01      	subs	r3, #1
 80038de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0cc      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b68      	ldr	r3, [pc, #416]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90c      	bls.n	8003944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b65      	ldr	r3, [pc, #404]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b63      	ldr	r3, [pc, #396]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b8      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b59      	ldr	r3, [pc, #356]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a58      	ldr	r2, [pc, #352]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003974:	4b53      	ldr	r3, [pc, #332]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a52      	ldr	r2, [pc, #328]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800397e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b50      	ldr	r3, [pc, #320]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494d      	ldr	r1, [pc, #308]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d044      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d119      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e067      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b37      	ldr	r3, [pc, #220]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4934      	ldr	r1, [pc, #208]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fe fe80 	bl	80026fc <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe fe7c 	bl	80026fc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b22      	ldr	r3, [pc, #136]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e032      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4916      	ldr	r1, [pc, #88]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	490e      	ldr	r1, [pc, #56]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	f000 f821 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	490a      	ldr	r1, [pc, #40]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fde0 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08008120 	.word	0x08008120
 8003acc:	20000070 	.word	0x20000070
 8003ad0:	20000074 	.word	0x20000074

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b090      	sub	sp, #64	@ 0x40
 8003ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aec:	4b59      	ldr	r3, [pc, #356]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d00d      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x40>
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	f200 80a1 	bhi.w	8003c40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x34>
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b06:	e09b      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b53      	ldr	r3, [pc, #332]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003b0c:	e09b      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0e:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b12:	e098      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b14:	4b4f      	ldr	r3, [pc, #316]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d028      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4b47      	ldr	r3, [pc, #284]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b40:	fb03 f201 	mul.w	r2, r3, r1
 8003b44:	2300      	movs	r3, #0
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a43      	ldr	r2, [pc, #268]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b54:	460a      	mov	r2, r1
 8003b56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5a:	4413      	add	r3, r2
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b60:	2200      	movs	r2, #0
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	61fa      	str	r2, [r7, #28]
 8003b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b6e:	f7fd f843 	bl	8000bf8 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7a:	e053      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7c:	4b35      	ldr	r3, [pc, #212]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	2200      	movs	r2, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	617a      	str	r2, [r7, #20]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b8e:	f04f 0b00 	mov.w	fp, #0
 8003b92:	4652      	mov	r2, sl
 8003b94:	465b      	mov	r3, fp
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba4:	0150      	lsls	r0, r2, #5
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	ebb2 080a 	subs.w	r8, r2, sl
 8003bae:	eb63 090b 	sbc.w	r9, r3, fp
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bc6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bca:	eb63 0509 	sbc.w	r5, r3, r9
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	00eb      	lsls	r3, r5, #3
 8003bd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bdc:	00e2      	lsls	r2, r4, #3
 8003bde:	4614      	mov	r4, r2
 8003be0:	461d      	mov	r5, r3
 8003be2:	eb14 030a 	adds.w	r3, r4, sl
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	eb45 030b 	adc.w	r3, r5, fp
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	028b      	lsls	r3, r1, #10
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c04:	4621      	mov	r1, r4
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	60fa      	str	r2, [r7, #12]
 8003c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c18:	f7fc ffee 	bl	8000bf8 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3740      	adds	r7, #64	@ 0x40
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	017d7840 	.word	0x017d7840

08003c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b03      	ldr	r3, [pc, #12]	@ (8003c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000070 	.word	0x20000070

08003c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c7c:	f7ff fff0 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08008130 	.word	0x08008130

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca4:	f7ff ffdc 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0b5b      	lsrs	r3, r3, #13
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	@ (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	08008130 	.word	0x08008130

08003cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e041      	b.n	8003d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fe fa98 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fd3c 	bl	8004784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e03c      	b.n	8003dfa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_TIM_Base_Start+0xa0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_TIM_Base_Start+0x5c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9a:	d013      	beq.n	8003dc4 <HAL_TIM_Base_Start+0x5c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <HAL_TIM_Base_Start+0xa4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_TIM_Base_Start+0x5c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <HAL_TIM_Base_Start+0xa8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIM_Base_Start+0x5c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <HAL_TIM_Base_Start+0xac>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIM_Base_Start+0x5c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_TIM_Base_Start+0xb0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d010      	beq.n	8003df8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e044      	b.n	8003ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5e:	d013      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	@ (8003edc <HAL_TIM_Base_Start_IT+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d010      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e007      	b.n	8003ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40014000 	.word	0x40014000

08003ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f839 	bl	8003f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fc30 	bl	8004784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_TIM_PWM_Start+0x24>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e022      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d109      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x3e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e015      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x58>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e008      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e068      	b.n	80040d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0x82>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004014:	e013      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start+0x92>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004024:	e00b      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004034:	e003      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe4e 	bl	8004ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	@ (80040e0 <HAL_TIM_PWM_Start+0x14c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d107      	bne.n	8004066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <HAL_TIM_PWM_Start+0x14c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004078:	d013      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a19      	ldr	r2, [pc, #100]	@ (80040e4 <HAL_TIM_PWM_Start+0x150>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <HAL_TIM_PWM_Start+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <HAL_TIM_PWM_Start+0x158>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <HAL_TIM_PWM_Start+0x15c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d010      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	e007      	b.n	80040d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40014000 	.word	0x40014000

080040f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e097      	b.n	8004238 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fe f839 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004138:	f023 0307 	bic.w	r3, r3, #7
 800413c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f000 fb1b 	bl	8004784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	4313      	orrs	r3, r2
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004194:	f023 030c 	bic.w	r3, r3, #12
 8004198:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	4313      	orrs	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	011a      	lsls	r2, r3, #4
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	4313      	orrs	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	4313      	orrs	r3, r2
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0202 	mvn.w	r2, #2
 8004274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa5b 	bl	8004746 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa4d 	bl	8004732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fa5e 	bl	800475a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0204 	mvn.w	r2, #4
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa35 	bl	8004746 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa27 	bl	8004732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa38 	bl	800475a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0208 	mvn.w	r2, #8
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa0f 	bl	8004746 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa01 	bl	8004732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa12 	bl	800475a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2208      	movs	r2, #8
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9e9 	bl	8004746 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9db 	bl	8004732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9ec 	bl	800475a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fcb6 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fd2a 	bl	8004e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9bd 	bl	800476e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0220 	mvn.w	r2, #32
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fcfc 	bl	8004e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800443a:	2302      	movs	r3, #2
 800443c:	e0ae      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b0c      	cmp	r3, #12
 800444a:	f200 809f 	bhi.w	800458c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004489 	.word	0x08004489
 8004458:	0800458d 	.word	0x0800458d
 800445c:	0800458d 	.word	0x0800458d
 8004460:	0800458d 	.word	0x0800458d
 8004464:	080044c9 	.word	0x080044c9
 8004468:	0800458d 	.word	0x0800458d
 800446c:	0800458d 	.word	0x0800458d
 8004470:	0800458d 	.word	0x0800458d
 8004474:	0800450b 	.word	0x0800450b
 8004478:	0800458d 	.word	0x0800458d
 800447c:	0800458d 	.word	0x0800458d
 8004480:	0800458d 	.word	0x0800458d
 8004484:	0800454b 	.word	0x0800454b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fa04 	bl	800489c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0208 	orr.w	r2, r2, #8
 80044a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0204 	bic.w	r2, r2, #4
 80044b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	619a      	str	r2, [r3, #24]
      break;
 80044c6:	e064      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa4a 	bl	8004968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	619a      	str	r2, [r3, #24]
      break;
 8004508:	e043      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fa95 	bl	8004a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0208 	orr.w	r2, r2, #8
 8004524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0204 	bic.w	r2, r2, #4
 8004534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69d9      	ldr	r1, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	61da      	str	r2, [r3, #28]
      break;
 8004548:	e023      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fadf 	bl	8004b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	021a      	lsls	r2, r3, #8
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	61da      	str	r2, [r3, #28]
      break;
 800458a:	e002      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
      break;
 8004590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_ConfigClockSource+0x1c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0b4      	b.n	800472a <HAL_TIM_ConfigClockSource+0x186>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f8:	d03e      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0xd4>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fe:	f200 8087 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	f000 8086 	beq.w	8004716 <HAL_TIM_ConfigClockSource+0x172>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460e:	d87f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b70      	cmp	r3, #112	@ 0x70
 8004612:	d01a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xa6>
 8004614:	2b70      	cmp	r3, #112	@ 0x70
 8004616:	d87b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b60      	cmp	r3, #96	@ 0x60
 800461a:	d050      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x11a>
 800461c:	2b60      	cmp	r3, #96	@ 0x60
 800461e:	d877      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b50      	cmp	r3, #80	@ 0x50
 8004622:	d03c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xfa>
 8004624:	2b50      	cmp	r3, #80	@ 0x50
 8004626:	d873      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d058      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x13a>
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d86f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b30      	cmp	r3, #48	@ 0x30
 8004632:	d064      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x15a>
 8004634:	2b30      	cmp	r3, #48	@ 0x30
 8004636:	d86b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d060      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x15a>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d867      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d05c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x15a>
 8004644:	2b10      	cmp	r3, #16
 8004646:	d05a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x15a>
 8004648:	e062      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	f000 fb25 	bl	8004ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800466c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	609a      	str	r2, [r3, #8]
      break;
 8004676:	e04f      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	f000 fb0e 	bl	8004ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800469a:	609a      	str	r2, [r3, #8]
      break;
 800469c:	e03c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	461a      	mov	r2, r3
 80046ac:	f000 fa82 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2150      	movs	r1, #80	@ 0x50
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fadb 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e02c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ca:	461a      	mov	r2, r3
 80046cc:	f000 faa1 	bl	8004c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2160      	movs	r1, #96	@ 0x60
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 facb 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e01c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 fa62 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2140      	movs	r1, #64	@ 0x40
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fabb 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e00c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f000 fab2 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 800470e:	e003      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      break;
 8004714:	e000      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3a      	ldr	r2, [pc, #232]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a37      	ldr	r2, [pc, #220]	@ (8004884 <TIM_Base_SetConfig+0x100>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a36      	ldr	r2, [pc, #216]	@ (8004888 <TIM_Base_SetConfig+0x104>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a35      	ldr	r2, [pc, #212]	@ (800488c <TIM_Base_SetConfig+0x108>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01b      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047dc:	d017      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <TIM_Base_SetConfig+0x100>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a27      	ldr	r2, [pc, #156]	@ (8004888 <TIM_Base_SetConfig+0x104>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a26      	ldr	r2, [pc, #152]	@ (800488c <TIM_Base_SetConfig+0x108>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <TIM_Base_SetConfig+0x10c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <TIM_Base_SetConfig+0x110>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a23      	ldr	r2, [pc, #140]	@ (8004898 <TIM_Base_SetConfig+0x114>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0e      	ldr	r2, [pc, #56]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
  }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f023 0201 	bic.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0302 	bic.w	r3, r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <TIM_OC1_SetConfig+0xc8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10c      	bne.n	8004912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0308 	bic.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a13      	ldr	r2, [pc, #76]	@ (8004964 <TIM_OC1_SetConfig+0xc8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d111      	bne.n	800493e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40010000 	.word	0x40010000

08004968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 0210 	bic.w	r2, r3, #16
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <TIM_OC2_SetConfig+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10d      	bne.n	80049e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <TIM_OC2_SetConfig+0xd4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d113      	bne.n	8004a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000

08004a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <TIM_OC3_SetConfig+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10d      	bne.n	8004aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a14      	ldr	r2, [pc, #80]	@ (8004b10 <TIM_OC3_SetConfig+0xd0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d113      	bne.n	8004aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40010000 	.word	0x40010000

08004b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <TIM_OC4_SetConfig+0x9c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d109      	bne.n	8004b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000

08004bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f023 030a 	bic.w	r3, r3, #10
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 0210 	bic.w	r2, r3, #16
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	031b      	lsls	r3, r3, #12
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f043 0307 	orr.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	609a      	str	r2, [r3, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1a      	ldr	r2, [r3, #32]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e050      	b.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d013      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10c      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40014000 	.word	0x40014000

08004e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e042      	b.n	8004ed0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd fa74 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2224      	movs	r2, #36	@ 0x24
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f973 	bl	8005168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	@ 0x28
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d175      	bne.n	8004fe4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_UART_Transmit+0x2c>
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e06e      	b.n	8004fe6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2221      	movs	r2, #33	@ 0x21
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f16:	f7fd fbf1 	bl	80026fc <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f30:	d108      	bne.n	8004f44 <HAL_UART_Transmit+0x6c>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e003      	b.n	8004f4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f4c:	e02e      	b.n	8004fac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2180      	movs	r1, #128	@ 0x80
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f848 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e03a      	b.n	8004fe6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3302      	adds	r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e007      	b.n	8004f9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1cb      	bne.n	8004f4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2140      	movs	r1, #64	@ 0x40
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f814 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	e03b      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d037      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005008:	f7fd fb78 	bl	80026fc <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <UART_WaitOnFlagUntilTimeout+0x30>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e03a      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d023      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d020      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d01d      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b08      	cmp	r3, #8
 8005048:	d116      	bne.n	8005078 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f81d 	bl	80050a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2208      	movs	r2, #8
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e00f      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	429a      	cmp	r2, r3
 8005094:	d0b4      	beq.n	8005000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b095      	sub	sp, #84	@ 0x54
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3314      	adds	r3, #20
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	2b01      	cmp	r3, #1
 8005116:	d119      	bne.n	800514c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60bb      	str	r3, [r7, #8]
   return(result);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 0310 	bic.w	r3, r3, #16
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005138:	61ba      	str	r2, [r7, #24]
 800513a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	613b      	str	r3, [r7, #16]
   return(result);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800515a:	bf00      	nop
 800515c:	3754      	adds	r7, #84	@ 0x54
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b0c0      	sub	sp, #256	@ 0x100
 800516e:	af00      	add	r7, sp, #0
 8005170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	68d9      	ldr	r1, [r3, #12]
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	ea40 0301 	orr.w	r3, r0, r1
 8005190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051c0:	f021 010c 	bic.w	r1, r1, #12
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ce:	430b      	orrs	r3, r1
 80051d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	ea40 0301 	orr.w	r3, r0, r1
 80051ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005434 <UART_SetConfig+0x2cc>)
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d005      	beq.n	8005208 <UART_SetConfig+0xa0>
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b8d      	ldr	r3, [pc, #564]	@ (8005438 <UART_SetConfig+0x2d0>)
 8005204:	429a      	cmp	r2, r3
 8005206:	d104      	bne.n	8005212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fe fd4a 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 800520c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005210:	e003      	b.n	800521a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005212:	f7fe fd31 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 8005216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005224:	f040 810c 	bne.w	8005440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522c:	2200      	movs	r2, #0
 800522e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	1891      	adds	r1, r2, r2
 8005240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005242:	415b      	adcs	r3, r3
 8005244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800524a:	4621      	mov	r1, r4
 800524c:	eb12 0801 	adds.w	r8, r2, r1
 8005250:	4629      	mov	r1, r5
 8005252:	eb43 0901 	adc.w	r9, r3, r1
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526a:	4690      	mov	r8, r2
 800526c:	4699      	mov	r9, r3
 800526e:	4623      	mov	r3, r4
 8005270:	eb18 0303 	adds.w	r3, r8, r3
 8005274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005278:	462b      	mov	r3, r5
 800527a:	eb49 0303 	adc.w	r3, r9, r3
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800528e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005296:	460b      	mov	r3, r1
 8005298:	18db      	adds	r3, r3, r3
 800529a:	653b      	str	r3, [r7, #80]	@ 0x50
 800529c:	4613      	mov	r3, r2
 800529e:	eb42 0303 	adc.w	r3, r2, r3
 80052a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052ac:	f7fb fca4 	bl	8000bf8 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b61      	ldr	r3, [pc, #388]	@ (800543c <UART_SetConfig+0x2d4>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011c      	lsls	r4, r3, #4
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052d8:	415b      	adcs	r3, r3
 80052da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052e0:	4641      	mov	r1, r8
 80052e2:	eb12 0a01 	adds.w	sl, r2, r1
 80052e6:	4649      	mov	r1, r9
 80052e8:	eb43 0b01 	adc.w	fp, r3, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005300:	4692      	mov	sl, r2
 8005302:	469b      	mov	fp, r3
 8005304:	4643      	mov	r3, r8
 8005306:	eb1a 0303 	adds.w	r3, sl, r3
 800530a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800530e:	464b      	mov	r3, r9
 8005310:	eb4b 0303 	adc.w	r3, fp, r3
 8005314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800532c:	460b      	mov	r3, r1
 800532e:	18db      	adds	r3, r3, r3
 8005330:	643b      	str	r3, [r7, #64]	@ 0x40
 8005332:	4613      	mov	r3, r2
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800533e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005342:	f7fb fc59 	bl	8000bf8 <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4611      	mov	r1, r2
 800534c:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <UART_SetConfig+0x2d4>)
 800534e:	fba3 2301 	umull	r2, r3, r3, r1
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2264      	movs	r2, #100	@ 0x64
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	1acb      	subs	r3, r1, r3
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005362:	4b36      	ldr	r3, [pc, #216]	@ (800543c <UART_SetConfig+0x2d4>)
 8005364:	fba3 2302 	umull	r2, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005370:	441c      	add	r4, r3
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800537c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800538c:	415b      	adcs	r3, r3
 800538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005394:	4641      	mov	r1, r8
 8005396:	1851      	adds	r1, r2, r1
 8005398:	6339      	str	r1, [r7, #48]	@ 0x30
 800539a:	4649      	mov	r1, r9
 800539c:	414b      	adcs	r3, r1
 800539e:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053ac:	4659      	mov	r1, fp
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4651      	mov	r1, sl
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4651      	mov	r1, sl
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4642      	mov	r2, r8
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053c8:	464b      	mov	r3, r9
 80053ca:	460a      	mov	r2, r1
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053e8:	460b      	mov	r3, r1
 80053ea:	18db      	adds	r3, r3, r3
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ee:	4613      	mov	r3, r2
 80053f0:	eb42 0303 	adc.w	r3, r2, r3
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053fe:	f7fb fbfb 	bl	8000bf8 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4b0d      	ldr	r3, [pc, #52]	@ (800543c <UART_SetConfig+0x2d4>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2164      	movs	r1, #100	@ 0x64
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3332      	adds	r3, #50	@ 0x32
 800541a:	4a08      	ldr	r2, [pc, #32]	@ (800543c <UART_SetConfig+0x2d4>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 0207 	and.w	r2, r3, #7
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4422      	add	r2, r4
 800542e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005430:	e106      	b.n	8005640 <UART_SetConfig+0x4d8>
 8005432:	bf00      	nop
 8005434:	40011000 	.word	0x40011000
 8005438:	40011400 	.word	0x40011400
 800543c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800544a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800544e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005452:	4642      	mov	r2, r8
 8005454:	464b      	mov	r3, r9
 8005456:	1891      	adds	r1, r2, r2
 8005458:	6239      	str	r1, [r7, #32]
 800545a:	415b      	adcs	r3, r3
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
 800545e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005462:	4641      	mov	r1, r8
 8005464:	1854      	adds	r4, r2, r1
 8005466:	4649      	mov	r1, r9
 8005468:	eb43 0501 	adc.w	r5, r3, r1
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	00eb      	lsls	r3, r5, #3
 8005476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547a:	00e2      	lsls	r2, r4, #3
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	4643      	mov	r3, r8
 8005482:	18e3      	adds	r3, r4, r3
 8005484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005488:	464b      	mov	r3, r9
 800548a:	eb45 0303 	adc.w	r3, r5, r3
 800548e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800549e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054ae:	4629      	mov	r1, r5
 80054b0:	008b      	lsls	r3, r1, #2
 80054b2:	4621      	mov	r1, r4
 80054b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b8:	4621      	mov	r1, r4
 80054ba:	008a      	lsls	r2, r1, #2
 80054bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054c0:	f7fb fb9a 	bl	8000bf8 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4b60      	ldr	r3, [pc, #384]	@ (800564c <UART_SetConfig+0x4e4>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	011c      	lsls	r4, r3, #4
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	61b9      	str	r1, [r7, #24]
 80054ec:	415b      	adcs	r3, r3
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f4:	4641      	mov	r1, r8
 80054f6:	1851      	adds	r1, r2, r1
 80054f8:	6139      	str	r1, [r7, #16]
 80054fa:	4649      	mov	r1, r9
 80054fc:	414b      	adcs	r3, r1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800550c:	4659      	mov	r1, fp
 800550e:	00cb      	lsls	r3, r1, #3
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005516:	4651      	mov	r1, sl
 8005518:	00ca      	lsls	r2, r1, #3
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	4603      	mov	r3, r0
 8005520:	4642      	mov	r2, r8
 8005522:	189b      	adds	r3, r3, r2
 8005524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005528:	464b      	mov	r3, r9
 800552a:	460a      	mov	r2, r1
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800553e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800554c:	4649      	mov	r1, r9
 800554e:	008b      	lsls	r3, r1, #2
 8005550:	4641      	mov	r1, r8
 8005552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005556:	4641      	mov	r1, r8
 8005558:	008a      	lsls	r2, r1, #2
 800555a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800555e:	f7fb fb4b 	bl	8000bf8 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b38      	ldr	r3, [pc, #224]	@ (800564c <UART_SetConfig+0x4e4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	@ 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	@ 0x32
 800557c:	4a33      	ldr	r2, [pc, #204]	@ (800564c <UART_SetConfig+0x4e4>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005588:	441c      	add	r4, r3
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	673b      	str	r3, [r7, #112]	@ 0x70
 8005592:	677a      	str	r2, [r7, #116]	@ 0x74
 8005594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055da:	464b      	mov	r3, r9
 80055dc:	460a      	mov	r2, r1
 80055de:	eb42 0303 	adc.w	r3, r2, r3
 80055e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055fc:	4649      	mov	r1, r9
 80055fe:	008b      	lsls	r3, r1, #2
 8005600:	4641      	mov	r1, r8
 8005602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005606:	4641      	mov	r1, r8
 8005608:	008a      	lsls	r2, r1, #2
 800560a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800560e:	f7fb faf3 	bl	8000bf8 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <UART_SetConfig+0x4e4>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	@ 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	3332      	adds	r3, #50	@ 0x32
 800562a:	4a08      	ldr	r2, [pc, #32]	@ (800564c <UART_SetConfig+0x4e4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 020f 	and.w	r2, r3, #15
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4422      	add	r2, r4
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005646:	46bd      	mov	sp, r7
 8005648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564c:	51eb851f 	.word	0x51eb851f

08005650 <calloc>:
 8005650:	4b02      	ldr	r3, [pc, #8]	@ (800565c <calloc+0xc>)
 8005652:	460a      	mov	r2, r1
 8005654:	4601      	mov	r1, r0
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	f000 b802 	b.w	8005660 <_calloc_r>
 800565c:	20000088 	.word	0x20000088

08005660 <_calloc_r>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	fba1 5402 	umull	r5, r4, r1, r2
 8005666:	b93c      	cbnz	r4, 8005678 <_calloc_r+0x18>
 8005668:	4629      	mov	r1, r5
 800566a:	f000 f837 	bl	80056dc <_malloc_r>
 800566e:	4606      	mov	r6, r0
 8005670:	b928      	cbnz	r0, 800567e <_calloc_r+0x1e>
 8005672:	2600      	movs	r6, #0
 8005674:	4630      	mov	r0, r6
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	220c      	movs	r2, #12
 800567a:	6002      	str	r2, [r0, #0]
 800567c:	e7f9      	b.n	8005672 <_calloc_r+0x12>
 800567e:	462a      	mov	r2, r5
 8005680:	4621      	mov	r1, r4
 8005682:	f000 fe40 	bl	8006306 <memset>
 8005686:	e7f5      	b.n	8005674 <_calloc_r+0x14>

08005688 <malloc>:
 8005688:	4b02      	ldr	r3, [pc, #8]	@ (8005694 <malloc+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f000 b825 	b.w	80056dc <_malloc_r>
 8005692:	bf00      	nop
 8005694:	20000088 	.word	0x20000088

08005698 <sbrk_aligned>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4e0f      	ldr	r6, [pc, #60]	@ (80056d8 <sbrk_aligned+0x40>)
 800569c:	460c      	mov	r4, r1
 800569e:	6831      	ldr	r1, [r6, #0]
 80056a0:	4605      	mov	r5, r0
 80056a2:	b911      	cbnz	r1, 80056aa <sbrk_aligned+0x12>
 80056a4:	f000 fe70 	bl	8006388 <_sbrk_r>
 80056a8:	6030      	str	r0, [r6, #0]
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fe6b 	bl	8006388 <_sbrk_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	d103      	bne.n	80056be <sbrk_aligned+0x26>
 80056b6:	f04f 34ff 	mov.w	r4, #4294967295
 80056ba:	4620      	mov	r0, r4
 80056bc:	bd70      	pop	{r4, r5, r6, pc}
 80056be:	1cc4      	adds	r4, r0, #3
 80056c0:	f024 0403 	bic.w	r4, r4, #3
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d0f8      	beq.n	80056ba <sbrk_aligned+0x22>
 80056c8:	1a21      	subs	r1, r4, r0
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 fe5c 	bl	8006388 <_sbrk_r>
 80056d0:	3001      	adds	r0, #1
 80056d2:	d1f2      	bne.n	80056ba <sbrk_aligned+0x22>
 80056d4:	e7ef      	b.n	80056b6 <sbrk_aligned+0x1e>
 80056d6:	bf00      	nop
 80056d8:	200004a0 	.word	0x200004a0

080056dc <_malloc_r>:
 80056dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e0:	1ccd      	adds	r5, r1, #3
 80056e2:	f025 0503 	bic.w	r5, r5, #3
 80056e6:	3508      	adds	r5, #8
 80056e8:	2d0c      	cmp	r5, #12
 80056ea:	bf38      	it	cc
 80056ec:	250c      	movcc	r5, #12
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	4606      	mov	r6, r0
 80056f2:	db01      	blt.n	80056f8 <_malloc_r+0x1c>
 80056f4:	42a9      	cmp	r1, r5
 80056f6:	d904      	bls.n	8005702 <_malloc_r+0x26>
 80056f8:	230c      	movs	r3, #12
 80056fa:	6033      	str	r3, [r6, #0]
 80056fc:	2000      	movs	r0, #0
 80056fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057d8 <_malloc_r+0xfc>
 8005706:	f000 f869 	bl	80057dc <__malloc_lock>
 800570a:	f8d8 3000 	ldr.w	r3, [r8]
 800570e:	461c      	mov	r4, r3
 8005710:	bb44      	cbnz	r4, 8005764 <_malloc_r+0x88>
 8005712:	4629      	mov	r1, r5
 8005714:	4630      	mov	r0, r6
 8005716:	f7ff ffbf 	bl	8005698 <sbrk_aligned>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	4604      	mov	r4, r0
 800571e:	d158      	bne.n	80057d2 <_malloc_r+0xf6>
 8005720:	f8d8 4000 	ldr.w	r4, [r8]
 8005724:	4627      	mov	r7, r4
 8005726:	2f00      	cmp	r7, #0
 8005728:	d143      	bne.n	80057b2 <_malloc_r+0xd6>
 800572a:	2c00      	cmp	r4, #0
 800572c:	d04b      	beq.n	80057c6 <_malloc_r+0xea>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	4639      	mov	r1, r7
 8005732:	4630      	mov	r0, r6
 8005734:	eb04 0903 	add.w	r9, r4, r3
 8005738:	f000 fe26 	bl	8006388 <_sbrk_r>
 800573c:	4581      	cmp	r9, r0
 800573e:	d142      	bne.n	80057c6 <_malloc_r+0xea>
 8005740:	6821      	ldr	r1, [r4, #0]
 8005742:	1a6d      	subs	r5, r5, r1
 8005744:	4629      	mov	r1, r5
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff ffa6 	bl	8005698 <sbrk_aligned>
 800574c:	3001      	adds	r0, #1
 800574e:	d03a      	beq.n	80057c6 <_malloc_r+0xea>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	442b      	add	r3, r5
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	f8d8 3000 	ldr.w	r3, [r8]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	bb62      	cbnz	r2, 80057b8 <_malloc_r+0xdc>
 800575e:	f8c8 7000 	str.w	r7, [r8]
 8005762:	e00f      	b.n	8005784 <_malloc_r+0xa8>
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	1b52      	subs	r2, r2, r5
 8005768:	d420      	bmi.n	80057ac <_malloc_r+0xd0>
 800576a:	2a0b      	cmp	r2, #11
 800576c:	d917      	bls.n	800579e <_malloc_r+0xc2>
 800576e:	1961      	adds	r1, r4, r5
 8005770:	42a3      	cmp	r3, r4
 8005772:	6025      	str	r5, [r4, #0]
 8005774:	bf18      	it	ne
 8005776:	6059      	strne	r1, [r3, #4]
 8005778:	6863      	ldr	r3, [r4, #4]
 800577a:	bf08      	it	eq
 800577c:	f8c8 1000 	streq.w	r1, [r8]
 8005780:	5162      	str	r2, [r4, r5]
 8005782:	604b      	str	r3, [r1, #4]
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f82f 	bl	80057e8 <__malloc_unlock>
 800578a:	f104 000b 	add.w	r0, r4, #11
 800578e:	1d23      	adds	r3, r4, #4
 8005790:	f020 0007 	bic.w	r0, r0, #7
 8005794:	1ac2      	subs	r2, r0, r3
 8005796:	bf1c      	itt	ne
 8005798:	1a1b      	subne	r3, r3, r0
 800579a:	50a3      	strne	r3, [r4, r2]
 800579c:	e7af      	b.n	80056fe <_malloc_r+0x22>
 800579e:	6862      	ldr	r2, [r4, #4]
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	bf0c      	ite	eq
 80057a4:	f8c8 2000 	streq.w	r2, [r8]
 80057a8:	605a      	strne	r2, [r3, #4]
 80057aa:	e7eb      	b.n	8005784 <_malloc_r+0xa8>
 80057ac:	4623      	mov	r3, r4
 80057ae:	6864      	ldr	r4, [r4, #4]
 80057b0:	e7ae      	b.n	8005710 <_malloc_r+0x34>
 80057b2:	463c      	mov	r4, r7
 80057b4:	687f      	ldr	r7, [r7, #4]
 80057b6:	e7b6      	b.n	8005726 <_malloc_r+0x4a>
 80057b8:	461a      	mov	r2, r3
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	42a3      	cmp	r3, r4
 80057be:	d1fb      	bne.n	80057b8 <_malloc_r+0xdc>
 80057c0:	2300      	movs	r3, #0
 80057c2:	6053      	str	r3, [r2, #4]
 80057c4:	e7de      	b.n	8005784 <_malloc_r+0xa8>
 80057c6:	230c      	movs	r3, #12
 80057c8:	6033      	str	r3, [r6, #0]
 80057ca:	4630      	mov	r0, r6
 80057cc:	f000 f80c 	bl	80057e8 <__malloc_unlock>
 80057d0:	e794      	b.n	80056fc <_malloc_r+0x20>
 80057d2:	6005      	str	r5, [r0, #0]
 80057d4:	e7d6      	b.n	8005784 <_malloc_r+0xa8>
 80057d6:	bf00      	nop
 80057d8:	200004a4 	.word	0x200004a4

080057dc <__malloc_lock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	@ (80057e4 <__malloc_lock+0x8>)
 80057de:	f000 be20 	b.w	8006422 <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	200005e8 	.word	0x200005e8

080057e8 <__malloc_unlock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	@ (80057f0 <__malloc_unlock+0x8>)
 80057ea:	f000 be1b 	b.w	8006424 <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	200005e8 	.word	0x200005e8

080057f4 <__cvt>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	ec57 6b10 	vmov	r6, r7, d0
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	460c      	mov	r4, r1
 8005800:	4619      	mov	r1, r3
 8005802:	463b      	mov	r3, r7
 8005804:	bfbb      	ittet	lt
 8005806:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800580a:	461f      	movlt	r7, r3
 800580c:	2300      	movge	r3, #0
 800580e:	232d      	movlt	r3, #45	@ 0x2d
 8005810:	700b      	strb	r3, [r1, #0]
 8005812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005814:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005818:	4691      	mov	r9, r2
 800581a:	f023 0820 	bic.w	r8, r3, #32
 800581e:	bfbc      	itt	lt
 8005820:	4632      	movlt	r2, r6
 8005822:	4616      	movlt	r6, r2
 8005824:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005828:	d005      	beq.n	8005836 <__cvt+0x42>
 800582a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800582e:	d100      	bne.n	8005832 <__cvt+0x3e>
 8005830:	3401      	adds	r4, #1
 8005832:	2102      	movs	r1, #2
 8005834:	e000      	b.n	8005838 <__cvt+0x44>
 8005836:	2103      	movs	r1, #3
 8005838:	ab03      	add	r3, sp, #12
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	ab02      	add	r3, sp, #8
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	ec47 6b10 	vmov	d0, r6, r7
 8005844:	4653      	mov	r3, sl
 8005846:	4622      	mov	r2, r4
 8005848:	f000 fe76 	bl	8006538 <_dtoa_r>
 800584c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005850:	4605      	mov	r5, r0
 8005852:	d119      	bne.n	8005888 <__cvt+0x94>
 8005854:	f019 0f01 	tst.w	r9, #1
 8005858:	d00e      	beq.n	8005878 <__cvt+0x84>
 800585a:	eb00 0904 	add.w	r9, r0, r4
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fb f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800586a:	b108      	cbz	r0, 8005870 <__cvt+0x7c>
 800586c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005870:	2230      	movs	r2, #48	@ 0x30
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	454b      	cmp	r3, r9
 8005876:	d31e      	bcc.n	80058b6 <__cvt+0xc2>
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800587c:	1b5b      	subs	r3, r3, r5
 800587e:	4628      	mov	r0, r5
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	b004      	add	sp, #16
 8005884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800588c:	eb00 0904 	add.w	r9, r0, r4
 8005890:	d1e5      	bne.n	800585e <__cvt+0x6a>
 8005892:	7803      	ldrb	r3, [r0, #0]
 8005894:	2b30      	cmp	r3, #48	@ 0x30
 8005896:	d10a      	bne.n	80058ae <__cvt+0xba>
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fb f91a 	bl	8000ad8 <__aeabi_dcmpeq>
 80058a4:	b918      	cbnz	r0, 80058ae <__cvt+0xba>
 80058a6:	f1c4 0401 	rsb	r4, r4, #1
 80058aa:	f8ca 4000 	str.w	r4, [sl]
 80058ae:	f8da 3000 	ldr.w	r3, [sl]
 80058b2:	4499      	add	r9, r3
 80058b4:	e7d3      	b.n	800585e <__cvt+0x6a>
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	9103      	str	r1, [sp, #12]
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e7d9      	b.n	8005872 <__cvt+0x7e>

080058be <__exponent>:
 80058be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c0:	2900      	cmp	r1, #0
 80058c2:	bfba      	itte	lt
 80058c4:	4249      	neglt	r1, r1
 80058c6:	232d      	movlt	r3, #45	@ 0x2d
 80058c8:	232b      	movge	r3, #43	@ 0x2b
 80058ca:	2909      	cmp	r1, #9
 80058cc:	7002      	strb	r2, [r0, #0]
 80058ce:	7043      	strb	r3, [r0, #1]
 80058d0:	dd29      	ble.n	8005926 <__exponent+0x68>
 80058d2:	f10d 0307 	add.w	r3, sp, #7
 80058d6:	461d      	mov	r5, r3
 80058d8:	270a      	movs	r7, #10
 80058da:	461a      	mov	r2, r3
 80058dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80058e0:	fb07 1416 	mls	r4, r7, r6, r1
 80058e4:	3430      	adds	r4, #48	@ 0x30
 80058e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058ea:	460c      	mov	r4, r1
 80058ec:	2c63      	cmp	r4, #99	@ 0x63
 80058ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80058f2:	4631      	mov	r1, r6
 80058f4:	dcf1      	bgt.n	80058da <__exponent+0x1c>
 80058f6:	3130      	adds	r1, #48	@ 0x30
 80058f8:	1e94      	subs	r4, r2, #2
 80058fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058fe:	1c41      	adds	r1, r0, #1
 8005900:	4623      	mov	r3, r4
 8005902:	42ab      	cmp	r3, r5
 8005904:	d30a      	bcc.n	800591c <__exponent+0x5e>
 8005906:	f10d 0309 	add.w	r3, sp, #9
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	42ac      	cmp	r4, r5
 800590e:	bf88      	it	hi
 8005910:	2300      	movhi	r3, #0
 8005912:	3302      	adds	r3, #2
 8005914:	4403      	add	r3, r0
 8005916:	1a18      	subs	r0, r3, r0
 8005918:	b003      	add	sp, #12
 800591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005920:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005924:	e7ed      	b.n	8005902 <__exponent+0x44>
 8005926:	2330      	movs	r3, #48	@ 0x30
 8005928:	3130      	adds	r1, #48	@ 0x30
 800592a:	7083      	strb	r3, [r0, #2]
 800592c:	70c1      	strb	r1, [r0, #3]
 800592e:	1d03      	adds	r3, r0, #4
 8005930:	e7f1      	b.n	8005916 <__exponent+0x58>
	...

08005934 <_printf_float>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	b08d      	sub	sp, #52	@ 0x34
 800593a:	460c      	mov	r4, r1
 800593c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005940:	4616      	mov	r6, r2
 8005942:	461f      	mov	r7, r3
 8005944:	4605      	mov	r5, r0
 8005946:	f000 fce7 	bl	8006318 <_localeconv_r>
 800594a:	6803      	ldr	r3, [r0, #0]
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fc96 	bl	8000280 <strlen>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	@ 0x28
 8005958:	f8d8 3000 	ldr.w	r3, [r8]
 800595c:	9005      	str	r0, [sp, #20]
 800595e:	3307      	adds	r3, #7
 8005960:	f023 0307 	bic.w	r3, r3, #7
 8005964:	f103 0208 	add.w	r2, r3, #8
 8005968:	f894 a018 	ldrb.w	sl, [r4, #24]
 800596c:	f8d4 b000 	ldr.w	fp, [r4]
 8005970:	f8c8 2000 	str.w	r2, [r8]
 8005974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005978:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005982:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bfc <_printf_float+0x2c8>)
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	f7fb f8d4 	bl	8000b3c <__aeabi_dcmpun>
 8005994:	bb70      	cbnz	r0, 80059f4 <_printf_float+0xc0>
 8005996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800599a:	4b98      	ldr	r3, [pc, #608]	@ (8005bfc <_printf_float+0x2c8>)
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	f7fb f8ae 	bl	8000b00 <__aeabi_dcmple>
 80059a4:	bb30      	cbnz	r0, 80059f4 <_printf_float+0xc0>
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	f7fb f89d 	bl	8000aec <__aeabi_dcmplt>
 80059b2:	b110      	cbz	r0, 80059ba <_printf_float+0x86>
 80059b4:	232d      	movs	r3, #45	@ 0x2d
 80059b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ba:	4a91      	ldr	r2, [pc, #580]	@ (8005c00 <_printf_float+0x2cc>)
 80059bc:	4b91      	ldr	r3, [pc, #580]	@ (8005c04 <_printf_float+0x2d0>)
 80059be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059c2:	bf94      	ite	ls
 80059c4:	4690      	movls	r8, r2
 80059c6:	4698      	movhi	r8, r3
 80059c8:	2303      	movs	r3, #3
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	f02b 0304 	bic.w	r3, fp, #4
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	9700      	str	r7, [sp, #0]
 80059d8:	4633      	mov	r3, r6
 80059da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059dc:	4621      	mov	r1, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f9d2 	bl	8005d88 <_printf_common>
 80059e4:	3001      	adds	r0, #1
 80059e6:	f040 808d 	bne.w	8005b04 <_printf_float+0x1d0>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	b00d      	add	sp, #52	@ 0x34
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fb f89e 	bl	8000b3c <__aeabi_dcmpun>
 8005a00:	b140      	cbz	r0, 8005a14 <_printf_float+0xe0>
 8005a02:	464b      	mov	r3, r9
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbc      	itt	lt
 8005a08:	232d      	movlt	r3, #45	@ 0x2d
 8005a0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c08 <_printf_float+0x2d4>)
 8005a10:	4b7e      	ldr	r3, [pc, #504]	@ (8005c0c <_printf_float+0x2d8>)
 8005a12:	e7d4      	b.n	80059be <_printf_float+0x8a>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a1a:	9206      	str	r2, [sp, #24]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	d13b      	bne.n	8005a98 <_printf_float+0x164>
 8005a20:	2306      	movs	r3, #6
 8005a22:	6063      	str	r3, [r4, #4]
 8005a24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6022      	str	r2, [r4, #0]
 8005a2c:	9303      	str	r3, [sp, #12]
 8005a2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a34:	ab09      	add	r3, sp, #36	@ 0x24
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	ec49 8b10 	vmov	d0, r8, r9
 8005a3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7ff fed6 	bl	80057f4 <__cvt>
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a4c:	2b47      	cmp	r3, #71	@ 0x47
 8005a4e:	4680      	mov	r8, r0
 8005a50:	d129      	bne.n	8005aa6 <_printf_float+0x172>
 8005a52:	1cc8      	adds	r0, r1, #3
 8005a54:	db02      	blt.n	8005a5c <_printf_float+0x128>
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	dd41      	ble.n	8005ae0 <_printf_float+0x1ac>
 8005a5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a60:	fa5f fa8a 	uxtb.w	sl, sl
 8005a64:	3901      	subs	r1, #1
 8005a66:	4652      	mov	r2, sl
 8005a68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a6e:	f7ff ff26 	bl	80058be <__exponent>
 8005a72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a74:	1813      	adds	r3, r2, r0
 8005a76:	2a01      	cmp	r2, #1
 8005a78:	4681      	mov	r9, r0
 8005a7a:	6123      	str	r3, [r4, #16]
 8005a7c:	dc02      	bgt.n	8005a84 <_printf_float+0x150>
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	07d2      	lsls	r2, r2, #31
 8005a82:	d501      	bpl.n	8005a88 <_printf_float+0x154>
 8005a84:	3301      	adds	r3, #1
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0a2      	beq.n	80059d6 <_printf_float+0xa2>
 8005a90:	232d      	movs	r3, #45	@ 0x2d
 8005a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a96:	e79e      	b.n	80059d6 <_printf_float+0xa2>
 8005a98:	9a06      	ldr	r2, [sp, #24]
 8005a9a:	2a47      	cmp	r2, #71	@ 0x47
 8005a9c:	d1c2      	bne.n	8005a24 <_printf_float+0xf0>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1c0      	bne.n	8005a24 <_printf_float+0xf0>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7bd      	b.n	8005a22 <_printf_float+0xee>
 8005aa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aaa:	d9db      	bls.n	8005a64 <_printf_float+0x130>
 8005aac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ab0:	d118      	bne.n	8005ae4 <_printf_float+0x1b0>
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	dd0b      	ble.n	8005ad0 <_printf_float+0x19c>
 8005ab8:	6121      	str	r1, [r4, #16]
 8005aba:	b913      	cbnz	r3, 8005ac2 <_printf_float+0x18e>
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	07d0      	lsls	r0, r2, #31
 8005ac0:	d502      	bpl.n	8005ac8 <_printf_float+0x194>
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	440b      	add	r3, r1
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aca:	f04f 0900 	mov.w	r9, #0
 8005ace:	e7db      	b.n	8005a88 <_printf_float+0x154>
 8005ad0:	b913      	cbnz	r3, 8005ad8 <_printf_float+0x1a4>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	07d2      	lsls	r2, r2, #31
 8005ad6:	d501      	bpl.n	8005adc <_printf_float+0x1a8>
 8005ad8:	3302      	adds	r3, #2
 8005ada:	e7f4      	b.n	8005ac6 <_printf_float+0x192>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e7f2      	b.n	8005ac6 <_printf_float+0x192>
 8005ae0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	db05      	blt.n	8005af6 <_printf_float+0x1c2>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	6121      	str	r1, [r4, #16]
 8005aee:	07d8      	lsls	r0, r3, #31
 8005af0:	d5ea      	bpl.n	8005ac8 <_printf_float+0x194>
 8005af2:	1c4b      	adds	r3, r1, #1
 8005af4:	e7e7      	b.n	8005ac6 <_printf_float+0x192>
 8005af6:	2900      	cmp	r1, #0
 8005af8:	bfd4      	ite	le
 8005afa:	f1c1 0202 	rsble	r2, r1, #2
 8005afe:	2201      	movgt	r2, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	e7e0      	b.n	8005ac6 <_printf_float+0x192>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	055a      	lsls	r2, r3, #21
 8005b08:	d407      	bmi.n	8005b1a <_printf_float+0x1e6>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	d12b      	bne.n	8005b70 <_printf_float+0x23c>
 8005b18:	e767      	b.n	80059ea <_printf_float+0xb6>
 8005b1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b1e:	f240 80dd 	bls.w	8005cdc <_printf_float+0x3a8>
 8005b22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b26:	2200      	movs	r2, #0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f7fa ffd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d033      	beq.n	8005b9a <_printf_float+0x266>
 8005b32:	4a37      	ldr	r2, [pc, #220]	@ (8005c10 <_printf_float+0x2dc>)
 8005b34:	2301      	movs	r3, #1
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f af54 	beq.w	80059ea <_printf_float+0xb6>
 8005b42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b46:	4543      	cmp	r3, r8
 8005b48:	db02      	blt.n	8005b50 <_printf_float+0x21c>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	07d8      	lsls	r0, r3, #31
 8005b4e:	d50f      	bpl.n	8005b70 <_printf_float+0x23c>
 8005b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af45 	beq.w	80059ea <_printf_float+0xb6>
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b68:	f104 0a1a 	add.w	sl, r4, #26
 8005b6c:	45c8      	cmp	r8, r9
 8005b6e:	dc09      	bgt.n	8005b84 <_printf_float+0x250>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	f100 8103 	bmi.w	8005d7e <_printf_float+0x44a>
 8005b78:	68e0      	ldr	r0, [r4, #12]
 8005b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b7c:	4298      	cmp	r0, r3
 8005b7e:	bfb8      	it	lt
 8005b80:	4618      	movlt	r0, r3
 8005b82:	e734      	b.n	80059ee <_printf_float+0xba>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4652      	mov	r2, sl
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af2b 	beq.w	80059ea <_printf_float+0xb6>
 8005b94:	f109 0901 	add.w	r9, r9, #1
 8005b98:	e7e8      	b.n	8005b6c <_printf_float+0x238>
 8005b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dc39      	bgt.n	8005c14 <_printf_float+0x2e0>
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <_printf_float+0x2dc>)
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af1d 	beq.w	80059ea <_printf_float+0xb6>
 8005bb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bb4:	ea59 0303 	orrs.w	r3, r9, r3
 8005bb8:	d102      	bne.n	8005bc0 <_printf_float+0x28c>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	d5d7      	bpl.n	8005b70 <_printf_float+0x23c>
 8005bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af0d 	beq.w	80059ea <_printf_float+0xb6>
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	f104 0b1a 	add.w	fp, r4, #26
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	425b      	negs	r3, r3
 8005bdc:	4553      	cmp	r3, sl
 8005bde:	dc01      	bgt.n	8005be4 <_printf_float+0x2b0>
 8005be0:	464b      	mov	r3, r9
 8005be2:	e793      	b.n	8005b0c <_printf_float+0x1d8>
 8005be4:	2301      	movs	r3, #1
 8005be6:	465a      	mov	r2, fp
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f aefb 	beq.w	80059ea <_printf_float+0xb6>
 8005bf4:	f10a 0a01 	add.w	sl, sl, #1
 8005bf8:	e7ee      	b.n	8005bd8 <_printf_float+0x2a4>
 8005bfa:	bf00      	nop
 8005bfc:	7fefffff 	.word	0x7fefffff
 8005c00:	08008138 	.word	0x08008138
 8005c04:	0800813c 	.word	0x0800813c
 8005c08:	08008140 	.word	0x08008140
 8005c0c:	08008144 	.word	0x08008144
 8005c10:	08008148 	.word	0x08008148
 8005c14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c1a:	4553      	cmp	r3, sl
 8005c1c:	bfa8      	it	ge
 8005c1e:	4653      	movge	r3, sl
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	4699      	mov	r9, r3
 8005c24:	dc36      	bgt.n	8005c94 <_printf_float+0x360>
 8005c26:	f04f 0b00 	mov.w	fp, #0
 8005c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c2e:	f104 021a 	add.w	r2, r4, #26
 8005c32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c34:	9306      	str	r3, [sp, #24]
 8005c36:	eba3 0309 	sub.w	r3, r3, r9
 8005c3a:	455b      	cmp	r3, fp
 8005c3c:	dc31      	bgt.n	8005ca2 <_printf_float+0x36e>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c40:	459a      	cmp	sl, r3
 8005c42:	dc3a      	bgt.n	8005cba <_printf_float+0x386>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	07da      	lsls	r2, r3, #31
 8005c48:	d437      	bmi.n	8005cba <_printf_float+0x386>
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c50:	9b06      	ldr	r3, [sp, #24]
 8005c52:	ebaa 0303 	sub.w	r3, sl, r3
 8005c56:	4599      	cmp	r9, r3
 8005c58:	bfa8      	it	ge
 8005c5a:	4699      	movge	r9, r3
 8005c5c:	f1b9 0f00 	cmp.w	r9, #0
 8005c60:	dc33      	bgt.n	8005cca <_printf_float+0x396>
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c6a:	f104 0b1a 	add.w	fp, r4, #26
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	ebaa 0303 	sub.w	r3, sl, r3
 8005c74:	eba3 0309 	sub.w	r3, r3, r9
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	f77f af79 	ble.w	8005b70 <_printf_float+0x23c>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	465a      	mov	r2, fp
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f aeae 	beq.w	80059ea <_printf_float+0xb6>
 8005c8e:	f108 0801 	add.w	r8, r8, #1
 8005c92:	e7ec      	b.n	8005c6e <_printf_float+0x33a>
 8005c94:	4642      	mov	r2, r8
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d1c2      	bne.n	8005c26 <_printf_float+0x2f2>
 8005ca0:	e6a3      	b.n	80059ea <_printf_float+0xb6>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	9206      	str	r2, [sp, #24]
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae9c 	beq.w	80059ea <_printf_float+0xb6>
 8005cb2:	9a06      	ldr	r2, [sp, #24]
 8005cb4:	f10b 0b01 	add.w	fp, fp, #1
 8005cb8:	e7bb      	b.n	8005c32 <_printf_float+0x2fe>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1c0      	bne.n	8005c4a <_printf_float+0x316>
 8005cc8:	e68f      	b.n	80059ea <_printf_float+0xb6>
 8005cca:	9a06      	ldr	r2, [sp, #24]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	4442      	add	r2, r8
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d1c3      	bne.n	8005c62 <_printf_float+0x32e>
 8005cda:	e686      	b.n	80059ea <_printf_float+0xb6>
 8005cdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ce0:	f1ba 0f01 	cmp.w	sl, #1
 8005ce4:	dc01      	bgt.n	8005cea <_printf_float+0x3b6>
 8005ce6:	07db      	lsls	r3, r3, #31
 8005ce8:	d536      	bpl.n	8005d58 <_printf_float+0x424>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4642      	mov	r2, r8
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae78 	beq.w	80059ea <_printf_float+0xb6>
 8005cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f ae70 	beq.w	80059ea <_printf_float+0xb6>
 8005d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d16:	f7fa fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d1a:	b9c0      	cbnz	r0, 8005d4e <_printf_float+0x41a>
 8005d1c:	4653      	mov	r3, sl
 8005d1e:	f108 0201 	add.w	r2, r8, #1
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d10c      	bne.n	8005d46 <_printf_float+0x412>
 8005d2c:	e65d      	b.n	80059ea <_printf_float+0xb6>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	465a      	mov	r2, fp
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f43f ae56 	beq.w	80059ea <_printf_float+0xb6>
 8005d3e:	f108 0801 	add.w	r8, r8, #1
 8005d42:	45d0      	cmp	r8, sl
 8005d44:	dbf3      	blt.n	8005d2e <_printf_float+0x3fa>
 8005d46:	464b      	mov	r3, r9
 8005d48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d4c:	e6df      	b.n	8005b0e <_printf_float+0x1da>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	f104 0b1a 	add.w	fp, r4, #26
 8005d56:	e7f4      	b.n	8005d42 <_printf_float+0x40e>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	e7e1      	b.n	8005d22 <_printf_float+0x3ee>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	464a      	mov	r2, r9
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f43f ae3e 	beq.w	80059ea <_printf_float+0xb6>
 8005d6e:	f108 0801 	add.w	r8, r8, #1
 8005d72:	68e3      	ldr	r3, [r4, #12]
 8005d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d76:	1a5b      	subs	r3, r3, r1
 8005d78:	4543      	cmp	r3, r8
 8005d7a:	dcf0      	bgt.n	8005d5e <_printf_float+0x42a>
 8005d7c:	e6fc      	b.n	8005b78 <_printf_float+0x244>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f104 0919 	add.w	r9, r4, #25
 8005d86:	e7f4      	b.n	8005d72 <_printf_float+0x43e>

08005d88 <_printf_common>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	4698      	mov	r8, r3
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfb8      	it	lt
 8005d9c:	4613      	movlt	r3, r2
 8005d9e:	6033      	str	r3, [r6, #0]
 8005da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005da4:	4607      	mov	r7, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	b10a      	cbz	r2, 8005dae <_printf_common+0x26>
 8005daa:	3301      	adds	r3, #1
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0699      	lsls	r1, r3, #26
 8005db2:	bf42      	ittt	mi
 8005db4:	6833      	ldrmi	r3, [r6, #0]
 8005db6:	3302      	addmi	r3, #2
 8005db8:	6033      	strmi	r3, [r6, #0]
 8005dba:	6825      	ldr	r5, [r4, #0]
 8005dbc:	f015 0506 	ands.w	r5, r5, #6
 8005dc0:	d106      	bne.n	8005dd0 <_printf_common+0x48>
 8005dc2:	f104 0a19 	add.w	sl, r4, #25
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	6832      	ldr	r2, [r6, #0]
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dc26      	bgt.n	8005e1e <_printf_common+0x96>
 8005dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	3b00      	subs	r3, #0
 8005dd8:	bf18      	it	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	0692      	lsls	r2, r2, #26
 8005dde:	d42b      	bmi.n	8005e38 <_printf_common+0xb0>
 8005de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005de4:	4641      	mov	r1, r8
 8005de6:	4638      	mov	r0, r7
 8005de8:	47c8      	blx	r9
 8005dea:	3001      	adds	r0, #1
 8005dec:	d01e      	beq.n	8005e2c <_printf_common+0xa4>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	f003 0306 	and.w	r3, r3, #6
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf02      	ittt	eq
 8005dfa:	68e5      	ldreq	r5, [r4, #12]
 8005dfc:	6833      	ldreq	r3, [r6, #0]
 8005dfe:	1aed      	subeq	r5, r5, r3
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	bf0c      	ite	eq
 8005e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e08:	2500      	movne	r5, #0
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	bfc4      	itt	gt
 8005e0e:	1a9b      	subgt	r3, r3, r2
 8005e10:	18ed      	addgt	r5, r5, r3
 8005e12:	2600      	movs	r6, #0
 8005e14:	341a      	adds	r4, #26
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	d11a      	bne.n	8005e50 <_printf_common+0xc8>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e008      	b.n	8005e30 <_printf_common+0xa8>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4652      	mov	r2, sl
 8005e22:	4641      	mov	r1, r8
 8005e24:	4638      	mov	r0, r7
 8005e26:	47c8      	blx	r9
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d103      	bne.n	8005e34 <_printf_common+0xac>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	3501      	adds	r5, #1
 8005e36:	e7c6      	b.n	8005dc6 <_printf_common+0x3e>
 8005e38:	18e1      	adds	r1, r4, r3
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	2030      	movs	r0, #48	@ 0x30
 8005e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e42:	4422      	add	r2, r4
 8005e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	e7c7      	b.n	8005de0 <_printf_common+0x58>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4641      	mov	r1, r8
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c8      	blx	r9
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0e6      	beq.n	8005e2c <_printf_common+0xa4>
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7d9      	b.n	8005e16 <_printf_common+0x8e>
	...

08005e64 <_printf_i>:
 8005e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	7e0f      	ldrb	r7, [r1, #24]
 8005e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e6c:	2f78      	cmp	r7, #120	@ 0x78
 8005e6e:	4691      	mov	r9, r2
 8005e70:	4680      	mov	r8, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	469a      	mov	sl, r3
 8005e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e7a:	d807      	bhi.n	8005e8c <_printf_i+0x28>
 8005e7c:	2f62      	cmp	r7, #98	@ 0x62
 8005e7e:	d80a      	bhi.n	8005e96 <_printf_i+0x32>
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	f000 80d2 	beq.w	800602a <_printf_i+0x1c6>
 8005e86:	2f58      	cmp	r7, #88	@ 0x58
 8005e88:	f000 80b9 	beq.w	8005ffe <_printf_i+0x19a>
 8005e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e94:	e03a      	b.n	8005f0c <_printf_i+0xa8>
 8005e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e9a:	2b15      	cmp	r3, #21
 8005e9c:	d8f6      	bhi.n	8005e8c <_printf_i+0x28>
 8005e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ea4 <_printf_i+0x40>)
 8005ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005e8d 	.word	0x08005e8d
 8005eb0:	08005e8d 	.word	0x08005e8d
 8005eb4:	08005e8d 	.word	0x08005e8d
 8005eb8:	08005e8d 	.word	0x08005e8d
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005e8d 	.word	0x08005e8d
 8005ec4:	08005e8d 	.word	0x08005e8d
 8005ec8:	08005e8d 	.word	0x08005e8d
 8005ecc:	08005e8d 	.word	0x08005e8d
 8005ed0:	08006011 	.word	0x08006011
 8005ed4:	08005f3b 	.word	0x08005f3b
 8005ed8:	08005fcb 	.word	0x08005fcb
 8005edc:	08005e8d 	.word	0x08005e8d
 8005ee0:	08005e8d 	.word	0x08005e8d
 8005ee4:	08006033 	.word	0x08006033
 8005ee8:	08005e8d 	.word	0x08005e8d
 8005eec:	08005f3b 	.word	0x08005f3b
 8005ef0:	08005e8d 	.word	0x08005e8d
 8005ef4:	08005e8d 	.word	0x08005e8d
 8005ef8:	08005fd3 	.word	0x08005fd3
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6032      	str	r2, [r6, #0]
 8005f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e09d      	b.n	800604c <_printf_i+0x1e8>
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	6820      	ldr	r0, [r4, #0]
 8005f14:	1d19      	adds	r1, r3, #4
 8005f16:	6031      	str	r1, [r6, #0]
 8005f18:	0606      	lsls	r6, r0, #24
 8005f1a:	d501      	bpl.n	8005f20 <_printf_i+0xbc>
 8005f1c:	681d      	ldr	r5, [r3, #0]
 8005f1e:	e003      	b.n	8005f28 <_printf_i+0xc4>
 8005f20:	0645      	lsls	r5, r0, #25
 8005f22:	d5fb      	bpl.n	8005f1c <_printf_i+0xb8>
 8005f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	da03      	bge.n	8005f34 <_printf_i+0xd0>
 8005f2c:	232d      	movs	r3, #45	@ 0x2d
 8005f2e:	426d      	negs	r5, r5
 8005f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f34:	4859      	ldr	r0, [pc, #356]	@ (800609c <_printf_i+0x238>)
 8005f36:	230a      	movs	r3, #10
 8005f38:	e011      	b.n	8005f5e <_printf_i+0xfa>
 8005f3a:	6821      	ldr	r1, [r4, #0]
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	0608      	lsls	r0, r1, #24
 8005f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f44:	d402      	bmi.n	8005f4c <_printf_i+0xe8>
 8005f46:	0649      	lsls	r1, r1, #25
 8005f48:	bf48      	it	mi
 8005f4a:	b2ad      	uxthmi	r5, r5
 8005f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f4e:	4853      	ldr	r0, [pc, #332]	@ (800609c <_printf_i+0x238>)
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	bf14      	ite	ne
 8005f54:	230a      	movne	r3, #10
 8005f56:	2308      	moveq	r3, #8
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f5e:	6866      	ldr	r6, [r4, #4]
 8005f60:	60a6      	str	r6, [r4, #8]
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	bfa2      	ittt	ge
 8005f66:	6821      	ldrge	r1, [r4, #0]
 8005f68:	f021 0104 	bicge.w	r1, r1, #4
 8005f6c:	6021      	strge	r1, [r4, #0]
 8005f6e:	b90d      	cbnz	r5, 8005f74 <_printf_i+0x110>
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d04b      	beq.n	800600c <_printf_i+0x1a8>
 8005f74:	4616      	mov	r6, r2
 8005f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f7e:	5dc7      	ldrb	r7, [r0, r7]
 8005f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f84:	462f      	mov	r7, r5
 8005f86:	42bb      	cmp	r3, r7
 8005f88:	460d      	mov	r5, r1
 8005f8a:	d9f4      	bls.n	8005f76 <_printf_i+0x112>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d10b      	bne.n	8005fa8 <_printf_i+0x144>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	07df      	lsls	r7, r3, #31
 8005f94:	d508      	bpl.n	8005fa8 <_printf_i+0x144>
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	bfde      	ittt	le
 8005f9e:	2330      	movle	r3, #48	@ 0x30
 8005fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fa8:	1b92      	subs	r2, r2, r6
 8005faa:	6122      	str	r2, [r4, #16]
 8005fac:	f8cd a000 	str.w	sl, [sp]
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	aa03      	add	r2, sp, #12
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fee6 	bl	8005d88 <_printf_common>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d14a      	bne.n	8006056 <_printf_i+0x1f2>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b004      	add	sp, #16
 8005fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	f043 0320 	orr.w	r3, r3, #32
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	4833      	ldr	r0, [pc, #204]	@ (80060a0 <_printf_i+0x23c>)
 8005fd4:	2778      	movs	r7, #120	@ 0x78
 8005fd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	6831      	ldr	r1, [r6, #0]
 8005fde:	061f      	lsls	r7, r3, #24
 8005fe0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fe4:	d402      	bmi.n	8005fec <_printf_i+0x188>
 8005fe6:	065f      	lsls	r7, r3, #25
 8005fe8:	bf48      	it	mi
 8005fea:	b2ad      	uxthmi	r5, r5
 8005fec:	6031      	str	r1, [r6, #0]
 8005fee:	07d9      	lsls	r1, r3, #31
 8005ff0:	bf44      	itt	mi
 8005ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ff6:	6023      	strmi	r3, [r4, #0]
 8005ff8:	b11d      	cbz	r5, 8006002 <_printf_i+0x19e>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	e7ac      	b.n	8005f58 <_printf_i+0xf4>
 8005ffe:	4827      	ldr	r0, [pc, #156]	@ (800609c <_printf_i+0x238>)
 8006000:	e7e9      	b.n	8005fd6 <_printf_i+0x172>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f023 0320 	bic.w	r3, r3, #32
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	e7f6      	b.n	8005ffa <_printf_i+0x196>
 800600c:	4616      	mov	r6, r2
 800600e:	e7bd      	b.n	8005f8c <_printf_i+0x128>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	6961      	ldr	r1, [r4, #20]
 8006016:	1d18      	adds	r0, r3, #4
 8006018:	6030      	str	r0, [r6, #0]
 800601a:	062e      	lsls	r6, r5, #24
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	d501      	bpl.n	8006024 <_printf_i+0x1c0>
 8006020:	6019      	str	r1, [r3, #0]
 8006022:	e002      	b.n	800602a <_printf_i+0x1c6>
 8006024:	0668      	lsls	r0, r5, #25
 8006026:	d5fb      	bpl.n	8006020 <_printf_i+0x1bc>
 8006028:	8019      	strh	r1, [r3, #0]
 800602a:	2300      	movs	r3, #0
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	4616      	mov	r6, r2
 8006030:	e7bc      	b.n	8005fac <_printf_i+0x148>
 8006032:	6833      	ldr	r3, [r6, #0]
 8006034:	1d1a      	adds	r2, r3, #4
 8006036:	6032      	str	r2, [r6, #0]
 8006038:	681e      	ldr	r6, [r3, #0]
 800603a:	6862      	ldr	r2, [r4, #4]
 800603c:	2100      	movs	r1, #0
 800603e:	4630      	mov	r0, r6
 8006040:	f7fa f8ce 	bl	80001e0 <memchr>
 8006044:	b108      	cbz	r0, 800604a <_printf_i+0x1e6>
 8006046:	1b80      	subs	r0, r0, r6
 8006048:	6060      	str	r0, [r4, #4]
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	2300      	movs	r3, #0
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006054:	e7aa      	b.n	8005fac <_printf_i+0x148>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d0ad      	beq.n	8005fc0 <_printf_i+0x15c>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	079b      	lsls	r3, r3, #30
 8006068:	d413      	bmi.n	8006092 <_printf_i+0x22e>
 800606a:	68e0      	ldr	r0, [r4, #12]
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	4298      	cmp	r0, r3
 8006070:	bfb8      	it	lt
 8006072:	4618      	movlt	r0, r3
 8006074:	e7a6      	b.n	8005fc4 <_printf_i+0x160>
 8006076:	2301      	movs	r3, #1
 8006078:	4632      	mov	r2, r6
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	47d0      	blx	sl
 8006080:	3001      	adds	r0, #1
 8006082:	d09d      	beq.n	8005fc0 <_printf_i+0x15c>
 8006084:	3501      	adds	r5, #1
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	9903      	ldr	r1, [sp, #12]
 800608a:	1a5b      	subs	r3, r3, r1
 800608c:	42ab      	cmp	r3, r5
 800608e:	dcf2      	bgt.n	8006076 <_printf_i+0x212>
 8006090:	e7eb      	b.n	800606a <_printf_i+0x206>
 8006092:	2500      	movs	r5, #0
 8006094:	f104 0619 	add.w	r6, r4, #25
 8006098:	e7f5      	b.n	8006086 <_printf_i+0x222>
 800609a:	bf00      	nop
 800609c:	0800814a 	.word	0x0800814a
 80060a0:	0800815b 	.word	0x0800815b

080060a4 <std>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	e9c0 3300 	strd	r3, r3, [r0]
 80060ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b2:	6083      	str	r3, [r0, #8]
 80060b4:	8181      	strh	r1, [r0, #12]
 80060b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80060b8:	81c2      	strh	r2, [r0, #14]
 80060ba:	6183      	str	r3, [r0, #24]
 80060bc:	4619      	mov	r1, r3
 80060be:	2208      	movs	r2, #8
 80060c0:	305c      	adds	r0, #92	@ 0x5c
 80060c2:	f000 f920 	bl	8006306 <memset>
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <std+0x58>)
 80060c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <std+0x5c>)
 80060cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <std+0x60>)
 80060d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x64>)
 80060d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x68>)
 80060d8:	6224      	str	r4, [r4, #32]
 80060da:	429c      	cmp	r4, r3
 80060dc:	d006      	beq.n	80060ec <std+0x48>
 80060de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060e2:	4294      	cmp	r4, r2
 80060e4:	d002      	beq.n	80060ec <std+0x48>
 80060e6:	33d0      	adds	r3, #208	@ 0xd0
 80060e8:	429c      	cmp	r4, r3
 80060ea:	d105      	bne.n	80060f8 <std+0x54>
 80060ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f4:	f000 b994 	b.w	8006420 <__retarget_lock_init_recursive>
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop
 80060fc:	0800624d 	.word	0x0800624d
 8006100:	0800626f 	.word	0x0800626f
 8006104:	080062a7 	.word	0x080062a7
 8006108:	080062cb 	.word	0x080062cb
 800610c:	200004a8 	.word	0x200004a8

08006110 <stdio_exit_handler>:
 8006110:	4a02      	ldr	r2, [pc, #8]	@ (800611c <stdio_exit_handler+0xc>)
 8006112:	4903      	ldr	r1, [pc, #12]	@ (8006120 <stdio_exit_handler+0x10>)
 8006114:	4803      	ldr	r0, [pc, #12]	@ (8006124 <stdio_exit_handler+0x14>)
 8006116:	f000 b869 	b.w	80061ec <_fwalk_sglue>
 800611a:	bf00      	nop
 800611c:	2000007c 	.word	0x2000007c
 8006120:	08007be5 	.word	0x08007be5
 8006124:	2000008c 	.word	0x2000008c

08006128 <cleanup_stdio>:
 8006128:	6841      	ldr	r1, [r0, #4]
 800612a:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <cleanup_stdio+0x34>)
 800612c:	4299      	cmp	r1, r3
 800612e:	b510      	push	{r4, lr}
 8006130:	4604      	mov	r4, r0
 8006132:	d001      	beq.n	8006138 <cleanup_stdio+0x10>
 8006134:	f001 fd56 	bl	8007be4 <_fflush_r>
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <cleanup_stdio+0x38>)
 800613c:	4299      	cmp	r1, r3
 800613e:	d002      	beq.n	8006146 <cleanup_stdio+0x1e>
 8006140:	4620      	mov	r0, r4
 8006142:	f001 fd4f 	bl	8007be4 <_fflush_r>
 8006146:	68e1      	ldr	r1, [r4, #12]
 8006148:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <cleanup_stdio+0x3c>)
 800614a:	4299      	cmp	r1, r3
 800614c:	d004      	beq.n	8006158 <cleanup_stdio+0x30>
 800614e:	4620      	mov	r0, r4
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	f001 bd46 	b.w	8007be4 <_fflush_r>
 8006158:	bd10      	pop	{r4, pc}
 800615a:	bf00      	nop
 800615c:	200004a8 	.word	0x200004a8
 8006160:	20000510 	.word	0x20000510
 8006164:	20000578 	.word	0x20000578

08006168 <global_stdio_init.part.0>:
 8006168:	b510      	push	{r4, lr}
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <global_stdio_init.part.0+0x30>)
 800616c:	4c0b      	ldr	r4, [pc, #44]	@ (800619c <global_stdio_init.part.0+0x34>)
 800616e:	4a0c      	ldr	r2, [pc, #48]	@ (80061a0 <global_stdio_init.part.0+0x38>)
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	2200      	movs	r2, #0
 8006176:	2104      	movs	r1, #4
 8006178:	f7ff ff94 	bl	80060a4 <std>
 800617c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006180:	2201      	movs	r2, #1
 8006182:	2109      	movs	r1, #9
 8006184:	f7ff ff8e 	bl	80060a4 <std>
 8006188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800618c:	2202      	movs	r2, #2
 800618e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006192:	2112      	movs	r1, #18
 8006194:	f7ff bf86 	b.w	80060a4 <std>
 8006198:	200005e0 	.word	0x200005e0
 800619c:	200004a8 	.word	0x200004a8
 80061a0:	08006111 	.word	0x08006111

080061a4 <__sfp_lock_acquire>:
 80061a4:	4801      	ldr	r0, [pc, #4]	@ (80061ac <__sfp_lock_acquire+0x8>)
 80061a6:	f000 b93c 	b.w	8006422 <__retarget_lock_acquire_recursive>
 80061aa:	bf00      	nop
 80061ac:	200005e9 	.word	0x200005e9

080061b0 <__sfp_lock_release>:
 80061b0:	4801      	ldr	r0, [pc, #4]	@ (80061b8 <__sfp_lock_release+0x8>)
 80061b2:	f000 b937 	b.w	8006424 <__retarget_lock_release_recursive>
 80061b6:	bf00      	nop
 80061b8:	200005e9 	.word	0x200005e9

080061bc <__sinit>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	f7ff fff0 	bl	80061a4 <__sfp_lock_acquire>
 80061c4:	6a23      	ldr	r3, [r4, #32]
 80061c6:	b11b      	cbz	r3, 80061d0 <__sinit+0x14>
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	f7ff bff0 	b.w	80061b0 <__sfp_lock_release>
 80061d0:	4b04      	ldr	r3, [pc, #16]	@ (80061e4 <__sinit+0x28>)
 80061d2:	6223      	str	r3, [r4, #32]
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <__sinit+0x2c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f5      	bne.n	80061c8 <__sinit+0xc>
 80061dc:	f7ff ffc4 	bl	8006168 <global_stdio_init.part.0>
 80061e0:	e7f2      	b.n	80061c8 <__sinit+0xc>
 80061e2:	bf00      	nop
 80061e4:	08006129 	.word	0x08006129
 80061e8:	200005e0 	.word	0x200005e0

080061ec <_fwalk_sglue>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	4607      	mov	r7, r0
 80061f2:	4688      	mov	r8, r1
 80061f4:	4614      	mov	r4, r2
 80061f6:	2600      	movs	r6, #0
 80061f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006200:	d505      	bpl.n	800620e <_fwalk_sglue+0x22>
 8006202:	6824      	ldr	r4, [r4, #0]
 8006204:	2c00      	cmp	r4, #0
 8006206:	d1f7      	bne.n	80061f8 <_fwalk_sglue+0xc>
 8006208:	4630      	mov	r0, r6
 800620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d907      	bls.n	8006224 <_fwalk_sglue+0x38>
 8006214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006218:	3301      	adds	r3, #1
 800621a:	d003      	beq.n	8006224 <_fwalk_sglue+0x38>
 800621c:	4629      	mov	r1, r5
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	4306      	orrs	r6, r0
 8006224:	3568      	adds	r5, #104	@ 0x68
 8006226:	e7e9      	b.n	80061fc <_fwalk_sglue+0x10>

08006228 <iprintf>:
 8006228:	b40f      	push	{r0, r1, r2, r3}
 800622a:	b507      	push	{r0, r1, r2, lr}
 800622c:	4906      	ldr	r1, [pc, #24]	@ (8006248 <iprintf+0x20>)
 800622e:	ab04      	add	r3, sp, #16
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	f853 2b04 	ldr.w	r2, [r3], #4
 8006236:	6881      	ldr	r1, [r0, #8]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f001 fb37 	bl	80078ac <_vfiprintf_r>
 800623e:	b003      	add	sp, #12
 8006240:	f85d eb04 	ldr.w	lr, [sp], #4
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr
 8006248:	20000088 	.word	0x20000088

0800624c <__sread>:
 800624c:	b510      	push	{r4, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006254:	f000 f886 	bl	8006364 <_read_r>
 8006258:	2800      	cmp	r0, #0
 800625a:	bfab      	itete	ge
 800625c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800625e:	89a3      	ldrhlt	r3, [r4, #12]
 8006260:	181b      	addge	r3, r3, r0
 8006262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006266:	bfac      	ite	ge
 8006268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800626a:	81a3      	strhlt	r3, [r4, #12]
 800626c:	bd10      	pop	{r4, pc}

0800626e <__swrite>:
 800626e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006272:	461f      	mov	r7, r3
 8006274:	898b      	ldrh	r3, [r1, #12]
 8006276:	05db      	lsls	r3, r3, #23
 8006278:	4605      	mov	r5, r0
 800627a:	460c      	mov	r4, r1
 800627c:	4616      	mov	r6, r2
 800627e:	d505      	bpl.n	800628c <__swrite+0x1e>
 8006280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006284:	2302      	movs	r3, #2
 8006286:	2200      	movs	r2, #0
 8006288:	f000 f85a 	bl	8006340 <_lseek_r>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	4632      	mov	r2, r6
 800629a:	463b      	mov	r3, r7
 800629c:	4628      	mov	r0, r5
 800629e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a2:	f000 b881 	b.w	80063a8 <_write_r>

080062a6 <__sseek>:
 80062a6:	b510      	push	{r4, lr}
 80062a8:	460c      	mov	r4, r1
 80062aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ae:	f000 f847 	bl	8006340 <_lseek_r>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	bf15      	itete	ne
 80062b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062c2:	81a3      	strheq	r3, [r4, #12]
 80062c4:	bf18      	it	ne
 80062c6:	81a3      	strhne	r3, [r4, #12]
 80062c8:	bd10      	pop	{r4, pc}

080062ca <__sclose>:
 80062ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ce:	f000 b827 	b.w	8006320 <_close_r>

080062d2 <memmove>:
 80062d2:	4288      	cmp	r0, r1
 80062d4:	b510      	push	{r4, lr}
 80062d6:	eb01 0402 	add.w	r4, r1, r2
 80062da:	d902      	bls.n	80062e2 <memmove+0x10>
 80062dc:	4284      	cmp	r4, r0
 80062de:	4623      	mov	r3, r4
 80062e0:	d807      	bhi.n	80062f2 <memmove+0x20>
 80062e2:	1e43      	subs	r3, r0, #1
 80062e4:	42a1      	cmp	r1, r4
 80062e6:	d008      	beq.n	80062fa <memmove+0x28>
 80062e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f0:	e7f8      	b.n	80062e4 <memmove+0x12>
 80062f2:	4402      	add	r2, r0
 80062f4:	4601      	mov	r1, r0
 80062f6:	428a      	cmp	r2, r1
 80062f8:	d100      	bne.n	80062fc <memmove+0x2a>
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006300:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006304:	e7f7      	b.n	80062f6 <memmove+0x24>

08006306 <memset>:
 8006306:	4402      	add	r2, r0
 8006308:	4603      	mov	r3, r0
 800630a:	4293      	cmp	r3, r2
 800630c:	d100      	bne.n	8006310 <memset+0xa>
 800630e:	4770      	bx	lr
 8006310:	f803 1b01 	strb.w	r1, [r3], #1
 8006314:	e7f9      	b.n	800630a <memset+0x4>
	...

08006318 <_localeconv_r>:
 8006318:	4800      	ldr	r0, [pc, #0]	@ (800631c <_localeconv_r+0x4>)
 800631a:	4770      	bx	lr
 800631c:	200001c8 	.word	0x200001c8

08006320 <_close_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	@ (800633c <_close_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fc f8da 	bl	80024e4 <_close>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_close_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_close_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	200005e4 	.word	0x200005e4

08006340 <_lseek_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	@ (8006360 <_lseek_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fc f8ef 	bl	8002532 <_lseek>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_lseek_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_lseek_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	200005e4 	.word	0x200005e4

08006364 <_read_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d07      	ldr	r5, [pc, #28]	@ (8006384 <_read_r+0x20>)
 8006368:	4604      	mov	r4, r0
 800636a:	4608      	mov	r0, r1
 800636c:	4611      	mov	r1, r2
 800636e:	2200      	movs	r2, #0
 8006370:	602a      	str	r2, [r5, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	f7fc f899 	bl	80024aa <_read>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_read_r+0x1e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_read_r+0x1e>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	200005e4 	.word	0x200005e4

08006388 <_sbrk_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d06      	ldr	r5, [pc, #24]	@ (80063a4 <_sbrk_r+0x1c>)
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	f7fc f8da 	bl	800254c <_sbrk>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_sbrk_r+0x1a>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_sbrk_r+0x1a>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	200005e4 	.word	0x200005e4

080063a8 <_write_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	@ (80063c8 <_write_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fa fe3c 	bl	8001034 <_write>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_write_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_write_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	200005e4 	.word	0x200005e4

080063cc <__errno>:
 80063cc:	4b01      	ldr	r3, [pc, #4]	@ (80063d4 <__errno+0x8>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000088 	.word	0x20000088

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	@ (800641c <__libc_init_array+0x44>)
 80063ec:	f001 fe60 	bl	80080b0 <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	080084b0 	.word	0x080084b0
 8006414:	080084b0 	.word	0x080084b0
 8006418:	080084b0 	.word	0x080084b0
 800641c:	080084b4 	.word	0x080084b4

08006420 <__retarget_lock_init_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_acquire_recursive>:
 8006422:	4770      	bx	lr

08006424 <__retarget_lock_release_recursive>:
 8006424:	4770      	bx	lr

08006426 <quorem>:
 8006426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6903      	ldr	r3, [r0, #16]
 800642c:	690c      	ldr	r4, [r1, #16]
 800642e:	42a3      	cmp	r3, r4
 8006430:	4607      	mov	r7, r0
 8006432:	db7e      	blt.n	8006532 <quorem+0x10c>
 8006434:	3c01      	subs	r4, #1
 8006436:	f101 0814 	add.w	r8, r1, #20
 800643a:	00a3      	lsls	r3, r4, #2
 800643c:	f100 0514 	add.w	r5, r0, #20
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800644c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006450:	3301      	adds	r3, #1
 8006452:	429a      	cmp	r2, r3
 8006454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006458:	fbb2 f6f3 	udiv	r6, r2, r3
 800645c:	d32e      	bcc.n	80064bc <quorem+0x96>
 800645e:	f04f 0a00 	mov.w	sl, #0
 8006462:	46c4      	mov	ip, r8
 8006464:	46ae      	mov	lr, r5
 8006466:	46d3      	mov	fp, sl
 8006468:	f85c 3b04 	ldr.w	r3, [ip], #4
 800646c:	b298      	uxth	r0, r3
 800646e:	fb06 a000 	mla	r0, r6, r0, sl
 8006472:	0c02      	lsrs	r2, r0, #16
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	fb06 2303 	mla	r3, r6, r3, r2
 800647a:	f8de 2000 	ldr.w	r2, [lr]
 800647e:	b280      	uxth	r0, r0
 8006480:	b292      	uxth	r2, r2
 8006482:	1a12      	subs	r2, r2, r0
 8006484:	445a      	add	r2, fp
 8006486:	f8de 0000 	ldr.w	r0, [lr]
 800648a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800648e:	b29b      	uxth	r3, r3
 8006490:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006494:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006498:	b292      	uxth	r2, r2
 800649a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800649e:	45e1      	cmp	r9, ip
 80064a0:	f84e 2b04 	str.w	r2, [lr], #4
 80064a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064a8:	d2de      	bcs.n	8006468 <quorem+0x42>
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	58eb      	ldr	r3, [r5, r3]
 80064ae:	b92b      	cbnz	r3, 80064bc <quorem+0x96>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	3b04      	subs	r3, #4
 80064b4:	429d      	cmp	r5, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	d32f      	bcc.n	800651a <quorem+0xf4>
 80064ba:	613c      	str	r4, [r7, #16]
 80064bc:	4638      	mov	r0, r7
 80064be:	f001 f8c3 	bl	8007648 <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	db25      	blt.n	8006512 <quorem+0xec>
 80064c6:	4629      	mov	r1, r5
 80064c8:	2000      	movs	r0, #0
 80064ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ce:	f8d1 c000 	ldr.w	ip, [r1]
 80064d2:	fa1f fe82 	uxth.w	lr, r2
 80064d6:	fa1f f38c 	uxth.w	r3, ip
 80064da:	eba3 030e 	sub.w	r3, r3, lr
 80064de:	4403      	add	r3, r0
 80064e0:	0c12      	lsrs	r2, r2, #16
 80064e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f0:	45c1      	cmp	r9, r8
 80064f2:	f841 3b04 	str.w	r3, [r1], #4
 80064f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064fa:	d2e6      	bcs.n	80064ca <quorem+0xa4>
 80064fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006500:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006504:	b922      	cbnz	r2, 8006510 <quorem+0xea>
 8006506:	3b04      	subs	r3, #4
 8006508:	429d      	cmp	r5, r3
 800650a:	461a      	mov	r2, r3
 800650c:	d30b      	bcc.n	8006526 <quorem+0x100>
 800650e:	613c      	str	r4, [r7, #16]
 8006510:	3601      	adds	r6, #1
 8006512:	4630      	mov	r0, r6
 8006514:	b003      	add	sp, #12
 8006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	3b04      	subs	r3, #4
 800651e:	2a00      	cmp	r2, #0
 8006520:	d1cb      	bne.n	80064ba <quorem+0x94>
 8006522:	3c01      	subs	r4, #1
 8006524:	e7c6      	b.n	80064b4 <quorem+0x8e>
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	3b04      	subs	r3, #4
 800652a:	2a00      	cmp	r2, #0
 800652c:	d1ef      	bne.n	800650e <quorem+0xe8>
 800652e:	3c01      	subs	r4, #1
 8006530:	e7ea      	b.n	8006508 <quorem+0xe2>
 8006532:	2000      	movs	r0, #0
 8006534:	e7ee      	b.n	8006514 <quorem+0xee>
	...

08006538 <_dtoa_r>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	69c7      	ldr	r7, [r0, #28]
 800653e:	b099      	sub	sp, #100	@ 0x64
 8006540:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006544:	ec55 4b10 	vmov	r4, r5, d0
 8006548:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800654a:	9109      	str	r1, [sp, #36]	@ 0x24
 800654c:	4683      	mov	fp, r0
 800654e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006550:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006552:	b97f      	cbnz	r7, 8006574 <_dtoa_r+0x3c>
 8006554:	2010      	movs	r0, #16
 8006556:	f7ff f897 	bl	8005688 <malloc>
 800655a:	4602      	mov	r2, r0
 800655c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006560:	b920      	cbnz	r0, 800656c <_dtoa_r+0x34>
 8006562:	4ba7      	ldr	r3, [pc, #668]	@ (8006800 <_dtoa_r+0x2c8>)
 8006564:	21ef      	movs	r1, #239	@ 0xef
 8006566:	48a7      	ldr	r0, [pc, #668]	@ (8006804 <_dtoa_r+0x2cc>)
 8006568:	f001 fc06 	bl	8007d78 <__assert_func>
 800656c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006570:	6007      	str	r7, [r0, #0]
 8006572:	60c7      	str	r7, [r0, #12]
 8006574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	b159      	cbz	r1, 8006594 <_dtoa_r+0x5c>
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	604a      	str	r2, [r1, #4]
 8006580:	2301      	movs	r3, #1
 8006582:	4093      	lsls	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	4658      	mov	r0, fp
 8006588:	f000 fe24 	bl	80071d4 <_Bfree>
 800658c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	1e2b      	subs	r3, r5, #0
 8006596:	bfb9      	ittee	lt
 8006598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800659c:	9303      	strlt	r3, [sp, #12]
 800659e:	2300      	movge	r3, #0
 80065a0:	6033      	strge	r3, [r6, #0]
 80065a2:	9f03      	ldr	r7, [sp, #12]
 80065a4:	4b98      	ldr	r3, [pc, #608]	@ (8006808 <_dtoa_r+0x2d0>)
 80065a6:	bfbc      	itt	lt
 80065a8:	2201      	movlt	r2, #1
 80065aa:	6032      	strlt	r2, [r6, #0]
 80065ac:	43bb      	bics	r3, r7
 80065ae:	d112      	bne.n	80065d6 <_dtoa_r+0x9e>
 80065b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065bc:	4323      	orrs	r3, r4
 80065be:	f000 854d 	beq.w	800705c <_dtoa_r+0xb24>
 80065c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800681c <_dtoa_r+0x2e4>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 854f 	beq.w	800706c <_dtoa_r+0xb34>
 80065ce:	f10a 0303 	add.w	r3, sl, #3
 80065d2:	f000 bd49 	b.w	8007068 <_dtoa_r+0xb30>
 80065d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	ec51 0b17 	vmov	r0, r1, d7
 80065e0:	2300      	movs	r3, #0
 80065e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065e6:	f7fa fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ea:	4680      	mov	r8, r0
 80065ec:	b158      	cbz	r0, 8006606 <_dtoa_r+0xce>
 80065ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065f0:	2301      	movs	r3, #1
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065f6:	b113      	cbz	r3, 80065fe <_dtoa_r+0xc6>
 80065f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065fa:	4b84      	ldr	r3, [pc, #528]	@ (800680c <_dtoa_r+0x2d4>)
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006820 <_dtoa_r+0x2e8>
 8006602:	f000 bd33 	b.w	800706c <_dtoa_r+0xb34>
 8006606:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800660a:	aa16      	add	r2, sp, #88	@ 0x58
 800660c:	a917      	add	r1, sp, #92	@ 0x5c
 800660e:	4658      	mov	r0, fp
 8006610:	f001 f8ca 	bl	80077a8 <__d2b>
 8006614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006618:	4681      	mov	r9, r0
 800661a:	2e00      	cmp	r6, #0
 800661c:	d077      	beq.n	800670e <_dtoa_r+0x1d6>
 800661e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006620:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800662c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006638:	4619      	mov	r1, r3
 800663a:	2200      	movs	r2, #0
 800663c:	4b74      	ldr	r3, [pc, #464]	@ (8006810 <_dtoa_r+0x2d8>)
 800663e:	f7f9 fe2b 	bl	8000298 <__aeabi_dsub>
 8006642:	a369      	add	r3, pc, #420	@ (adr r3, 80067e8 <_dtoa_r+0x2b0>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 ffde 	bl	8000608 <__aeabi_dmul>
 800664c:	a368      	add	r3, pc, #416	@ (adr r3, 80067f0 <_dtoa_r+0x2b8>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 fe23 	bl	800029c <__adddf3>
 8006656:	4604      	mov	r4, r0
 8006658:	4630      	mov	r0, r6
 800665a:	460d      	mov	r5, r1
 800665c:	f7f9 ff6a 	bl	8000534 <__aeabi_i2d>
 8006660:	a365      	add	r3, pc, #404	@ (adr r3, 80067f8 <_dtoa_r+0x2c0>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ffcf 	bl	8000608 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fe13 	bl	800029c <__adddf3>
 8006676:	4604      	mov	r4, r0
 8006678:	460d      	mov	r5, r1
 800667a:	f7fa fa75 	bl	8000b68 <__aeabi_d2iz>
 800667e:	2200      	movs	r2, #0
 8006680:	4607      	mov	r7, r0
 8006682:	2300      	movs	r3, #0
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7fa fa30 	bl	8000aec <__aeabi_dcmplt>
 800668c:	b140      	cbz	r0, 80066a0 <_dtoa_r+0x168>
 800668e:	4638      	mov	r0, r7
 8006690:	f7f9 ff50 	bl	8000534 <__aeabi_i2d>
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	f7fa fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800669c:	b900      	cbnz	r0, 80066a0 <_dtoa_r+0x168>
 800669e:	3f01      	subs	r7, #1
 80066a0:	2f16      	cmp	r7, #22
 80066a2:	d851      	bhi.n	8006748 <_dtoa_r+0x210>
 80066a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006814 <_dtoa_r+0x2dc>)
 80066a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b2:	f7fa fa1b 	bl	8000aec <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d048      	beq.n	800674c <_dtoa_r+0x214>
 80066ba:	3f01      	subs	r7, #1
 80066bc:	2300      	movs	r3, #0
 80066be:	9312      	str	r3, [sp, #72]	@ 0x48
 80066c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066c2:	1b9b      	subs	r3, r3, r6
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	bf44      	itt	mi
 80066c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80066cc:	2300      	movmi	r3, #0
 80066ce:	9208      	str	r2, [sp, #32]
 80066d0:	bf54      	ite	pl
 80066d2:	f04f 0800 	movpl.w	r8, #0
 80066d6:	9308      	strmi	r3, [sp, #32]
 80066d8:	2f00      	cmp	r7, #0
 80066da:	db39      	blt.n	8006750 <_dtoa_r+0x218>
 80066dc:	9b08      	ldr	r3, [sp, #32]
 80066de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066e0:	443b      	add	r3, r7
 80066e2:	9308      	str	r3, [sp, #32]
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	d864      	bhi.n	80067b8 <_dtoa_r+0x280>
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	bfc4      	itt	gt
 80066f2:	3b04      	subgt	r3, #4
 80066f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f8:	f1a3 0302 	sub.w	r3, r3, #2
 80066fc:	bfcc      	ite	gt
 80066fe:	2400      	movgt	r4, #0
 8006700:	2401      	movle	r4, #1
 8006702:	2b03      	cmp	r3, #3
 8006704:	d863      	bhi.n	80067ce <_dtoa_r+0x296>
 8006706:	e8df f003 	tbb	[pc, r3]
 800670a:	372a      	.short	0x372a
 800670c:	5535      	.short	0x5535
 800670e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006712:	441e      	add	r6, r3
 8006714:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006718:	2b20      	cmp	r3, #32
 800671a:	bfc1      	itttt	gt
 800671c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006720:	409f      	lslgt	r7, r3
 8006722:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006726:	fa24 f303 	lsrgt.w	r3, r4, r3
 800672a:	bfd6      	itet	le
 800672c:	f1c3 0320 	rsble	r3, r3, #32
 8006730:	ea47 0003 	orrgt.w	r0, r7, r3
 8006734:	fa04 f003 	lslle.w	r0, r4, r3
 8006738:	f7f9 feec 	bl	8000514 <__aeabi_ui2d>
 800673c:	2201      	movs	r2, #1
 800673e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006742:	3e01      	subs	r6, #1
 8006744:	9214      	str	r2, [sp, #80]	@ 0x50
 8006746:	e777      	b.n	8006638 <_dtoa_r+0x100>
 8006748:	2301      	movs	r3, #1
 800674a:	e7b8      	b.n	80066be <_dtoa_r+0x186>
 800674c:	9012      	str	r0, [sp, #72]	@ 0x48
 800674e:	e7b7      	b.n	80066c0 <_dtoa_r+0x188>
 8006750:	427b      	negs	r3, r7
 8006752:	930a      	str	r3, [sp, #40]	@ 0x28
 8006754:	2300      	movs	r3, #0
 8006756:	eba8 0807 	sub.w	r8, r8, r7
 800675a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800675c:	e7c4      	b.n	80066e8 <_dtoa_r+0x1b0>
 800675e:	2300      	movs	r3, #0
 8006760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	dc35      	bgt.n	80067d4 <_dtoa_r+0x29c>
 8006768:	2301      	movs	r3, #1
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	9307      	str	r3, [sp, #28]
 800676e:	461a      	mov	r2, r3
 8006770:	920e      	str	r2, [sp, #56]	@ 0x38
 8006772:	e00b      	b.n	800678c <_dtoa_r+0x254>
 8006774:	2301      	movs	r3, #1
 8006776:	e7f3      	b.n	8006760 <_dtoa_r+0x228>
 8006778:	2300      	movs	r3, #0
 800677a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800677c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	bfb8      	it	lt
 800678a:	2301      	movlt	r3, #1
 800678c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006790:	2100      	movs	r1, #0
 8006792:	2204      	movs	r2, #4
 8006794:	f102 0514 	add.w	r5, r2, #20
 8006798:	429d      	cmp	r5, r3
 800679a:	d91f      	bls.n	80067dc <_dtoa_r+0x2a4>
 800679c:	6041      	str	r1, [r0, #4]
 800679e:	4658      	mov	r0, fp
 80067a0:	f000 fcd8 	bl	8007154 <_Balloc>
 80067a4:	4682      	mov	sl, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d13c      	bne.n	8006824 <_dtoa_r+0x2ec>
 80067aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <_dtoa_r+0x2e0>)
 80067ac:	4602      	mov	r2, r0
 80067ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80067b2:	e6d8      	b.n	8006566 <_dtoa_r+0x2e>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e7e0      	b.n	800677a <_dtoa_r+0x242>
 80067b8:	2401      	movs	r4, #1
 80067ba:	2300      	movs	r3, #0
 80067bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2312      	movs	r3, #18
 80067cc:	e7d0      	b.n	8006770 <_dtoa_r+0x238>
 80067ce:	2301      	movs	r3, #1
 80067d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067d2:	e7f5      	b.n	80067c0 <_dtoa_r+0x288>
 80067d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	9307      	str	r3, [sp, #28]
 80067da:	e7d7      	b.n	800678c <_dtoa_r+0x254>
 80067dc:	3101      	adds	r1, #1
 80067de:	0052      	lsls	r2, r2, #1
 80067e0:	e7d8      	b.n	8006794 <_dtoa_r+0x25c>
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	636f4361 	.word	0x636f4361
 80067ec:	3fd287a7 	.word	0x3fd287a7
 80067f0:	8b60c8b3 	.word	0x8b60c8b3
 80067f4:	3fc68a28 	.word	0x3fc68a28
 80067f8:	509f79fb 	.word	0x509f79fb
 80067fc:	3fd34413 	.word	0x3fd34413
 8006800:	08008179 	.word	0x08008179
 8006804:	08008190 	.word	0x08008190
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	08008149 	.word	0x08008149
 8006810:	3ff80000 	.word	0x3ff80000
 8006814:	08008288 	.word	0x08008288
 8006818:	080081e8 	.word	0x080081e8
 800681c:	08008175 	.word	0x08008175
 8006820:	08008148 	.word	0x08008148
 8006824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006828:	6018      	str	r0, [r3, #0]
 800682a:	9b07      	ldr	r3, [sp, #28]
 800682c:	2b0e      	cmp	r3, #14
 800682e:	f200 80a4 	bhi.w	800697a <_dtoa_r+0x442>
 8006832:	2c00      	cmp	r4, #0
 8006834:	f000 80a1 	beq.w	800697a <_dtoa_r+0x442>
 8006838:	2f00      	cmp	r7, #0
 800683a:	dd33      	ble.n	80068a4 <_dtoa_r+0x36c>
 800683c:	4bad      	ldr	r3, [pc, #692]	@ (8006af4 <_dtoa_r+0x5bc>)
 800683e:	f007 020f 	and.w	r2, r7, #15
 8006842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006846:	ed93 7b00 	vldr	d7, [r3]
 800684a:	05f8      	lsls	r0, r7, #23
 800684c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006850:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006854:	d516      	bpl.n	8006884 <_dtoa_r+0x34c>
 8006856:	4ba8      	ldr	r3, [pc, #672]	@ (8006af8 <_dtoa_r+0x5c0>)
 8006858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006860:	f7f9 fffc 	bl	800085c <__aeabi_ddiv>
 8006864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006868:	f004 040f 	and.w	r4, r4, #15
 800686c:	2603      	movs	r6, #3
 800686e:	4da2      	ldr	r5, [pc, #648]	@ (8006af8 <_dtoa_r+0x5c0>)
 8006870:	b954      	cbnz	r4, 8006888 <_dtoa_r+0x350>
 8006872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	f7f9 ffef 	bl	800085c <__aeabi_ddiv>
 800687e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006882:	e028      	b.n	80068d6 <_dtoa_r+0x39e>
 8006884:	2602      	movs	r6, #2
 8006886:	e7f2      	b.n	800686e <_dtoa_r+0x336>
 8006888:	07e1      	lsls	r1, r4, #31
 800688a:	d508      	bpl.n	800689e <_dtoa_r+0x366>
 800688c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006894:	f7f9 feb8 	bl	8000608 <__aeabi_dmul>
 8006898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800689c:	3601      	adds	r6, #1
 800689e:	1064      	asrs	r4, r4, #1
 80068a0:	3508      	adds	r5, #8
 80068a2:	e7e5      	b.n	8006870 <_dtoa_r+0x338>
 80068a4:	f000 80d2 	beq.w	8006a4c <_dtoa_r+0x514>
 80068a8:	427c      	negs	r4, r7
 80068aa:	4b92      	ldr	r3, [pc, #584]	@ (8006af4 <_dtoa_r+0x5bc>)
 80068ac:	4d92      	ldr	r5, [pc, #584]	@ (8006af8 <_dtoa_r+0x5c0>)
 80068ae:	f004 020f 	and.w	r2, r4, #15
 80068b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068be:	f7f9 fea3 	bl	8000608 <__aeabi_dmul>
 80068c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c6:	1124      	asrs	r4, r4, #4
 80068c8:	2300      	movs	r3, #0
 80068ca:	2602      	movs	r6, #2
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	f040 80b2 	bne.w	8006a36 <_dtoa_r+0x4fe>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d3      	bne.n	800687e <_dtoa_r+0x346>
 80068d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80b7 	beq.w	8006a50 <_dtoa_r+0x518>
 80068e2:	4b86      	ldr	r3, [pc, #536]	@ (8006afc <_dtoa_r+0x5c4>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4620      	mov	r0, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7fa f8ff 	bl	8000aec <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f000 80ae 	beq.w	8006a50 <_dtoa_r+0x518>
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80aa 	beq.w	8006a50 <_dtoa_r+0x518>
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dd37      	ble.n	8006972 <_dtoa_r+0x43a>
 8006902:	1e7b      	subs	r3, r7, #1
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	4620      	mov	r0, r4
 8006908:	4b7d      	ldr	r3, [pc, #500]	@ (8006b00 <_dtoa_r+0x5c8>)
 800690a:	2200      	movs	r2, #0
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fe7b 	bl	8000608 <__aeabi_dmul>
 8006912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006916:	9c00      	ldr	r4, [sp, #0]
 8006918:	3601      	adds	r6, #1
 800691a:	4630      	mov	r0, r6
 800691c:	f7f9 fe0a 	bl	8000534 <__aeabi_i2d>
 8006920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006924:	f7f9 fe70 	bl	8000608 <__aeabi_dmul>
 8006928:	4b76      	ldr	r3, [pc, #472]	@ (8006b04 <_dtoa_r+0x5cc>)
 800692a:	2200      	movs	r2, #0
 800692c:	f7f9 fcb6 	bl	800029c <__adddf3>
 8006930:	4605      	mov	r5, r0
 8006932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006936:	2c00      	cmp	r4, #0
 8006938:	f040 808d 	bne.w	8006a56 <_dtoa_r+0x51e>
 800693c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006940:	4b71      	ldr	r3, [pc, #452]	@ (8006b08 <_dtoa_r+0x5d0>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006950:	462a      	mov	r2, r5
 8006952:	4633      	mov	r3, r6
 8006954:	f7fa f8e8 	bl	8000b28 <__aeabi_dcmpgt>
 8006958:	2800      	cmp	r0, #0
 800695a:	f040 828b 	bne.w	8006e74 <_dtoa_r+0x93c>
 800695e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006962:	462a      	mov	r2, r5
 8006964:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006968:	f7fa f8c0 	bl	8000aec <__aeabi_dcmplt>
 800696c:	2800      	cmp	r0, #0
 800696e:	f040 8128 	bne.w	8006bc2 <_dtoa_r+0x68a>
 8006972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800697a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f2c0 815a 	blt.w	8006c36 <_dtoa_r+0x6fe>
 8006982:	2f0e      	cmp	r7, #14
 8006984:	f300 8157 	bgt.w	8006c36 <_dtoa_r+0x6fe>
 8006988:	4b5a      	ldr	r3, [pc, #360]	@ (8006af4 <_dtoa_r+0x5bc>)
 800698a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800698e:	ed93 7b00 	vldr	d7, [r3]
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	ed8d 7b00 	vstr	d7, [sp]
 800699a:	da03      	bge.n	80069a4 <_dtoa_r+0x46c>
 800699c:	9b07      	ldr	r3, [sp, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f340 8101 	ble.w	8006ba6 <_dtoa_r+0x66e>
 80069a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069a8:	4656      	mov	r6, sl
 80069aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	f7f9 ff53 	bl	800085c <__aeabi_ddiv>
 80069b6:	f7fa f8d7 	bl	8000b68 <__aeabi_d2iz>
 80069ba:	4680      	mov	r8, r0
 80069bc:	f7f9 fdba 	bl	8000534 <__aeabi_i2d>
 80069c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c4:	f7f9 fe20 	bl	8000608 <__aeabi_dmul>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069d4:	f7f9 fc60 	bl	8000298 <__aeabi_dsub>
 80069d8:	f806 4b01 	strb.w	r4, [r6], #1
 80069dc:	9d07      	ldr	r5, [sp, #28]
 80069de:	eba6 040a 	sub.w	r4, r6, sl
 80069e2:	42a5      	cmp	r5, r4
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	f040 8117 	bne.w	8006c1a <_dtoa_r+0x6e2>
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069f4:	4604      	mov	r4, r0
 80069f6:	460d      	mov	r5, r1
 80069f8:	f7fa f896 	bl	8000b28 <__aeabi_dcmpgt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 80f9 	bne.w	8006bf4 <_dtoa_r+0x6bc>
 8006a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7fa f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a0e:	b118      	cbz	r0, 8006a18 <_dtoa_r+0x4e0>
 8006a10:	f018 0f01 	tst.w	r8, #1
 8006a14:	f040 80ee 	bne.w	8006bf4 <_dtoa_r+0x6bc>
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4658      	mov	r0, fp
 8006a1c:	f000 fbda 	bl	80071d4 <_Bfree>
 8006a20:	2300      	movs	r3, #0
 8006a22:	7033      	strb	r3, [r6, #0]
 8006a24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a26:	3701      	adds	r7, #1
 8006a28:	601f      	str	r7, [r3, #0]
 8006a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 831d 	beq.w	800706c <_dtoa_r+0xb34>
 8006a32:	601e      	str	r6, [r3, #0]
 8006a34:	e31a      	b.n	800706c <_dtoa_r+0xb34>
 8006a36:	07e2      	lsls	r2, r4, #31
 8006a38:	d505      	bpl.n	8006a46 <_dtoa_r+0x50e>
 8006a3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a3e:	f7f9 fde3 	bl	8000608 <__aeabi_dmul>
 8006a42:	3601      	adds	r6, #1
 8006a44:	2301      	movs	r3, #1
 8006a46:	1064      	asrs	r4, r4, #1
 8006a48:	3508      	adds	r5, #8
 8006a4a:	e73f      	b.n	80068cc <_dtoa_r+0x394>
 8006a4c:	2602      	movs	r6, #2
 8006a4e:	e742      	b.n	80068d6 <_dtoa_r+0x39e>
 8006a50:	9c07      	ldr	r4, [sp, #28]
 8006a52:	9704      	str	r7, [sp, #16]
 8006a54:	e761      	b.n	800691a <_dtoa_r+0x3e2>
 8006a56:	4b27      	ldr	r3, [pc, #156]	@ (8006af4 <_dtoa_r+0x5bc>)
 8006a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a62:	4454      	add	r4, sl
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d053      	beq.n	8006b10 <_dtoa_r+0x5d8>
 8006a68:	4928      	ldr	r1, [pc, #160]	@ (8006b0c <_dtoa_r+0x5d4>)
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f7f9 fef6 	bl	800085c <__aeabi_ddiv>
 8006a70:	4633      	mov	r3, r6
 8006a72:	462a      	mov	r2, r5
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a7c:	4656      	mov	r6, sl
 8006a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a82:	f7fa f871 	bl	8000b68 <__aeabi_d2iz>
 8006a86:	4605      	mov	r5, r0
 8006a88:	f7f9 fd54 	bl	8000534 <__aeabi_i2d>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a94:	f7f9 fc00 	bl	8000298 <__aeabi_dsub>
 8006a98:	3530      	adds	r5, #48	@ 0x30
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa2:	f806 5b01 	strb.w	r5, [r6], #1
 8006aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aaa:	f7fa f81f 	bl	8000aec <__aeabi_dcmplt>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d171      	bne.n	8006b96 <_dtoa_r+0x65e>
 8006ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab6:	4911      	ldr	r1, [pc, #68]	@ (8006afc <_dtoa_r+0x5c4>)
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f7f9 fbed 	bl	8000298 <__aeabi_dsub>
 8006abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ac2:	f7fa f813 	bl	8000aec <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f040 8095 	bne.w	8006bf6 <_dtoa_r+0x6be>
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	f43f af50 	beq.w	8006972 <_dtoa_r+0x43a>
 8006ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <_dtoa_r+0x5c8>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f7f9 fd95 	bl	8000608 <__aeabi_dmul>
 8006ade:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <_dtoa_r+0x5c8>)
 8006ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aea:	f7f9 fd8d 	bl	8000608 <__aeabi_dmul>
 8006aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af2:	e7c4      	b.n	8006a7e <_dtoa_r+0x546>
 8006af4:	08008288 	.word	0x08008288
 8006af8:	08008260 	.word	0x08008260
 8006afc:	3ff00000 	.word	0x3ff00000
 8006b00:	40240000 	.word	0x40240000
 8006b04:	401c0000 	.word	0x401c0000
 8006b08:	40140000 	.word	0x40140000
 8006b0c:	3fe00000 	.word	0x3fe00000
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	f7f9 fd78 	bl	8000608 <__aeabi_dmul>
 8006b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b1e:	4656      	mov	r6, sl
 8006b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b24:	f7fa f820 	bl	8000b68 <__aeabi_d2iz>
 8006b28:	4605      	mov	r5, r0
 8006b2a:	f7f9 fd03 	bl	8000534 <__aeabi_i2d>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b36:	f7f9 fbaf 	bl	8000298 <__aeabi_dsub>
 8006b3a:	3530      	adds	r5, #48	@ 0x30
 8006b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	42a6      	cmp	r6, r4
 8006b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	d124      	bne.n	8006b9a <_dtoa_r+0x662>
 8006b50:	4bac      	ldr	r3, [pc, #688]	@ (8006e04 <_dtoa_r+0x8cc>)
 8006b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b56:	f7f9 fba1 	bl	800029c <__adddf3>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b62:	f7f9 ffe1 	bl	8000b28 <__aeabi_dcmpgt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d145      	bne.n	8006bf6 <_dtoa_r+0x6be>
 8006b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b6e:	49a5      	ldr	r1, [pc, #660]	@ (8006e04 <_dtoa_r+0x8cc>)
 8006b70:	2000      	movs	r0, #0
 8006b72:	f7f9 fb91 	bl	8000298 <__aeabi_dsub>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b7e:	f7f9 ffb5 	bl	8000aec <__aeabi_dcmplt>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f aef5 	beq.w	8006972 <_dtoa_r+0x43a>
 8006b88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b8a:	1e73      	subs	r3, r6, #1
 8006b8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b92:	2b30      	cmp	r3, #48	@ 0x30
 8006b94:	d0f8      	beq.n	8006b88 <_dtoa_r+0x650>
 8006b96:	9f04      	ldr	r7, [sp, #16]
 8006b98:	e73e      	b.n	8006a18 <_dtoa_r+0x4e0>
 8006b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8006e08 <_dtoa_r+0x8d0>)
 8006b9c:	f7f9 fd34 	bl	8000608 <__aeabi_dmul>
 8006ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba4:	e7bc      	b.n	8006b20 <_dtoa_r+0x5e8>
 8006ba6:	d10c      	bne.n	8006bc2 <_dtoa_r+0x68a>
 8006ba8:	4b98      	ldr	r3, [pc, #608]	@ (8006e0c <_dtoa_r+0x8d4>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bb0:	f7f9 fd2a 	bl	8000608 <__aeabi_dmul>
 8006bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb8:	f7f9 ffac 	bl	8000b14 <__aeabi_dcmpge>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f000 8157 	beq.w	8006e70 <_dtoa_r+0x938>
 8006bc2:	2400      	movs	r4, #0
 8006bc4:	4625      	mov	r5, r4
 8006bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	4656      	mov	r6, sl
 8006bce:	2700      	movs	r7, #0
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4658      	mov	r0, fp
 8006bd4:	f000 fafe 	bl	80071d4 <_Bfree>
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	d0dc      	beq.n	8006b96 <_dtoa_r+0x65e>
 8006bdc:	b12f      	cbz	r7, 8006bea <_dtoa_r+0x6b2>
 8006bde:	42af      	cmp	r7, r5
 8006be0:	d003      	beq.n	8006bea <_dtoa_r+0x6b2>
 8006be2:	4639      	mov	r1, r7
 8006be4:	4658      	mov	r0, fp
 8006be6:	f000 faf5 	bl	80071d4 <_Bfree>
 8006bea:	4629      	mov	r1, r5
 8006bec:	4658      	mov	r0, fp
 8006bee:	f000 faf1 	bl	80071d4 <_Bfree>
 8006bf2:	e7d0      	b.n	8006b96 <_dtoa_r+0x65e>
 8006bf4:	9704      	str	r7, [sp, #16]
 8006bf6:	4633      	mov	r3, r6
 8006bf8:	461e      	mov	r6, r3
 8006bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bfe:	2a39      	cmp	r2, #57	@ 0x39
 8006c00:	d107      	bne.n	8006c12 <_dtoa_r+0x6da>
 8006c02:	459a      	cmp	sl, r3
 8006c04:	d1f8      	bne.n	8006bf8 <_dtoa_r+0x6c0>
 8006c06:	9a04      	ldr	r2, [sp, #16]
 8006c08:	3201      	adds	r2, #1
 8006c0a:	9204      	str	r2, [sp, #16]
 8006c0c:	2230      	movs	r2, #48	@ 0x30
 8006c0e:	f88a 2000 	strb.w	r2, [sl]
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	3201      	adds	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e7bd      	b.n	8006b96 <_dtoa_r+0x65e>
 8006c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e08 <_dtoa_r+0x8d0>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f7f9 fcf3 	bl	8000608 <__aeabi_dmul>
 8006c22:	2200      	movs	r2, #0
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	460d      	mov	r5, r1
 8006c2a:	f7f9 ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f aebb 	beq.w	80069aa <_dtoa_r+0x472>
 8006c34:	e6f0      	b.n	8006a18 <_dtoa_r+0x4e0>
 8006c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	f000 80db 	beq.w	8006df4 <_dtoa_r+0x8bc>
 8006c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	f300 80bf 	bgt.w	8006dc4 <_dtoa_r+0x88c>
 8006c46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c48:	2a00      	cmp	r2, #0
 8006c4a:	f000 80b7 	beq.w	8006dbc <_dtoa_r+0x884>
 8006c4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c54:	4646      	mov	r6, r8
 8006c56:	9a08      	ldr	r2, [sp, #32]
 8006c58:	2101      	movs	r1, #1
 8006c5a:	441a      	add	r2, r3
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	4498      	add	r8, r3
 8006c60:	9208      	str	r2, [sp, #32]
 8006c62:	f000 fb6b 	bl	800733c <__i2b>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b15e      	cbz	r6, 8006c82 <_dtoa_r+0x74a>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd08      	ble.n	8006c82 <_dtoa_r+0x74a>
 8006c70:	42b3      	cmp	r3, r6
 8006c72:	9a08      	ldr	r2, [sp, #32]
 8006c74:	bfa8      	it	ge
 8006c76:	4633      	movge	r3, r6
 8006c78:	eba8 0803 	sub.w	r8, r8, r3
 8006c7c:	1af6      	subs	r6, r6, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	9308      	str	r3, [sp, #32]
 8006c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c84:	b1f3      	cbz	r3, 8006cc4 <_dtoa_r+0x78c>
 8006c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80b7 	beq.w	8006dfc <_dtoa_r+0x8c4>
 8006c8e:	b18c      	cbz	r4, 8006cb4 <_dtoa_r+0x77c>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4622      	mov	r2, r4
 8006c94:	4658      	mov	r0, fp
 8006c96:	f000 fc11 	bl	80074bc <__pow5mult>
 8006c9a:	464a      	mov	r2, r9
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	4658      	mov	r0, fp
 8006ca2:	f000 fb61 	bl	8007368 <__multiply>
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	9004      	str	r0, [sp, #16]
 8006caa:	4658      	mov	r0, fp
 8006cac:	f000 fa92 	bl	80071d4 <_Bfree>
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	4699      	mov	r9, r3
 8006cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb6:	1b1a      	subs	r2, r3, r4
 8006cb8:	d004      	beq.n	8006cc4 <_dtoa_r+0x78c>
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4658      	mov	r0, fp
 8006cbe:	f000 fbfd 	bl	80074bc <__pow5mult>
 8006cc2:	4681      	mov	r9, r0
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4658      	mov	r0, fp
 8006cc8:	f000 fb38 	bl	800733c <__i2b>
 8006ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cce:	4604      	mov	r4, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 81cf 	beq.w	8007074 <_dtoa_r+0xb3c>
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4601      	mov	r1, r0
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fbee 	bl	80074bc <__pow5mult>
 8006ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	f300 8095 	bgt.w	8006e14 <_dtoa_r+0x8dc>
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8087 	bne.w	8006e00 <_dtoa_r+0x8c8>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 8089 	bne.w	8006e10 <_dtoa_r+0x8d8>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d04:	0d1b      	lsrs	r3, r3, #20
 8006d06:	051b      	lsls	r3, r3, #20
 8006d08:	b12b      	cbz	r3, 8006d16 <_dtoa_r+0x7de>
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	9308      	str	r3, [sp, #32]
 8006d10:	f108 0801 	add.w	r8, r8, #1
 8006d14:	2301      	movs	r3, #1
 8006d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 81b0 	beq.w	8007080 <_dtoa_r+0xb48>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d26:	6918      	ldr	r0, [r3, #16]
 8006d28:	f000 fabc 	bl	80072a4 <__hi0bits>
 8006d2c:	f1c0 0020 	rsb	r0, r0, #32
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	4418      	add	r0, r3
 8006d34:	f010 001f 	ands.w	r0, r0, #31
 8006d38:	d077      	beq.n	8006e2a <_dtoa_r+0x8f2>
 8006d3a:	f1c0 0320 	rsb	r3, r0, #32
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	dd6b      	ble.n	8006e1a <_dtoa_r+0x8e2>
 8006d42:	9b08      	ldr	r3, [sp, #32]
 8006d44:	f1c0 001c 	rsb	r0, r0, #28
 8006d48:	4403      	add	r3, r0
 8006d4a:	4480      	add	r8, r0
 8006d4c:	4406      	add	r6, r0
 8006d4e:	9308      	str	r3, [sp, #32]
 8006d50:	f1b8 0f00 	cmp.w	r8, #0
 8006d54:	dd05      	ble.n	8006d62 <_dtoa_r+0x82a>
 8006d56:	4649      	mov	r1, r9
 8006d58:	4642      	mov	r2, r8
 8006d5a:	4658      	mov	r0, fp
 8006d5c:	f000 fc08 	bl	8007570 <__lshift>
 8006d60:	4681      	mov	r9, r0
 8006d62:	9b08      	ldr	r3, [sp, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd05      	ble.n	8006d74 <_dtoa_r+0x83c>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4658      	mov	r0, fp
 8006d6e:	f000 fbff 	bl	8007570 <__lshift>
 8006d72:	4604      	mov	r4, r0
 8006d74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d059      	beq.n	8006e2e <_dtoa_r+0x8f6>
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f000 fc63 	bl	8007648 <__mcmp>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	da53      	bge.n	8006e2e <_dtoa_r+0x8f6>
 8006d86:	1e7b      	subs	r3, r7, #1
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	220a      	movs	r2, #10
 8006d90:	4658      	mov	r0, fp
 8006d92:	f000 fa41 	bl	8007218 <__multadd>
 8006d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d98:	4681      	mov	r9, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8172 	beq.w	8007084 <_dtoa_r+0xb4c>
 8006da0:	2300      	movs	r3, #0
 8006da2:	4629      	mov	r1, r5
 8006da4:	220a      	movs	r2, #10
 8006da6:	4658      	mov	r0, fp
 8006da8:	f000 fa36 	bl	8007218 <__multadd>
 8006dac:	9b00      	ldr	r3, [sp, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	4605      	mov	r5, r0
 8006db2:	dc67      	bgt.n	8006e84 <_dtoa_r+0x94c>
 8006db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	dc41      	bgt.n	8006e3e <_dtoa_r+0x906>
 8006dba:	e063      	b.n	8006e84 <_dtoa_r+0x94c>
 8006dbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dc2:	e746      	b.n	8006c52 <_dtoa_r+0x71a>
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	1e5c      	subs	r4, r3, #1
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	bfbf      	itttt	lt
 8006dce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006dd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006dd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006dd4:	1ae3      	sublt	r3, r4, r3
 8006dd6:	bfb4      	ite	lt
 8006dd8:	18d2      	addlt	r2, r2, r3
 8006dda:	1b1c      	subge	r4, r3, r4
 8006ddc:	9b07      	ldr	r3, [sp, #28]
 8006dde:	bfbc      	itt	lt
 8006de0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006de2:	2400      	movlt	r4, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfb5      	itete	lt
 8006de8:	eba8 0603 	sublt.w	r6, r8, r3
 8006dec:	9b07      	ldrge	r3, [sp, #28]
 8006dee:	2300      	movlt	r3, #0
 8006df0:	4646      	movge	r6, r8
 8006df2:	e730      	b.n	8006c56 <_dtoa_r+0x71e>
 8006df4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006df6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006df8:	4646      	mov	r6, r8
 8006dfa:	e735      	b.n	8006c68 <_dtoa_r+0x730>
 8006dfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dfe:	e75c      	b.n	8006cba <_dtoa_r+0x782>
 8006e00:	2300      	movs	r3, #0
 8006e02:	e788      	b.n	8006d16 <_dtoa_r+0x7de>
 8006e04:	3fe00000 	.word	0x3fe00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	40140000 	.word	0x40140000
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	e780      	b.n	8006d16 <_dtoa_r+0x7de>
 8006e14:	2300      	movs	r3, #0
 8006e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e18:	e782      	b.n	8006d20 <_dtoa_r+0x7e8>
 8006e1a:	d099      	beq.n	8006d50 <_dtoa_r+0x818>
 8006e1c:	9a08      	ldr	r2, [sp, #32]
 8006e1e:	331c      	adds	r3, #28
 8006e20:	441a      	add	r2, r3
 8006e22:	4498      	add	r8, r3
 8006e24:	441e      	add	r6, r3
 8006e26:	9208      	str	r2, [sp, #32]
 8006e28:	e792      	b.n	8006d50 <_dtoa_r+0x818>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e7f6      	b.n	8006e1c <_dtoa_r+0x8e4>
 8006e2e:	9b07      	ldr	r3, [sp, #28]
 8006e30:	9704      	str	r7, [sp, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dc20      	bgt.n	8006e78 <_dtoa_r+0x940>
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	dd1e      	ble.n	8006e7c <_dtoa_r+0x944>
 8006e3e:	9b00      	ldr	r3, [sp, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f aec0 	bne.w	8006bc6 <_dtoa_r+0x68e>
 8006e46:	4621      	mov	r1, r4
 8006e48:	2205      	movs	r2, #5
 8006e4a:	4658      	mov	r0, fp
 8006e4c:	f000 f9e4 	bl	8007218 <__multadd>
 8006e50:	4601      	mov	r1, r0
 8006e52:	4604      	mov	r4, r0
 8006e54:	4648      	mov	r0, r9
 8006e56:	f000 fbf7 	bl	8007648 <__mcmp>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f77f aeb3 	ble.w	8006bc6 <_dtoa_r+0x68e>
 8006e60:	4656      	mov	r6, sl
 8006e62:	2331      	movs	r3, #49	@ 0x31
 8006e64:	f806 3b01 	strb.w	r3, [r6], #1
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	e6ae      	b.n	8006bce <_dtoa_r+0x696>
 8006e70:	9c07      	ldr	r4, [sp, #28]
 8006e72:	9704      	str	r7, [sp, #16]
 8006e74:	4625      	mov	r5, r4
 8006e76:	e7f3      	b.n	8006e60 <_dtoa_r+0x928>
 8006e78:	9b07      	ldr	r3, [sp, #28]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8104 	beq.w	800708c <_dtoa_r+0xb54>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	dd05      	ble.n	8006e94 <_dtoa_r+0x95c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	f000 fb6f 	bl	8007570 <__lshift>
 8006e92:	4605      	mov	r5, r0
 8006e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05a      	beq.n	8006f50 <_dtoa_r+0xa18>
 8006e9a:	6869      	ldr	r1, [r5, #4]
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f000 f959 	bl	8007154 <_Balloc>
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	b928      	cbnz	r0, 8006eb2 <_dtoa_r+0x97a>
 8006ea6:	4b84      	ldr	r3, [pc, #528]	@ (80070b8 <_dtoa_r+0xb80>)
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006eae:	f7ff bb5a 	b.w	8006566 <_dtoa_r+0x2e>
 8006eb2:	692a      	ldr	r2, [r5, #16]
 8006eb4:	3202      	adds	r2, #2
 8006eb6:	0092      	lsls	r2, r2, #2
 8006eb8:	f105 010c 	add.w	r1, r5, #12
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	f000 ff4d 	bl	8007d5c <memcpy>
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	f000 fb52 	bl	8007570 <__lshift>
 8006ecc:	f10a 0301 	add.w	r3, sl, #1
 8006ed0:	9307      	str	r3, [sp, #28]
 8006ed2:	9b00      	ldr	r3, [sp, #0]
 8006ed4:	4453      	add	r3, sl
 8006ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed8:	9b02      	ldr	r3, [sp, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	462f      	mov	r7, r5
 8006ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	4648      	mov	r0, r9
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	f7ff fa9a 	bl	8006426 <quorem>
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006efa:	4648      	mov	r0, r9
 8006efc:	f000 fba4 	bl	8007648 <__mcmp>
 8006f00:	462a      	mov	r2, r5
 8006f02:	9008      	str	r0, [sp, #32]
 8006f04:	4621      	mov	r1, r4
 8006f06:	4658      	mov	r0, fp
 8006f08:	f000 fbba 	bl	8007680 <__mdiff>
 8006f0c:	68c2      	ldr	r2, [r0, #12]
 8006f0e:	4606      	mov	r6, r0
 8006f10:	bb02      	cbnz	r2, 8006f54 <_dtoa_r+0xa1c>
 8006f12:	4601      	mov	r1, r0
 8006f14:	4648      	mov	r0, r9
 8006f16:	f000 fb97 	bl	8007648 <__mcmp>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4658      	mov	r0, fp
 8006f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f22:	f000 f957 	bl	80071d4 <_Bfree>
 8006f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f2a:	9e07      	ldr	r6, [sp, #28]
 8006f2c:	ea43 0102 	orr.w	r1, r3, r2
 8006f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f32:	4319      	orrs	r1, r3
 8006f34:	d110      	bne.n	8006f58 <_dtoa_r+0xa20>
 8006f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f3a:	d029      	beq.n	8006f90 <_dtoa_r+0xa58>
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dd02      	ble.n	8006f48 <_dtoa_r+0xa10>
 8006f42:	9b02      	ldr	r3, [sp, #8]
 8006f44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f48:	9b00      	ldr	r3, [sp, #0]
 8006f4a:	f883 8000 	strb.w	r8, [r3]
 8006f4e:	e63f      	b.n	8006bd0 <_dtoa_r+0x698>
 8006f50:	4628      	mov	r0, r5
 8006f52:	e7bb      	b.n	8006ecc <_dtoa_r+0x994>
 8006f54:	2201      	movs	r2, #1
 8006f56:	e7e1      	b.n	8006f1c <_dtoa_r+0x9e4>
 8006f58:	9b08      	ldr	r3, [sp, #32]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db04      	blt.n	8006f68 <_dtoa_r+0xa30>
 8006f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f60:	430b      	orrs	r3, r1
 8006f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f64:	430b      	orrs	r3, r1
 8006f66:	d120      	bne.n	8006faa <_dtoa_r+0xa72>
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	dded      	ble.n	8006f48 <_dtoa_r+0xa10>
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4658      	mov	r0, fp
 8006f72:	f000 fafd 	bl	8007570 <__lshift>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4681      	mov	r9, r0
 8006f7a:	f000 fb65 	bl	8007648 <__mcmp>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	dc03      	bgt.n	8006f8a <_dtoa_r+0xa52>
 8006f82:	d1e1      	bne.n	8006f48 <_dtoa_r+0xa10>
 8006f84:	f018 0f01 	tst.w	r8, #1
 8006f88:	d0de      	beq.n	8006f48 <_dtoa_r+0xa10>
 8006f8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f8e:	d1d8      	bne.n	8006f42 <_dtoa_r+0xa0a>
 8006f90:	9a00      	ldr	r2, [sp, #0]
 8006f92:	2339      	movs	r3, #57	@ 0x39
 8006f94:	7013      	strb	r3, [r2, #0]
 8006f96:	4633      	mov	r3, r6
 8006f98:	461e      	mov	r6, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fa0:	2a39      	cmp	r2, #57	@ 0x39
 8006fa2:	d052      	beq.n	800704a <_dtoa_r+0xb12>
 8006fa4:	3201      	adds	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e612      	b.n	8006bd0 <_dtoa_r+0x698>
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	dd07      	ble.n	8006fbe <_dtoa_r+0xa86>
 8006fae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fb2:	d0ed      	beq.n	8006f90 <_dtoa_r+0xa58>
 8006fb4:	9a00      	ldr	r2, [sp, #0]
 8006fb6:	f108 0301 	add.w	r3, r8, #1
 8006fba:	7013      	strb	r3, [r2, #0]
 8006fbc:	e608      	b.n	8006bd0 <_dtoa_r+0x698>
 8006fbe:	9b07      	ldr	r3, [sp, #28]
 8006fc0:	9a07      	ldr	r2, [sp, #28]
 8006fc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d028      	beq.n	800701e <_dtoa_r+0xae6>
 8006fcc:	4649      	mov	r1, r9
 8006fce:	2300      	movs	r3, #0
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 f920 	bl	8007218 <__multadd>
 8006fd8:	42af      	cmp	r7, r5
 8006fda:	4681      	mov	r9, r0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	f04f 020a 	mov.w	r2, #10
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	d107      	bne.n	8006ffa <_dtoa_r+0xac2>
 8006fea:	f000 f915 	bl	8007218 <__multadd>
 8006fee:	4607      	mov	r7, r0
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	9307      	str	r3, [sp, #28]
 8006ff8:	e774      	b.n	8006ee4 <_dtoa_r+0x9ac>
 8006ffa:	f000 f90d 	bl	8007218 <__multadd>
 8006ffe:	4629      	mov	r1, r5
 8007000:	4607      	mov	r7, r0
 8007002:	2300      	movs	r3, #0
 8007004:	220a      	movs	r2, #10
 8007006:	4658      	mov	r0, fp
 8007008:	f000 f906 	bl	8007218 <__multadd>
 800700c:	4605      	mov	r5, r0
 800700e:	e7f0      	b.n	8006ff2 <_dtoa_r+0xaba>
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bfcc      	ite	gt
 8007016:	461e      	movgt	r6, r3
 8007018:	2601      	movle	r6, #1
 800701a:	4456      	add	r6, sl
 800701c:	2700      	movs	r7, #0
 800701e:	4649      	mov	r1, r9
 8007020:	2201      	movs	r2, #1
 8007022:	4658      	mov	r0, fp
 8007024:	f000 faa4 	bl	8007570 <__lshift>
 8007028:	4621      	mov	r1, r4
 800702a:	4681      	mov	r9, r0
 800702c:	f000 fb0c 	bl	8007648 <__mcmp>
 8007030:	2800      	cmp	r0, #0
 8007032:	dcb0      	bgt.n	8006f96 <_dtoa_r+0xa5e>
 8007034:	d102      	bne.n	800703c <_dtoa_r+0xb04>
 8007036:	f018 0f01 	tst.w	r8, #1
 800703a:	d1ac      	bne.n	8006f96 <_dtoa_r+0xa5e>
 800703c:	4633      	mov	r3, r6
 800703e:	461e      	mov	r6, r3
 8007040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007044:	2a30      	cmp	r2, #48	@ 0x30
 8007046:	d0fa      	beq.n	800703e <_dtoa_r+0xb06>
 8007048:	e5c2      	b.n	8006bd0 <_dtoa_r+0x698>
 800704a:	459a      	cmp	sl, r3
 800704c:	d1a4      	bne.n	8006f98 <_dtoa_r+0xa60>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	2331      	movs	r3, #49	@ 0x31
 8007056:	f88a 3000 	strb.w	r3, [sl]
 800705a:	e5b9      	b.n	8006bd0 <_dtoa_r+0x698>
 800705c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800705e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070bc <_dtoa_r+0xb84>
 8007062:	b11b      	cbz	r3, 800706c <_dtoa_r+0xb34>
 8007064:	f10a 0308 	add.w	r3, sl, #8
 8007068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	4650      	mov	r0, sl
 800706e:	b019      	add	sp, #100	@ 0x64
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007076:	2b01      	cmp	r3, #1
 8007078:	f77f ae37 	ble.w	8006cea <_dtoa_r+0x7b2>
 800707c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800707e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007080:	2001      	movs	r0, #1
 8007082:	e655      	b.n	8006d30 <_dtoa_r+0x7f8>
 8007084:	9b00      	ldr	r3, [sp, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f77f aed6 	ble.w	8006e38 <_dtoa_r+0x900>
 800708c:	4656      	mov	r6, sl
 800708e:	4621      	mov	r1, r4
 8007090:	4648      	mov	r0, r9
 8007092:	f7ff f9c8 	bl	8006426 <quorem>
 8007096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800709a:	f806 8b01 	strb.w	r8, [r6], #1
 800709e:	9b00      	ldr	r3, [sp, #0]
 80070a0:	eba6 020a 	sub.w	r2, r6, sl
 80070a4:	4293      	cmp	r3, r2
 80070a6:	ddb3      	ble.n	8007010 <_dtoa_r+0xad8>
 80070a8:	4649      	mov	r1, r9
 80070aa:	2300      	movs	r3, #0
 80070ac:	220a      	movs	r2, #10
 80070ae:	4658      	mov	r0, fp
 80070b0:	f000 f8b2 	bl	8007218 <__multadd>
 80070b4:	4681      	mov	r9, r0
 80070b6:	e7ea      	b.n	800708e <_dtoa_r+0xb56>
 80070b8:	080081e8 	.word	0x080081e8
 80070bc:	0800816c 	.word	0x0800816c

080070c0 <_free_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4605      	mov	r5, r0
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d041      	beq.n	800714c <_free_r+0x8c>
 80070c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070cc:	1f0c      	subs	r4, r1, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bfb8      	it	lt
 80070d2:	18e4      	addlt	r4, r4, r3
 80070d4:	f7fe fb82 	bl	80057dc <__malloc_lock>
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <_free_r+0x90>)
 80070da:	6813      	ldr	r3, [r2, #0]
 80070dc:	b933      	cbnz	r3, 80070ec <_free_r+0x2c>
 80070de:	6063      	str	r3, [r4, #4]
 80070e0:	6014      	str	r4, [r2, #0]
 80070e2:	4628      	mov	r0, r5
 80070e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e8:	f7fe bb7e 	b.w	80057e8 <__malloc_unlock>
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d908      	bls.n	8007102 <_free_r+0x42>
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	1821      	adds	r1, r4, r0
 80070f4:	428b      	cmp	r3, r1
 80070f6:	bf01      	itttt	eq
 80070f8:	6819      	ldreq	r1, [r3, #0]
 80070fa:	685b      	ldreq	r3, [r3, #4]
 80070fc:	1809      	addeq	r1, r1, r0
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	e7ed      	b.n	80070de <_free_r+0x1e>
 8007102:	461a      	mov	r2, r3
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	b10b      	cbz	r3, 800710c <_free_r+0x4c>
 8007108:	42a3      	cmp	r3, r4
 800710a:	d9fa      	bls.n	8007102 <_free_r+0x42>
 800710c:	6811      	ldr	r1, [r2, #0]
 800710e:	1850      	adds	r0, r2, r1
 8007110:	42a0      	cmp	r0, r4
 8007112:	d10b      	bne.n	800712c <_free_r+0x6c>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	4401      	add	r1, r0
 8007118:	1850      	adds	r0, r2, r1
 800711a:	4283      	cmp	r3, r0
 800711c:	6011      	str	r1, [r2, #0]
 800711e:	d1e0      	bne.n	80070e2 <_free_r+0x22>
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	6053      	str	r3, [r2, #4]
 8007126:	4408      	add	r0, r1
 8007128:	6010      	str	r0, [r2, #0]
 800712a:	e7da      	b.n	80070e2 <_free_r+0x22>
 800712c:	d902      	bls.n	8007134 <_free_r+0x74>
 800712e:	230c      	movs	r3, #12
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	e7d6      	b.n	80070e2 <_free_r+0x22>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	1821      	adds	r1, r4, r0
 8007138:	428b      	cmp	r3, r1
 800713a:	bf04      	itt	eq
 800713c:	6819      	ldreq	r1, [r3, #0]
 800713e:	685b      	ldreq	r3, [r3, #4]
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	bf04      	itt	eq
 8007144:	1809      	addeq	r1, r1, r0
 8007146:	6021      	streq	r1, [r4, #0]
 8007148:	6054      	str	r4, [r2, #4]
 800714a:	e7ca      	b.n	80070e2 <_free_r+0x22>
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	200004a4 	.word	0x200004a4

08007154 <_Balloc>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	69c6      	ldr	r6, [r0, #28]
 8007158:	4604      	mov	r4, r0
 800715a:	460d      	mov	r5, r1
 800715c:	b976      	cbnz	r6, 800717c <_Balloc+0x28>
 800715e:	2010      	movs	r0, #16
 8007160:	f7fe fa92 	bl	8005688 <malloc>
 8007164:	4602      	mov	r2, r0
 8007166:	61e0      	str	r0, [r4, #28]
 8007168:	b920      	cbnz	r0, 8007174 <_Balloc+0x20>
 800716a:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <_Balloc+0x78>)
 800716c:	4818      	ldr	r0, [pc, #96]	@ (80071d0 <_Balloc+0x7c>)
 800716e:	216b      	movs	r1, #107	@ 0x6b
 8007170:	f000 fe02 	bl	8007d78 <__assert_func>
 8007174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007178:	6006      	str	r6, [r0, #0]
 800717a:	60c6      	str	r6, [r0, #12]
 800717c:	69e6      	ldr	r6, [r4, #28]
 800717e:	68f3      	ldr	r3, [r6, #12]
 8007180:	b183      	cbz	r3, 80071a4 <_Balloc+0x50>
 8007182:	69e3      	ldr	r3, [r4, #28]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800718a:	b9b8      	cbnz	r0, 80071bc <_Balloc+0x68>
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f605 	lsl.w	r6, r1, r5
 8007192:	1d72      	adds	r2, r6, #5
 8007194:	0092      	lsls	r2, r2, #2
 8007196:	4620      	mov	r0, r4
 8007198:	f7fe fa62 	bl	8005660 <_calloc_r>
 800719c:	b160      	cbz	r0, 80071b8 <_Balloc+0x64>
 800719e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071a2:	e00e      	b.n	80071c2 <_Balloc+0x6e>
 80071a4:	2221      	movs	r2, #33	@ 0x21
 80071a6:	2104      	movs	r1, #4
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7fe fa59 	bl	8005660 <_calloc_r>
 80071ae:	69e3      	ldr	r3, [r4, #28]
 80071b0:	60f0      	str	r0, [r6, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e4      	bne.n	8007182 <_Balloc+0x2e>
 80071b8:	2000      	movs	r0, #0
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	6802      	ldr	r2, [r0, #0]
 80071be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071c2:	2300      	movs	r3, #0
 80071c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071c8:	e7f7      	b.n	80071ba <_Balloc+0x66>
 80071ca:	bf00      	nop
 80071cc:	08008179 	.word	0x08008179
 80071d0:	080081f9 	.word	0x080081f9

080071d4 <_Bfree>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	69c6      	ldr	r6, [r0, #28]
 80071d8:	4605      	mov	r5, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	b976      	cbnz	r6, 80071fc <_Bfree+0x28>
 80071de:	2010      	movs	r0, #16
 80071e0:	f7fe fa52 	bl	8005688 <malloc>
 80071e4:	4602      	mov	r2, r0
 80071e6:	61e8      	str	r0, [r5, #28]
 80071e8:	b920      	cbnz	r0, 80071f4 <_Bfree+0x20>
 80071ea:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <_Bfree+0x3c>)
 80071ec:	4809      	ldr	r0, [pc, #36]	@ (8007214 <_Bfree+0x40>)
 80071ee:	218f      	movs	r1, #143	@ 0x8f
 80071f0:	f000 fdc2 	bl	8007d78 <__assert_func>
 80071f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f8:	6006      	str	r6, [r0, #0]
 80071fa:	60c6      	str	r6, [r0, #12]
 80071fc:	b13c      	cbz	r4, 800720e <_Bfree+0x3a>
 80071fe:	69eb      	ldr	r3, [r5, #28]
 8007200:	6862      	ldr	r2, [r4, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007208:	6021      	str	r1, [r4, #0]
 800720a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	08008179 	.word	0x08008179
 8007214:	080081f9 	.word	0x080081f9

08007218 <__multadd>:
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	690d      	ldr	r5, [r1, #16]
 800721e:	4607      	mov	r7, r0
 8007220:	460c      	mov	r4, r1
 8007222:	461e      	mov	r6, r3
 8007224:	f101 0c14 	add.w	ip, r1, #20
 8007228:	2000      	movs	r0, #0
 800722a:	f8dc 3000 	ldr.w	r3, [ip]
 800722e:	b299      	uxth	r1, r3
 8007230:	fb02 6101 	mla	r1, r2, r1, r6
 8007234:	0c1e      	lsrs	r6, r3, #16
 8007236:	0c0b      	lsrs	r3, r1, #16
 8007238:	fb02 3306 	mla	r3, r2, r6, r3
 800723c:	b289      	uxth	r1, r1
 800723e:	3001      	adds	r0, #1
 8007240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007244:	4285      	cmp	r5, r0
 8007246:	f84c 1b04 	str.w	r1, [ip], #4
 800724a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800724e:	dcec      	bgt.n	800722a <__multadd+0x12>
 8007250:	b30e      	cbz	r6, 8007296 <__multadd+0x7e>
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	42ab      	cmp	r3, r5
 8007256:	dc19      	bgt.n	800728c <__multadd+0x74>
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	4638      	mov	r0, r7
 800725c:	3101      	adds	r1, #1
 800725e:	f7ff ff79 	bl	8007154 <_Balloc>
 8007262:	4680      	mov	r8, r0
 8007264:	b928      	cbnz	r0, 8007272 <__multadd+0x5a>
 8007266:	4602      	mov	r2, r0
 8007268:	4b0c      	ldr	r3, [pc, #48]	@ (800729c <__multadd+0x84>)
 800726a:	480d      	ldr	r0, [pc, #52]	@ (80072a0 <__multadd+0x88>)
 800726c:	21ba      	movs	r1, #186	@ 0xba
 800726e:	f000 fd83 	bl	8007d78 <__assert_func>
 8007272:	6922      	ldr	r2, [r4, #16]
 8007274:	3202      	adds	r2, #2
 8007276:	f104 010c 	add.w	r1, r4, #12
 800727a:	0092      	lsls	r2, r2, #2
 800727c:	300c      	adds	r0, #12
 800727e:	f000 fd6d 	bl	8007d5c <memcpy>
 8007282:	4621      	mov	r1, r4
 8007284:	4638      	mov	r0, r7
 8007286:	f7ff ffa5 	bl	80071d4 <_Bfree>
 800728a:	4644      	mov	r4, r8
 800728c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007290:	3501      	adds	r5, #1
 8007292:	615e      	str	r6, [r3, #20]
 8007294:	6125      	str	r5, [r4, #16]
 8007296:	4620      	mov	r0, r4
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	080081e8 	.word	0x080081e8
 80072a0:	080081f9 	.word	0x080081f9

080072a4 <__hi0bits>:
 80072a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072a8:	4603      	mov	r3, r0
 80072aa:	bf36      	itet	cc
 80072ac:	0403      	lslcc	r3, r0, #16
 80072ae:	2000      	movcs	r0, #0
 80072b0:	2010      	movcc	r0, #16
 80072b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072b6:	bf3c      	itt	cc
 80072b8:	021b      	lslcc	r3, r3, #8
 80072ba:	3008      	addcc	r0, #8
 80072bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c0:	bf3c      	itt	cc
 80072c2:	011b      	lslcc	r3, r3, #4
 80072c4:	3004      	addcc	r0, #4
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ca:	bf3c      	itt	cc
 80072cc:	009b      	lslcc	r3, r3, #2
 80072ce:	3002      	addcc	r0, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db05      	blt.n	80072e0 <__hi0bits+0x3c>
 80072d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072d8:	f100 0001 	add.w	r0, r0, #1
 80072dc:	bf08      	it	eq
 80072de:	2020      	moveq	r0, #32
 80072e0:	4770      	bx	lr

080072e2 <__lo0bits>:
 80072e2:	6803      	ldr	r3, [r0, #0]
 80072e4:	4602      	mov	r2, r0
 80072e6:	f013 0007 	ands.w	r0, r3, #7
 80072ea:	d00b      	beq.n	8007304 <__lo0bits+0x22>
 80072ec:	07d9      	lsls	r1, r3, #31
 80072ee:	d421      	bmi.n	8007334 <__lo0bits+0x52>
 80072f0:	0798      	lsls	r0, r3, #30
 80072f2:	bf49      	itett	mi
 80072f4:	085b      	lsrmi	r3, r3, #1
 80072f6:	089b      	lsrpl	r3, r3, #2
 80072f8:	2001      	movmi	r0, #1
 80072fa:	6013      	strmi	r3, [r2, #0]
 80072fc:	bf5c      	itt	pl
 80072fe:	6013      	strpl	r3, [r2, #0]
 8007300:	2002      	movpl	r0, #2
 8007302:	4770      	bx	lr
 8007304:	b299      	uxth	r1, r3
 8007306:	b909      	cbnz	r1, 800730c <__lo0bits+0x2a>
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	2010      	movs	r0, #16
 800730c:	b2d9      	uxtb	r1, r3
 800730e:	b909      	cbnz	r1, 8007314 <__lo0bits+0x32>
 8007310:	3008      	adds	r0, #8
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	0719      	lsls	r1, r3, #28
 8007316:	bf04      	itt	eq
 8007318:	091b      	lsreq	r3, r3, #4
 800731a:	3004      	addeq	r0, #4
 800731c:	0799      	lsls	r1, r3, #30
 800731e:	bf04      	itt	eq
 8007320:	089b      	lsreq	r3, r3, #2
 8007322:	3002      	addeq	r0, #2
 8007324:	07d9      	lsls	r1, r3, #31
 8007326:	d403      	bmi.n	8007330 <__lo0bits+0x4e>
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	f100 0001 	add.w	r0, r0, #1
 800732e:	d003      	beq.n	8007338 <__lo0bits+0x56>
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4770      	bx	lr
 8007334:	2000      	movs	r0, #0
 8007336:	4770      	bx	lr
 8007338:	2020      	movs	r0, #32
 800733a:	4770      	bx	lr

0800733c <__i2b>:
 800733c:	b510      	push	{r4, lr}
 800733e:	460c      	mov	r4, r1
 8007340:	2101      	movs	r1, #1
 8007342:	f7ff ff07 	bl	8007154 <_Balloc>
 8007346:	4602      	mov	r2, r0
 8007348:	b928      	cbnz	r0, 8007356 <__i2b+0x1a>
 800734a:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <__i2b+0x24>)
 800734c:	4805      	ldr	r0, [pc, #20]	@ (8007364 <__i2b+0x28>)
 800734e:	f240 1145 	movw	r1, #325	@ 0x145
 8007352:	f000 fd11 	bl	8007d78 <__assert_func>
 8007356:	2301      	movs	r3, #1
 8007358:	6144      	str	r4, [r0, #20]
 800735a:	6103      	str	r3, [r0, #16]
 800735c:	bd10      	pop	{r4, pc}
 800735e:	bf00      	nop
 8007360:	080081e8 	.word	0x080081e8
 8007364:	080081f9 	.word	0x080081f9

08007368 <__multiply>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	4614      	mov	r4, r2
 800736e:	690a      	ldr	r2, [r1, #16]
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	bfa8      	it	ge
 8007376:	4623      	movge	r3, r4
 8007378:	460f      	mov	r7, r1
 800737a:	bfa4      	itt	ge
 800737c:	460c      	movge	r4, r1
 800737e:	461f      	movge	r7, r3
 8007380:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007384:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	6861      	ldr	r1, [r4, #4]
 800738c:	eb0a 0609 	add.w	r6, sl, r9
 8007390:	42b3      	cmp	r3, r6
 8007392:	b085      	sub	sp, #20
 8007394:	bfb8      	it	lt
 8007396:	3101      	addlt	r1, #1
 8007398:	f7ff fedc 	bl	8007154 <_Balloc>
 800739c:	b930      	cbnz	r0, 80073ac <__multiply+0x44>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b44      	ldr	r3, [pc, #272]	@ (80074b4 <__multiply+0x14c>)
 80073a2:	4845      	ldr	r0, [pc, #276]	@ (80074b8 <__multiply+0x150>)
 80073a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073a8:	f000 fce6 	bl	8007d78 <__assert_func>
 80073ac:	f100 0514 	add.w	r5, r0, #20
 80073b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073b4:	462b      	mov	r3, r5
 80073b6:	2200      	movs	r2, #0
 80073b8:	4543      	cmp	r3, r8
 80073ba:	d321      	bcc.n	8007400 <__multiply+0x98>
 80073bc:	f107 0114 	add.w	r1, r7, #20
 80073c0:	f104 0214 	add.w	r2, r4, #20
 80073c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	1b13      	subs	r3, r2, r4
 80073d0:	3b15      	subs	r3, #21
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	3304      	adds	r3, #4
 80073d8:	f104 0715 	add.w	r7, r4, #21
 80073dc:	42ba      	cmp	r2, r7
 80073de:	bf38      	it	cc
 80073e0:	2304      	movcc	r3, #4
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	9b02      	ldr	r3, [sp, #8]
 80073e6:	9103      	str	r1, [sp, #12]
 80073e8:	428b      	cmp	r3, r1
 80073ea:	d80c      	bhi.n	8007406 <__multiply+0x9e>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	dd03      	ble.n	80073f8 <__multiply+0x90>
 80073f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05b      	beq.n	80074b0 <__multiply+0x148>
 80073f8:	6106      	str	r6, [r0, #16]
 80073fa:	b005      	add	sp, #20
 80073fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007400:	f843 2b04 	str.w	r2, [r3], #4
 8007404:	e7d8      	b.n	80073b8 <__multiply+0x50>
 8007406:	f8b1 a000 	ldrh.w	sl, [r1]
 800740a:	f1ba 0f00 	cmp.w	sl, #0
 800740e:	d024      	beq.n	800745a <__multiply+0xf2>
 8007410:	f104 0e14 	add.w	lr, r4, #20
 8007414:	46a9      	mov	r9, r5
 8007416:	f04f 0c00 	mov.w	ip, #0
 800741a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800741e:	f8d9 3000 	ldr.w	r3, [r9]
 8007422:	fa1f fb87 	uxth.w	fp, r7
 8007426:	b29b      	uxth	r3, r3
 8007428:	fb0a 330b 	mla	r3, sl, fp, r3
 800742c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007430:	f8d9 7000 	ldr.w	r7, [r9]
 8007434:	4463      	add	r3, ip
 8007436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800743a:	fb0a c70b 	mla	r7, sl, fp, ip
 800743e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007442:	b29b      	uxth	r3, r3
 8007444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007448:	4572      	cmp	r2, lr
 800744a:	f849 3b04 	str.w	r3, [r9], #4
 800744e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007452:	d8e2      	bhi.n	800741a <__multiply+0xb2>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	f845 c003 	str.w	ip, [r5, r3]
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007460:	3104      	adds	r1, #4
 8007462:	f1b9 0f00 	cmp.w	r9, #0
 8007466:	d021      	beq.n	80074ac <__multiply+0x144>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	f104 0c14 	add.w	ip, r4, #20
 800746e:	46ae      	mov	lr, r5
 8007470:	f04f 0a00 	mov.w	sl, #0
 8007474:	f8bc b000 	ldrh.w	fp, [ip]
 8007478:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800747c:	fb09 770b 	mla	r7, r9, fp, r7
 8007480:	4457      	add	r7, sl
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007488:	f84e 3b04 	str.w	r3, [lr], #4
 800748c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007494:	f8be 3000 	ldrh.w	r3, [lr]
 8007498:	fb09 330a 	mla	r3, r9, sl, r3
 800749c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074a0:	4562      	cmp	r2, ip
 80074a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074a6:	d8e5      	bhi.n	8007474 <__multiply+0x10c>
 80074a8:	9f01      	ldr	r7, [sp, #4]
 80074aa:	51eb      	str	r3, [r5, r7]
 80074ac:	3504      	adds	r5, #4
 80074ae:	e799      	b.n	80073e4 <__multiply+0x7c>
 80074b0:	3e01      	subs	r6, #1
 80074b2:	e79b      	b.n	80073ec <__multiply+0x84>
 80074b4:	080081e8 	.word	0x080081e8
 80074b8:	080081f9 	.word	0x080081f9

080074bc <__pow5mult>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4615      	mov	r5, r2
 80074c2:	f012 0203 	ands.w	r2, r2, #3
 80074c6:	4607      	mov	r7, r0
 80074c8:	460e      	mov	r6, r1
 80074ca:	d007      	beq.n	80074dc <__pow5mult+0x20>
 80074cc:	4c25      	ldr	r4, [pc, #148]	@ (8007564 <__pow5mult+0xa8>)
 80074ce:	3a01      	subs	r2, #1
 80074d0:	2300      	movs	r3, #0
 80074d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d6:	f7ff fe9f 	bl	8007218 <__multadd>
 80074da:	4606      	mov	r6, r0
 80074dc:	10ad      	asrs	r5, r5, #2
 80074de:	d03d      	beq.n	800755c <__pow5mult+0xa0>
 80074e0:	69fc      	ldr	r4, [r7, #28]
 80074e2:	b97c      	cbnz	r4, 8007504 <__pow5mult+0x48>
 80074e4:	2010      	movs	r0, #16
 80074e6:	f7fe f8cf 	bl	8005688 <malloc>
 80074ea:	4602      	mov	r2, r0
 80074ec:	61f8      	str	r0, [r7, #28]
 80074ee:	b928      	cbnz	r0, 80074fc <__pow5mult+0x40>
 80074f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <__pow5mult+0xac>)
 80074f2:	481e      	ldr	r0, [pc, #120]	@ (800756c <__pow5mult+0xb0>)
 80074f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074f8:	f000 fc3e 	bl	8007d78 <__assert_func>
 80074fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007500:	6004      	str	r4, [r0, #0]
 8007502:	60c4      	str	r4, [r0, #12]
 8007504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800750c:	b94c      	cbnz	r4, 8007522 <__pow5mult+0x66>
 800750e:	f240 2171 	movw	r1, #625	@ 0x271
 8007512:	4638      	mov	r0, r7
 8007514:	f7ff ff12 	bl	800733c <__i2b>
 8007518:	2300      	movs	r3, #0
 800751a:	f8c8 0008 	str.w	r0, [r8, #8]
 800751e:	4604      	mov	r4, r0
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	07eb      	lsls	r3, r5, #31
 8007528:	d50a      	bpl.n	8007540 <__pow5mult+0x84>
 800752a:	4631      	mov	r1, r6
 800752c:	4622      	mov	r2, r4
 800752e:	4638      	mov	r0, r7
 8007530:	f7ff ff1a 	bl	8007368 <__multiply>
 8007534:	4631      	mov	r1, r6
 8007536:	4680      	mov	r8, r0
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff fe4b 	bl	80071d4 <_Bfree>
 800753e:	4646      	mov	r6, r8
 8007540:	106d      	asrs	r5, r5, #1
 8007542:	d00b      	beq.n	800755c <__pow5mult+0xa0>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	b938      	cbnz	r0, 8007558 <__pow5mult+0x9c>
 8007548:	4622      	mov	r2, r4
 800754a:	4621      	mov	r1, r4
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff0b 	bl	8007368 <__multiply>
 8007552:	6020      	str	r0, [r4, #0]
 8007554:	f8c0 9000 	str.w	r9, [r0]
 8007558:	4604      	mov	r4, r0
 800755a:	e7e4      	b.n	8007526 <__pow5mult+0x6a>
 800755c:	4630      	mov	r0, r6
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	bf00      	nop
 8007564:	08008254 	.word	0x08008254
 8007568:	08008179 	.word	0x08008179
 800756c:	080081f9 	.word	0x080081f9

08007570 <__lshift>:
 8007570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	460c      	mov	r4, r1
 8007576:	6849      	ldr	r1, [r1, #4]
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	4607      	mov	r7, r0
 8007582:	4691      	mov	r9, r2
 8007584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007588:	f108 0601 	add.w	r6, r8, #1
 800758c:	42b3      	cmp	r3, r6
 800758e:	db0b      	blt.n	80075a8 <__lshift+0x38>
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff fddf 	bl	8007154 <_Balloc>
 8007596:	4605      	mov	r5, r0
 8007598:	b948      	cbnz	r0, 80075ae <__lshift+0x3e>
 800759a:	4602      	mov	r2, r0
 800759c:	4b28      	ldr	r3, [pc, #160]	@ (8007640 <__lshift+0xd0>)
 800759e:	4829      	ldr	r0, [pc, #164]	@ (8007644 <__lshift+0xd4>)
 80075a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075a4:	f000 fbe8 	bl	8007d78 <__assert_func>
 80075a8:	3101      	adds	r1, #1
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	e7ee      	b.n	800758c <__lshift+0x1c>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f100 0114 	add.w	r1, r0, #20
 80075b4:	f100 0210 	add.w	r2, r0, #16
 80075b8:	4618      	mov	r0, r3
 80075ba:	4553      	cmp	r3, sl
 80075bc:	db33      	blt.n	8007626 <__lshift+0xb6>
 80075be:	6920      	ldr	r0, [r4, #16]
 80075c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c4:	f104 0314 	add.w	r3, r4, #20
 80075c8:	f019 091f 	ands.w	r9, r9, #31
 80075cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d4:	d02b      	beq.n	800762e <__lshift+0xbe>
 80075d6:	f1c9 0e20 	rsb	lr, r9, #32
 80075da:	468a      	mov	sl, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	fa00 f009 	lsl.w	r0, r0, r9
 80075e4:	4310      	orrs	r0, r2
 80075e6:	f84a 0b04 	str.w	r0, [sl], #4
 80075ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ee:	459c      	cmp	ip, r3
 80075f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80075f4:	d8f3      	bhi.n	80075de <__lshift+0x6e>
 80075f6:	ebac 0304 	sub.w	r3, ip, r4
 80075fa:	3b15      	subs	r3, #21
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	3304      	adds	r3, #4
 8007602:	f104 0015 	add.w	r0, r4, #21
 8007606:	4584      	cmp	ip, r0
 8007608:	bf38      	it	cc
 800760a:	2304      	movcc	r3, #4
 800760c:	50ca      	str	r2, [r1, r3]
 800760e:	b10a      	cbz	r2, 8007614 <__lshift+0xa4>
 8007610:	f108 0602 	add.w	r6, r8, #2
 8007614:	3e01      	subs	r6, #1
 8007616:	4638      	mov	r0, r7
 8007618:	612e      	str	r6, [r5, #16]
 800761a:	4621      	mov	r1, r4
 800761c:	f7ff fdda 	bl	80071d4 <_Bfree>
 8007620:	4628      	mov	r0, r5
 8007622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007626:	f842 0f04 	str.w	r0, [r2, #4]!
 800762a:	3301      	adds	r3, #1
 800762c:	e7c5      	b.n	80075ba <__lshift+0x4a>
 800762e:	3904      	subs	r1, #4
 8007630:	f853 2b04 	ldr.w	r2, [r3], #4
 8007634:	f841 2f04 	str.w	r2, [r1, #4]!
 8007638:	459c      	cmp	ip, r3
 800763a:	d8f9      	bhi.n	8007630 <__lshift+0xc0>
 800763c:	e7ea      	b.n	8007614 <__lshift+0xa4>
 800763e:	bf00      	nop
 8007640:	080081e8 	.word	0x080081e8
 8007644:	080081f9 	.word	0x080081f9

08007648 <__mcmp>:
 8007648:	690a      	ldr	r2, [r1, #16]
 800764a:	4603      	mov	r3, r0
 800764c:	6900      	ldr	r0, [r0, #16]
 800764e:	1a80      	subs	r0, r0, r2
 8007650:	b530      	push	{r4, r5, lr}
 8007652:	d10e      	bne.n	8007672 <__mcmp+0x2a>
 8007654:	3314      	adds	r3, #20
 8007656:	3114      	adds	r1, #20
 8007658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800765c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007668:	4295      	cmp	r5, r2
 800766a:	d003      	beq.n	8007674 <__mcmp+0x2c>
 800766c:	d205      	bcs.n	800767a <__mcmp+0x32>
 800766e:	f04f 30ff 	mov.w	r0, #4294967295
 8007672:	bd30      	pop	{r4, r5, pc}
 8007674:	42a3      	cmp	r3, r4
 8007676:	d3f3      	bcc.n	8007660 <__mcmp+0x18>
 8007678:	e7fb      	b.n	8007672 <__mcmp+0x2a>
 800767a:	2001      	movs	r0, #1
 800767c:	e7f9      	b.n	8007672 <__mcmp+0x2a>
	...

08007680 <__mdiff>:
 8007680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4689      	mov	r9, r1
 8007686:	4606      	mov	r6, r0
 8007688:	4611      	mov	r1, r2
 800768a:	4648      	mov	r0, r9
 800768c:	4614      	mov	r4, r2
 800768e:	f7ff ffdb 	bl	8007648 <__mcmp>
 8007692:	1e05      	subs	r5, r0, #0
 8007694:	d112      	bne.n	80076bc <__mdiff+0x3c>
 8007696:	4629      	mov	r1, r5
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff fd5b 	bl	8007154 <_Balloc>
 800769e:	4602      	mov	r2, r0
 80076a0:	b928      	cbnz	r0, 80076ae <__mdiff+0x2e>
 80076a2:	4b3f      	ldr	r3, [pc, #252]	@ (80077a0 <__mdiff+0x120>)
 80076a4:	f240 2137 	movw	r1, #567	@ 0x237
 80076a8:	483e      	ldr	r0, [pc, #248]	@ (80077a4 <__mdiff+0x124>)
 80076aa:	f000 fb65 	bl	8007d78 <__assert_func>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076b4:	4610      	mov	r0, r2
 80076b6:	b003      	add	sp, #12
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	bfbc      	itt	lt
 80076be:	464b      	movlt	r3, r9
 80076c0:	46a1      	movlt	r9, r4
 80076c2:	4630      	mov	r0, r6
 80076c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c8:	bfba      	itte	lt
 80076ca:	461c      	movlt	r4, r3
 80076cc:	2501      	movlt	r5, #1
 80076ce:	2500      	movge	r5, #0
 80076d0:	f7ff fd40 	bl	8007154 <_Balloc>
 80076d4:	4602      	mov	r2, r0
 80076d6:	b918      	cbnz	r0, 80076e0 <__mdiff+0x60>
 80076d8:	4b31      	ldr	r3, [pc, #196]	@ (80077a0 <__mdiff+0x120>)
 80076da:	f240 2145 	movw	r1, #581	@ 0x245
 80076de:	e7e3      	b.n	80076a8 <__mdiff+0x28>
 80076e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076e4:	6926      	ldr	r6, [r4, #16]
 80076e6:	60c5      	str	r5, [r0, #12]
 80076e8:	f109 0310 	add.w	r3, r9, #16
 80076ec:	f109 0514 	add.w	r5, r9, #20
 80076f0:	f104 0e14 	add.w	lr, r4, #20
 80076f4:	f100 0b14 	add.w	fp, r0, #20
 80076f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	46d9      	mov	r9, fp
 8007704:	f04f 0c00 	mov.w	ip, #0
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800770e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	fa1f f38a 	uxth.w	r3, sl
 8007718:	4619      	mov	r1, r3
 800771a:	b283      	uxth	r3, r0
 800771c:	1acb      	subs	r3, r1, r3
 800771e:	0c00      	lsrs	r0, r0, #16
 8007720:	4463      	add	r3, ip
 8007722:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007726:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800772a:	b29b      	uxth	r3, r3
 800772c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007730:	4576      	cmp	r6, lr
 8007732:	f849 3b04 	str.w	r3, [r9], #4
 8007736:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800773a:	d8e5      	bhi.n	8007708 <__mdiff+0x88>
 800773c:	1b33      	subs	r3, r6, r4
 800773e:	3b15      	subs	r3, #21
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	3415      	adds	r4, #21
 8007746:	3304      	adds	r3, #4
 8007748:	42a6      	cmp	r6, r4
 800774a:	bf38      	it	cc
 800774c:	2304      	movcc	r3, #4
 800774e:	441d      	add	r5, r3
 8007750:	445b      	add	r3, fp
 8007752:	461e      	mov	r6, r3
 8007754:	462c      	mov	r4, r5
 8007756:	4544      	cmp	r4, r8
 8007758:	d30e      	bcc.n	8007778 <__mdiff+0xf8>
 800775a:	f108 0103 	add.w	r1, r8, #3
 800775e:	1b49      	subs	r1, r1, r5
 8007760:	f021 0103 	bic.w	r1, r1, #3
 8007764:	3d03      	subs	r5, #3
 8007766:	45a8      	cmp	r8, r5
 8007768:	bf38      	it	cc
 800776a:	2100      	movcc	r1, #0
 800776c:	440b      	add	r3, r1
 800776e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007772:	b191      	cbz	r1, 800779a <__mdiff+0x11a>
 8007774:	6117      	str	r7, [r2, #16]
 8007776:	e79d      	b.n	80076b4 <__mdiff+0x34>
 8007778:	f854 1b04 	ldr.w	r1, [r4], #4
 800777c:	46e6      	mov	lr, ip
 800777e:	0c08      	lsrs	r0, r1, #16
 8007780:	fa1c fc81 	uxtah	ip, ip, r1
 8007784:	4471      	add	r1, lr
 8007786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800778a:	b289      	uxth	r1, r1
 800778c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007790:	f846 1b04 	str.w	r1, [r6], #4
 8007794:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007798:	e7dd      	b.n	8007756 <__mdiff+0xd6>
 800779a:	3f01      	subs	r7, #1
 800779c:	e7e7      	b.n	800776e <__mdiff+0xee>
 800779e:	bf00      	nop
 80077a0:	080081e8 	.word	0x080081e8
 80077a4:	080081f9 	.word	0x080081f9

080077a8 <__d2b>:
 80077a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077ac:	460f      	mov	r7, r1
 80077ae:	2101      	movs	r1, #1
 80077b0:	ec59 8b10 	vmov	r8, r9, d0
 80077b4:	4616      	mov	r6, r2
 80077b6:	f7ff fccd 	bl	8007154 <_Balloc>
 80077ba:	4604      	mov	r4, r0
 80077bc:	b930      	cbnz	r0, 80077cc <__d2b+0x24>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <__d2b+0xa8>)
 80077c2:	4824      	ldr	r0, [pc, #144]	@ (8007854 <__d2b+0xac>)
 80077c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80077c8:	f000 fad6 	bl	8007d78 <__assert_func>
 80077cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077d4:	b10d      	cbz	r5, 80077da <__d2b+0x32>
 80077d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	f1b8 0300 	subs.w	r3, r8, #0
 80077e0:	d023      	beq.n	800782a <__d2b+0x82>
 80077e2:	4668      	mov	r0, sp
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f7ff fd7c 	bl	80072e2 <__lo0bits>
 80077ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ee:	b1d0      	cbz	r0, 8007826 <__d2b+0x7e>
 80077f0:	f1c0 0320 	rsb	r3, r0, #32
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	430b      	orrs	r3, r1
 80077fa:	40c2      	lsrs	r2, r0
 80077fc:	6163      	str	r3, [r4, #20]
 80077fe:	9201      	str	r2, [sp, #4]
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	61a3      	str	r3, [r4, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	bf0c      	ite	eq
 8007808:	2201      	moveq	r2, #1
 800780a:	2202      	movne	r2, #2
 800780c:	6122      	str	r2, [r4, #16]
 800780e:	b1a5      	cbz	r5, 800783a <__d2b+0x92>
 8007810:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007814:	4405      	add	r5, r0
 8007816:	603d      	str	r5, [r7, #0]
 8007818:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800781c:	6030      	str	r0, [r6, #0]
 800781e:	4620      	mov	r0, r4
 8007820:	b003      	add	sp, #12
 8007822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007826:	6161      	str	r1, [r4, #20]
 8007828:	e7ea      	b.n	8007800 <__d2b+0x58>
 800782a:	a801      	add	r0, sp, #4
 800782c:	f7ff fd59 	bl	80072e2 <__lo0bits>
 8007830:	9b01      	ldr	r3, [sp, #4]
 8007832:	6163      	str	r3, [r4, #20]
 8007834:	3020      	adds	r0, #32
 8007836:	2201      	movs	r2, #1
 8007838:	e7e8      	b.n	800780c <__d2b+0x64>
 800783a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800783e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007842:	6038      	str	r0, [r7, #0]
 8007844:	6918      	ldr	r0, [r3, #16]
 8007846:	f7ff fd2d 	bl	80072a4 <__hi0bits>
 800784a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800784e:	e7e5      	b.n	800781c <__d2b+0x74>
 8007850:	080081e8 	.word	0x080081e8
 8007854:	080081f9 	.word	0x080081f9

08007858 <__sfputc_r>:
 8007858:	6893      	ldr	r3, [r2, #8]
 800785a:	3b01      	subs	r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	b410      	push	{r4}
 8007860:	6093      	str	r3, [r2, #8]
 8007862:	da08      	bge.n	8007876 <__sfputc_r+0x1e>
 8007864:	6994      	ldr	r4, [r2, #24]
 8007866:	42a3      	cmp	r3, r4
 8007868:	db01      	blt.n	800786e <__sfputc_r+0x16>
 800786a:	290a      	cmp	r1, #10
 800786c:	d103      	bne.n	8007876 <__sfputc_r+0x1e>
 800786e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007872:	f000 b9df 	b.w	8007c34 <__swbuf_r>
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	1c58      	adds	r0, r3, #1
 800787a:	6010      	str	r0, [r2, #0]
 800787c:	7019      	strb	r1, [r3, #0]
 800787e:	4608      	mov	r0, r1
 8007880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007884:	4770      	bx	lr

08007886 <__sfputs_r>:
 8007886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	4614      	mov	r4, r2
 800788e:	18d5      	adds	r5, r2, r3
 8007890:	42ac      	cmp	r4, r5
 8007892:	d101      	bne.n	8007898 <__sfputs_r+0x12>
 8007894:	2000      	movs	r0, #0
 8007896:	e007      	b.n	80078a8 <__sfputs_r+0x22>
 8007898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789c:	463a      	mov	r2, r7
 800789e:	4630      	mov	r0, r6
 80078a0:	f7ff ffda 	bl	8007858 <__sfputc_r>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d1f3      	bne.n	8007890 <__sfputs_r+0xa>
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078ac <_vfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	460d      	mov	r5, r1
 80078b2:	b09d      	sub	sp, #116	@ 0x74
 80078b4:	4614      	mov	r4, r2
 80078b6:	4698      	mov	r8, r3
 80078b8:	4606      	mov	r6, r0
 80078ba:	b118      	cbz	r0, 80078c4 <_vfiprintf_r+0x18>
 80078bc:	6a03      	ldr	r3, [r0, #32]
 80078be:	b90b      	cbnz	r3, 80078c4 <_vfiprintf_r+0x18>
 80078c0:	f7fe fc7c 	bl	80061bc <__sinit>
 80078c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d405      	bmi.n	80078d6 <_vfiprintf_r+0x2a>
 80078ca:	89ab      	ldrh	r3, [r5, #12]
 80078cc:	059a      	lsls	r2, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_vfiprintf_r+0x2a>
 80078d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078d2:	f7fe fda6 	bl	8006422 <__retarget_lock_acquire_recursive>
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	071b      	lsls	r3, r3, #28
 80078da:	d501      	bpl.n	80078e0 <_vfiprintf_r+0x34>
 80078dc:	692b      	ldr	r3, [r5, #16]
 80078de:	b99b      	cbnz	r3, 8007908 <_vfiprintf_r+0x5c>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f9e4 	bl	8007cb0 <__swsetup_r>
 80078e8:	b170      	cbz	r0, 8007908 <_vfiprintf_r+0x5c>
 80078ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ec:	07dc      	lsls	r4, r3, #31
 80078ee:	d504      	bpl.n	80078fa <_vfiprintf_r+0x4e>
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	b01d      	add	sp, #116	@ 0x74
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	0598      	lsls	r0, r3, #22
 80078fe:	d4f7      	bmi.n	80078f0 <_vfiprintf_r+0x44>
 8007900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007902:	f7fe fd8f 	bl	8006424 <__retarget_lock_release_recursive>
 8007906:	e7f3      	b.n	80078f0 <_vfiprintf_r+0x44>
 8007908:	2300      	movs	r3, #0
 800790a:	9309      	str	r3, [sp, #36]	@ 0x24
 800790c:	2320      	movs	r3, #32
 800790e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007912:	f8cd 800c 	str.w	r8, [sp, #12]
 8007916:	2330      	movs	r3, #48	@ 0x30
 8007918:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ac8 <_vfiprintf_r+0x21c>
 800791c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007920:	f04f 0901 	mov.w	r9, #1
 8007924:	4623      	mov	r3, r4
 8007926:	469a      	mov	sl, r3
 8007928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800792c:	b10a      	cbz	r2, 8007932 <_vfiprintf_r+0x86>
 800792e:	2a25      	cmp	r2, #37	@ 0x25
 8007930:	d1f9      	bne.n	8007926 <_vfiprintf_r+0x7a>
 8007932:	ebba 0b04 	subs.w	fp, sl, r4
 8007936:	d00b      	beq.n	8007950 <_vfiprintf_r+0xa4>
 8007938:	465b      	mov	r3, fp
 800793a:	4622      	mov	r2, r4
 800793c:	4629      	mov	r1, r5
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ffa1 	bl	8007886 <__sfputs_r>
 8007944:	3001      	adds	r0, #1
 8007946:	f000 80a7 	beq.w	8007a98 <_vfiprintf_r+0x1ec>
 800794a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800794c:	445a      	add	r2, fp
 800794e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007950:	f89a 3000 	ldrb.w	r3, [sl]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 809f 	beq.w	8007a98 <_vfiprintf_r+0x1ec>
 800795a:	2300      	movs	r3, #0
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007964:	f10a 0a01 	add.w	sl, sl, #1
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	9307      	str	r3, [sp, #28]
 800796c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007970:	931a      	str	r3, [sp, #104]	@ 0x68
 8007972:	4654      	mov	r4, sl
 8007974:	2205      	movs	r2, #5
 8007976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797a:	4853      	ldr	r0, [pc, #332]	@ (8007ac8 <_vfiprintf_r+0x21c>)
 800797c:	f7f8 fc30 	bl	80001e0 <memchr>
 8007980:	9a04      	ldr	r2, [sp, #16]
 8007982:	b9d8      	cbnz	r0, 80079bc <_vfiprintf_r+0x110>
 8007984:	06d1      	lsls	r1, r2, #27
 8007986:	bf44      	itt	mi
 8007988:	2320      	movmi	r3, #32
 800798a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800798e:	0713      	lsls	r3, r2, #28
 8007990:	bf44      	itt	mi
 8007992:	232b      	movmi	r3, #43	@ 0x2b
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007998:	f89a 3000 	ldrb.w	r3, [sl]
 800799c:	2b2a      	cmp	r3, #42	@ 0x2a
 800799e:	d015      	beq.n	80079cc <_vfiprintf_r+0x120>
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	4654      	mov	r4, sl
 80079a4:	2000      	movs	r0, #0
 80079a6:	f04f 0c0a 	mov.w	ip, #10
 80079aa:	4621      	mov	r1, r4
 80079ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b0:	3b30      	subs	r3, #48	@ 0x30
 80079b2:	2b09      	cmp	r3, #9
 80079b4:	d94b      	bls.n	8007a4e <_vfiprintf_r+0x1a2>
 80079b6:	b1b0      	cbz	r0, 80079e6 <_vfiprintf_r+0x13a>
 80079b8:	9207      	str	r2, [sp, #28]
 80079ba:	e014      	b.n	80079e6 <_vfiprintf_r+0x13a>
 80079bc:	eba0 0308 	sub.w	r3, r0, r8
 80079c0:	fa09 f303 	lsl.w	r3, r9, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	46a2      	mov	sl, r4
 80079ca:	e7d2      	b.n	8007972 <_vfiprintf_r+0xc6>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	9103      	str	r1, [sp, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bfbb      	ittet	lt
 80079d8:	425b      	neglt	r3, r3
 80079da:	f042 0202 	orrlt.w	r2, r2, #2
 80079de:	9307      	strge	r3, [sp, #28]
 80079e0:	9307      	strlt	r3, [sp, #28]
 80079e2:	bfb8      	it	lt
 80079e4:	9204      	strlt	r2, [sp, #16]
 80079e6:	7823      	ldrb	r3, [r4, #0]
 80079e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079ea:	d10a      	bne.n	8007a02 <_vfiprintf_r+0x156>
 80079ec:	7863      	ldrb	r3, [r4, #1]
 80079ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80079f0:	d132      	bne.n	8007a58 <_vfiprintf_r+0x1ac>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9203      	str	r2, [sp, #12]
 80079fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079fe:	3402      	adds	r4, #2
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ad8 <_vfiprintf_r+0x22c>
 8007a06:	7821      	ldrb	r1, [r4, #0]
 8007a08:	2203      	movs	r2, #3
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f7f8 fbe8 	bl	80001e0 <memchr>
 8007a10:	b138      	cbz	r0, 8007a22 <_vfiprintf_r+0x176>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	eba0 000a 	sub.w	r0, r0, sl
 8007a18:	2240      	movs	r2, #64	@ 0x40
 8007a1a:	4082      	lsls	r2, r0
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	3401      	adds	r4, #1
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a26:	4829      	ldr	r0, [pc, #164]	@ (8007acc <_vfiprintf_r+0x220>)
 8007a28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	f7f8 fbd7 	bl	80001e0 <memchr>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d03f      	beq.n	8007ab6 <_vfiprintf_r+0x20a>
 8007a36:	4b26      	ldr	r3, [pc, #152]	@ (8007ad0 <_vfiprintf_r+0x224>)
 8007a38:	bb1b      	cbnz	r3, 8007a82 <_vfiprintf_r+0x1d6>
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	3307      	adds	r3, #7
 8007a3e:	f023 0307 	bic.w	r3, r3, #7
 8007a42:	3308      	adds	r3, #8
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a48:	443b      	add	r3, r7
 8007a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a4c:	e76a      	b.n	8007924 <_vfiprintf_r+0x78>
 8007a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a52:	460c      	mov	r4, r1
 8007a54:	2001      	movs	r0, #1
 8007a56:	e7a8      	b.n	80079aa <_vfiprintf_r+0xfe>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	f04f 0c0a 	mov.w	ip, #10
 8007a64:	4620      	mov	r0, r4
 8007a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a6a:	3a30      	subs	r2, #48	@ 0x30
 8007a6c:	2a09      	cmp	r2, #9
 8007a6e:	d903      	bls.n	8007a78 <_vfiprintf_r+0x1cc>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0c6      	beq.n	8007a02 <_vfiprintf_r+0x156>
 8007a74:	9105      	str	r1, [sp, #20]
 8007a76:	e7c4      	b.n	8007a02 <_vfiprintf_r+0x156>
 8007a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e7f0      	b.n	8007a64 <_vfiprintf_r+0x1b8>
 8007a82:	ab03      	add	r3, sp, #12
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	462a      	mov	r2, r5
 8007a88:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <_vfiprintf_r+0x228>)
 8007a8a:	a904      	add	r1, sp, #16
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7fd ff51 	bl	8005934 <_printf_float>
 8007a92:	4607      	mov	r7, r0
 8007a94:	1c78      	adds	r0, r7, #1
 8007a96:	d1d6      	bne.n	8007a46 <_vfiprintf_r+0x19a>
 8007a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a9a:	07d9      	lsls	r1, r3, #31
 8007a9c:	d405      	bmi.n	8007aaa <_vfiprintf_r+0x1fe>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	059a      	lsls	r2, r3, #22
 8007aa2:	d402      	bmi.n	8007aaa <_vfiprintf_r+0x1fe>
 8007aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aa6:	f7fe fcbd 	bl	8006424 <__retarget_lock_release_recursive>
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	065b      	lsls	r3, r3, #25
 8007aae:	f53f af1f 	bmi.w	80078f0 <_vfiprintf_r+0x44>
 8007ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ab4:	e71e      	b.n	80078f4 <_vfiprintf_r+0x48>
 8007ab6:	ab03      	add	r3, sp, #12
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	462a      	mov	r2, r5
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <_vfiprintf_r+0x228>)
 8007abe:	a904      	add	r1, sp, #16
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7fe f9cf 	bl	8005e64 <_printf_i>
 8007ac6:	e7e4      	b.n	8007a92 <_vfiprintf_r+0x1e6>
 8007ac8:	08008350 	.word	0x08008350
 8007acc:	0800835a 	.word	0x0800835a
 8007ad0:	08005935 	.word	0x08005935
 8007ad4:	08007887 	.word	0x08007887
 8007ad8:	08008356 	.word	0x08008356

08007adc <__sflush_r>:
 8007adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	0716      	lsls	r6, r2, #28
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	d454      	bmi.n	8007b96 <__sflush_r+0xba>
 8007aec:	684b      	ldr	r3, [r1, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dc02      	bgt.n	8007af8 <__sflush_r+0x1c>
 8007af2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd48      	ble.n	8007b8a <__sflush_r+0xae>
 8007af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	d045      	beq.n	8007b8a <__sflush_r+0xae>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b04:	682f      	ldr	r7, [r5, #0]
 8007b06:	6a21      	ldr	r1, [r4, #32]
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	d030      	beq.n	8007b6e <__sflush_r+0x92>
 8007b0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	0759      	lsls	r1, r3, #29
 8007b12:	d505      	bpl.n	8007b20 <__sflush_r+0x44>
 8007b14:	6863      	ldr	r3, [r4, #4]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b1a:	b10b      	cbz	r3, 8007b20 <__sflush_r+0x44>
 8007b1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	2300      	movs	r3, #0
 8007b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b24:	6a21      	ldr	r1, [r4, #32]
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b0      	blx	r6
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	d106      	bne.n	8007b3e <__sflush_r+0x62>
 8007b30:	6829      	ldr	r1, [r5, #0]
 8007b32:	291d      	cmp	r1, #29
 8007b34:	d82b      	bhi.n	8007b8e <__sflush_r+0xb2>
 8007b36:	4a2a      	ldr	r2, [pc, #168]	@ (8007be0 <__sflush_r+0x104>)
 8007b38:	410a      	asrs	r2, r1
 8007b3a:	07d6      	lsls	r6, r2, #31
 8007b3c:	d427      	bmi.n	8007b8e <__sflush_r+0xb2>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	6062      	str	r2, [r4, #4]
 8007b42:	04d9      	lsls	r1, r3, #19
 8007b44:	6922      	ldr	r2, [r4, #16]
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	d504      	bpl.n	8007b54 <__sflush_r+0x78>
 8007b4a:	1c42      	adds	r2, r0, #1
 8007b4c:	d101      	bne.n	8007b52 <__sflush_r+0x76>
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	b903      	cbnz	r3, 8007b54 <__sflush_r+0x78>
 8007b52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b56:	602f      	str	r7, [r5, #0]
 8007b58:	b1b9      	cbz	r1, 8007b8a <__sflush_r+0xae>
 8007b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	d002      	beq.n	8007b68 <__sflush_r+0x8c>
 8007b62:	4628      	mov	r0, r5
 8007b64:	f7ff faac 	bl	80070c0 <_free_r>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b6c:	e00d      	b.n	8007b8a <__sflush_r+0xae>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	4602      	mov	r2, r0
 8007b76:	1c50      	adds	r0, r2, #1
 8007b78:	d1c9      	bne.n	8007b0e <__sflush_r+0x32>
 8007b7a:	682b      	ldr	r3, [r5, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0c6      	beq.n	8007b0e <__sflush_r+0x32>
 8007b80:	2b1d      	cmp	r3, #29
 8007b82:	d001      	beq.n	8007b88 <__sflush_r+0xac>
 8007b84:	2b16      	cmp	r3, #22
 8007b86:	d11e      	bne.n	8007bc6 <__sflush_r+0xea>
 8007b88:	602f      	str	r7, [r5, #0]
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e022      	b.n	8007bd4 <__sflush_r+0xf8>
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	e01b      	b.n	8007bce <__sflush_r+0xf2>
 8007b96:	690f      	ldr	r7, [r1, #16]
 8007b98:	2f00      	cmp	r7, #0
 8007b9a:	d0f6      	beq.n	8007b8a <__sflush_r+0xae>
 8007b9c:	0793      	lsls	r3, r2, #30
 8007b9e:	680e      	ldr	r6, [r1, #0]
 8007ba0:	bf08      	it	eq
 8007ba2:	694b      	ldreq	r3, [r1, #20]
 8007ba4:	600f      	str	r7, [r1, #0]
 8007ba6:	bf18      	it	ne
 8007ba8:	2300      	movne	r3, #0
 8007baa:	eba6 0807 	sub.w	r8, r6, r7
 8007bae:	608b      	str	r3, [r1, #8]
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	dde9      	ble.n	8007b8a <__sflush_r+0xae>
 8007bb6:	6a21      	ldr	r1, [r4, #32]
 8007bb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bba:	4643      	mov	r3, r8
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b0      	blx	r6
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	dc08      	bgt.n	8007bd8 <__sflush_r+0xfc>
 8007bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd8:	4407      	add	r7, r0
 8007bda:	eba8 0800 	sub.w	r8, r8, r0
 8007bde:	e7e7      	b.n	8007bb0 <__sflush_r+0xd4>
 8007be0:	dfbffffe 	.word	0xdfbffffe

08007be4 <_fflush_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	690b      	ldr	r3, [r1, #16]
 8007be8:	4605      	mov	r5, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	b913      	cbnz	r3, 8007bf4 <_fflush_r+0x10>
 8007bee:	2500      	movs	r5, #0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	b118      	cbz	r0, 8007bfe <_fflush_r+0x1a>
 8007bf6:	6a03      	ldr	r3, [r0, #32]
 8007bf8:	b90b      	cbnz	r3, 8007bfe <_fflush_r+0x1a>
 8007bfa:	f7fe fadf 	bl	80061bc <__sinit>
 8007bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f3      	beq.n	8007bee <_fflush_r+0xa>
 8007c06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c08:	07d0      	lsls	r0, r2, #31
 8007c0a:	d404      	bmi.n	8007c16 <_fflush_r+0x32>
 8007c0c:	0599      	lsls	r1, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_fflush_r+0x32>
 8007c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c12:	f7fe fc06 	bl	8006422 <__retarget_lock_acquire_recursive>
 8007c16:	4628      	mov	r0, r5
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7ff ff5f 	bl	8007adc <__sflush_r>
 8007c1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c20:	07da      	lsls	r2, r3, #31
 8007c22:	4605      	mov	r5, r0
 8007c24:	d4e4      	bmi.n	8007bf0 <_fflush_r+0xc>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	059b      	lsls	r3, r3, #22
 8007c2a:	d4e1      	bmi.n	8007bf0 <_fflush_r+0xc>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c2e:	f7fe fbf9 	bl	8006424 <__retarget_lock_release_recursive>
 8007c32:	e7dd      	b.n	8007bf0 <_fflush_r+0xc>

08007c34 <__swbuf_r>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	460e      	mov	r6, r1
 8007c38:	4614      	mov	r4, r2
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	b118      	cbz	r0, 8007c46 <__swbuf_r+0x12>
 8007c3e:	6a03      	ldr	r3, [r0, #32]
 8007c40:	b90b      	cbnz	r3, 8007c46 <__swbuf_r+0x12>
 8007c42:	f7fe fabb 	bl	80061bc <__sinit>
 8007c46:	69a3      	ldr	r3, [r4, #24]
 8007c48:	60a3      	str	r3, [r4, #8]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	071a      	lsls	r2, r3, #28
 8007c4e:	d501      	bpl.n	8007c54 <__swbuf_r+0x20>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	b943      	cbnz	r3, 8007c66 <__swbuf_r+0x32>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f82a 	bl	8007cb0 <__swsetup_r>
 8007c5c:	b118      	cbz	r0, 8007c66 <__swbuf_r+0x32>
 8007c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8007c62:	4638      	mov	r0, r7
 8007c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	6922      	ldr	r2, [r4, #16]
 8007c6a:	1a98      	subs	r0, r3, r2
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	b2f6      	uxtb	r6, r6
 8007c70:	4283      	cmp	r3, r0
 8007c72:	4637      	mov	r7, r6
 8007c74:	dc05      	bgt.n	8007c82 <__swbuf_r+0x4e>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f7ff ffb3 	bl	8007be4 <_fflush_r>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d1ed      	bne.n	8007c5e <__swbuf_r+0x2a>
 8007c82:	68a3      	ldr	r3, [r4, #8]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	60a3      	str	r3, [r4, #8]
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	6022      	str	r2, [r4, #0]
 8007c8e:	701e      	strb	r6, [r3, #0]
 8007c90:	6962      	ldr	r2, [r4, #20]
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d004      	beq.n	8007ca2 <__swbuf_r+0x6e>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	07db      	lsls	r3, r3, #31
 8007c9c:	d5e1      	bpl.n	8007c62 <__swbuf_r+0x2e>
 8007c9e:	2e0a      	cmp	r6, #10
 8007ca0:	d1df      	bne.n	8007c62 <__swbuf_r+0x2e>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7ff ff9d 	bl	8007be4 <_fflush_r>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0d9      	beq.n	8007c62 <__swbuf_r+0x2e>
 8007cae:	e7d6      	b.n	8007c5e <__swbuf_r+0x2a>

08007cb0 <__swsetup_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4b29      	ldr	r3, [pc, #164]	@ (8007d58 <__swsetup_r+0xa8>)
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	460c      	mov	r4, r1
 8007cba:	b118      	cbz	r0, 8007cc4 <__swsetup_r+0x14>
 8007cbc:	6a03      	ldr	r3, [r0, #32]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <__swsetup_r+0x14>
 8007cc0:	f7fe fa7c 	bl	80061bc <__sinit>
 8007cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d422      	bmi.n	8007d12 <__swsetup_r+0x62>
 8007ccc:	06da      	lsls	r2, r3, #27
 8007cce:	d407      	bmi.n	8007ce0 <__swsetup_r+0x30>
 8007cd0:	2209      	movs	r2, #9
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	e033      	b.n	8007d48 <__swsetup_r+0x98>
 8007ce0:	0758      	lsls	r0, r3, #29
 8007ce2:	d512      	bpl.n	8007d0a <__swsetup_r+0x5a>
 8007ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce6:	b141      	cbz	r1, 8007cfa <__swsetup_r+0x4a>
 8007ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d002      	beq.n	8007cf6 <__swsetup_r+0x46>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7ff f9e5 	bl	80070c0 <_free_r>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	2300      	movs	r3, #0
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	b94b      	cbnz	r3, 8007d2a <__swsetup_r+0x7a>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d003      	beq.n	8007d2a <__swsetup_r+0x7a>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 f89d 	bl	8007e64 <__smakebuf_r>
 8007d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2e:	f013 0201 	ands.w	r2, r3, #1
 8007d32:	d00a      	beq.n	8007d4a <__swsetup_r+0x9a>
 8007d34:	2200      	movs	r2, #0
 8007d36:	60a2      	str	r2, [r4, #8]
 8007d38:	6962      	ldr	r2, [r4, #20]
 8007d3a:	4252      	negs	r2, r2
 8007d3c:	61a2      	str	r2, [r4, #24]
 8007d3e:	6922      	ldr	r2, [r4, #16]
 8007d40:	b942      	cbnz	r2, 8007d54 <__swsetup_r+0xa4>
 8007d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d46:	d1c5      	bne.n	8007cd4 <__swsetup_r+0x24>
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
 8007d4a:	0799      	lsls	r1, r3, #30
 8007d4c:	bf58      	it	pl
 8007d4e:	6962      	ldrpl	r2, [r4, #20]
 8007d50:	60a2      	str	r2, [r4, #8]
 8007d52:	e7f4      	b.n	8007d3e <__swsetup_r+0x8e>
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7f7      	b.n	8007d48 <__swsetup_r+0x98>
 8007d58:	20000088 	.word	0x20000088

08007d5c <memcpy>:
 8007d5c:	440a      	add	r2, r1
 8007d5e:	4291      	cmp	r1, r2
 8007d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d64:	d100      	bne.n	8007d68 <memcpy+0xc>
 8007d66:	4770      	bx	lr
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d72:	4291      	cmp	r1, r2
 8007d74:	d1f9      	bne.n	8007d6a <memcpy+0xe>
 8007d76:	bd10      	pop	{r4, pc}

08007d78 <__assert_func>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <__assert_func+0x2c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4605      	mov	r5, r0
 8007d84:	68d8      	ldr	r0, [r3, #12]
 8007d86:	b954      	cbnz	r4, 8007d9e <__assert_func+0x26>
 8007d88:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <__assert_func+0x30>)
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	462b      	mov	r3, r5
 8007d94:	4905      	ldr	r1, [pc, #20]	@ (8007dac <__assert_func+0x34>)
 8007d96:	f000 f82d 	bl	8007df4 <fiprintf>
 8007d9a:	f000 f8c1 	bl	8007f20 <abort>
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <__assert_func+0x38>)
 8007da0:	e7f4      	b.n	8007d8c <__assert_func+0x14>
 8007da2:	bf00      	nop
 8007da4:	20000088 	.word	0x20000088
 8007da8:	080083a6 	.word	0x080083a6
 8007dac:	08008378 	.word	0x08008378
 8007db0:	0800836b 	.word	0x0800836b

08007db4 <__ascii_mbtowc>:
 8007db4:	b082      	sub	sp, #8
 8007db6:	b901      	cbnz	r1, 8007dba <__ascii_mbtowc+0x6>
 8007db8:	a901      	add	r1, sp, #4
 8007dba:	b142      	cbz	r2, 8007dce <__ascii_mbtowc+0x1a>
 8007dbc:	b14b      	cbz	r3, 8007dd2 <__ascii_mbtowc+0x1e>
 8007dbe:	7813      	ldrb	r3, [r2, #0]
 8007dc0:	600b      	str	r3, [r1, #0]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	1e10      	subs	r0, r2, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2001      	movne	r0, #1
 8007dca:	b002      	add	sp, #8
 8007dcc:	4770      	bx	lr
 8007dce:	4610      	mov	r0, r2
 8007dd0:	e7fb      	b.n	8007dca <__ascii_mbtowc+0x16>
 8007dd2:	f06f 0001 	mvn.w	r0, #1
 8007dd6:	e7f8      	b.n	8007dca <__ascii_mbtowc+0x16>

08007dd8 <__ascii_wctomb>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	b141      	cbz	r1, 8007df0 <__ascii_wctomb+0x18>
 8007dde:	2aff      	cmp	r2, #255	@ 0xff
 8007de0:	d904      	bls.n	8007dec <__ascii_wctomb+0x14>
 8007de2:	228a      	movs	r2, #138	@ 0x8a
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	4770      	bx	lr
 8007dec:	700a      	strb	r2, [r1, #0]
 8007dee:	2001      	movs	r0, #1
 8007df0:	4770      	bx	lr
	...

08007df4 <fiprintf>:
 8007df4:	b40e      	push	{r1, r2, r3}
 8007df6:	b503      	push	{r0, r1, lr}
 8007df8:	4601      	mov	r1, r0
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	4805      	ldr	r0, [pc, #20]	@ (8007e14 <fiprintf+0x20>)
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	f7ff fd51 	bl	80078ac <_vfiprintf_r>
 8007e0a:	b002      	add	sp, #8
 8007e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e10:	b003      	add	sp, #12
 8007e12:	4770      	bx	lr
 8007e14:	20000088 	.word	0x20000088

08007e18 <__swhatbuf_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e20:	2900      	cmp	r1, #0
 8007e22:	b096      	sub	sp, #88	@ 0x58
 8007e24:	4615      	mov	r5, r2
 8007e26:	461e      	mov	r6, r3
 8007e28:	da0d      	bge.n	8007e46 <__swhatbuf_r+0x2e>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e30:	f04f 0100 	mov.w	r1, #0
 8007e34:	bf14      	ite	ne
 8007e36:	2340      	movne	r3, #64	@ 0x40
 8007e38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	6031      	str	r1, [r6, #0]
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	b016      	add	sp, #88	@ 0x58
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
 8007e46:	466a      	mov	r2, sp
 8007e48:	f000 f848 	bl	8007edc <_fstat_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dbec      	blt.n	8007e2a <__swhatbuf_r+0x12>
 8007e50:	9901      	ldr	r1, [sp, #4]
 8007e52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e5a:	4259      	negs	r1, r3
 8007e5c:	4159      	adcs	r1, r3
 8007e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e62:	e7eb      	b.n	8007e3c <__swhatbuf_r+0x24>

08007e64 <__smakebuf_r>:
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e68:	079d      	lsls	r5, r3, #30
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	d507      	bpl.n	8007e80 <__smakebuf_r+0x1c>
 8007e70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6163      	str	r3, [r4, #20]
 8007e7c:	b003      	add	sp, #12
 8007e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e80:	ab01      	add	r3, sp, #4
 8007e82:	466a      	mov	r2, sp
 8007e84:	f7ff ffc8 	bl	8007e18 <__swhatbuf_r>
 8007e88:	9f00      	ldr	r7, [sp, #0]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7fd fc24 	bl	80056dc <_malloc_r>
 8007e94:	b948      	cbnz	r0, 8007eaa <__smakebuf_r+0x46>
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	059a      	lsls	r2, r3, #22
 8007e9c:	d4ee      	bmi.n	8007e7c <__smakebuf_r+0x18>
 8007e9e:	f023 0303 	bic.w	r3, r3, #3
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	e7e2      	b.n	8007e70 <__smakebuf_r+0xc>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	6020      	str	r0, [r4, #0]
 8007eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007eba:	b15b      	cbz	r3, 8007ed4 <__smakebuf_r+0x70>
 8007ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f81d 	bl	8007f00 <_isatty_r>
 8007ec6:	b128      	cbz	r0, 8007ed4 <__smakebuf_r+0x70>
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	431d      	orrs	r5, r3
 8007ed8:	81a5      	strh	r5, [r4, #12]
 8007eda:	e7cf      	b.n	8007e7c <__smakebuf_r+0x18>

08007edc <_fstat_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_fstat_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7fa fb07 	bl	80024fc <_fstat>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_fstat_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_fstat_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	200005e4 	.word	0x200005e4

08007f00 <_isatty_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_isatty_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7fa fb06 	bl	800251c <_isatty>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_isatty_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_isatty_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200005e4 	.word	0x200005e4

08007f20 <abort>:
 8007f20:	b508      	push	{r3, lr}
 8007f22:	2006      	movs	r0, #6
 8007f24:	f000 f82c 	bl	8007f80 <raise>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7fa fab3 	bl	8002494 <_exit>

08007f2e <_raise_r>:
 8007f2e:	291f      	cmp	r1, #31
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	d904      	bls.n	8007f42 <_raise_r+0x14>
 8007f38:	2316      	movs	r3, #22
 8007f3a:	6003      	str	r3, [r0, #0]
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	bd38      	pop	{r3, r4, r5, pc}
 8007f42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f44:	b112      	cbz	r2, 8007f4c <_raise_r+0x1e>
 8007f46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f4a:	b94b      	cbnz	r3, 8007f60 <_raise_r+0x32>
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 f831 	bl	8007fb4 <_getpid_r>
 8007f52:	4622      	mov	r2, r4
 8007f54:	4601      	mov	r1, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f5c:	f000 b818 	b.w	8007f90 <_kill_r>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d00a      	beq.n	8007f7a <_raise_r+0x4c>
 8007f64:	1c59      	adds	r1, r3, #1
 8007f66:	d103      	bne.n	8007f70 <_raise_r+0x42>
 8007f68:	2316      	movs	r3, #22
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	e7e7      	b.n	8007f40 <_raise_r+0x12>
 8007f70:	2100      	movs	r1, #0
 8007f72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f76:	4620      	mov	r0, r4
 8007f78:	4798      	blx	r3
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	e7e0      	b.n	8007f40 <_raise_r+0x12>
	...

08007f80 <raise>:
 8007f80:	4b02      	ldr	r3, [pc, #8]	@ (8007f8c <raise+0xc>)
 8007f82:	4601      	mov	r1, r0
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	f7ff bfd2 	b.w	8007f2e <_raise_r>
 8007f8a:	bf00      	nop
 8007f8c:	20000088 	.word	0x20000088

08007f90 <_kill_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d07      	ldr	r5, [pc, #28]	@ (8007fb0 <_kill_r+0x20>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	f7fa fa69 	bl	8002474 <_kill>
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	d102      	bne.n	8007fac <_kill_r+0x1c>
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	b103      	cbz	r3, 8007fac <_kill_r+0x1c>
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	bd38      	pop	{r3, r4, r5, pc}
 8007fae:	bf00      	nop
 8007fb0:	200005e4 	.word	0x200005e4

08007fb4 <_getpid_r>:
 8007fb4:	f7fa ba56 	b.w	8002464 <_getpid>

08007fb8 <ceil>:
 8007fb8:	ec51 0b10 	vmov	r0, r1, d0
 8007fbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007fc8:	2e13      	cmp	r6, #19
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4605      	mov	r5, r0
 8007fce:	4680      	mov	r8, r0
 8007fd0:	dc2e      	bgt.n	8008030 <ceil+0x78>
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	da11      	bge.n	8007ffa <ceil+0x42>
 8007fd6:	a332      	add	r3, pc, #200	@ (adr r3, 80080a0 <ceil+0xe8>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 f95e 	bl	800029c <__adddf3>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f7f8 fda0 	bl	8000b28 <__aeabi_dcmpgt>
 8007fe8:	b120      	cbz	r0, 8007ff4 <ceil+0x3c>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	db4f      	blt.n	800808e <ceil+0xd6>
 8007fee:	4325      	orrs	r5, r4
 8007ff0:	d151      	bne.n	8008096 <ceil+0xde>
 8007ff2:	462c      	mov	r4, r5
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	e023      	b.n	8008042 <ceil+0x8a>
 8007ffa:	4f2b      	ldr	r7, [pc, #172]	@ (80080a8 <ceil+0xf0>)
 8007ffc:	4137      	asrs	r7, r6
 8007ffe:	ea01 0307 	and.w	r3, r1, r7
 8008002:	4303      	orrs	r3, r0
 8008004:	d01d      	beq.n	8008042 <ceil+0x8a>
 8008006:	a326      	add	r3, pc, #152	@ (adr r3, 80080a0 <ceil+0xe8>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f7f8 f946 	bl	800029c <__adddf3>
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	f7f8 fd88 	bl	8000b28 <__aeabi_dcmpgt>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0eb      	beq.n	8007ff4 <ceil+0x3c>
 800801c:	2c00      	cmp	r4, #0
 800801e:	bfc2      	ittt	gt
 8008020:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8008024:	4133      	asrgt	r3, r6
 8008026:	18e4      	addgt	r4, r4, r3
 8008028:	ea24 0407 	bic.w	r4, r4, r7
 800802c:	2500      	movs	r5, #0
 800802e:	e7e1      	b.n	8007ff4 <ceil+0x3c>
 8008030:	2e33      	cmp	r6, #51	@ 0x33
 8008032:	dd0a      	ble.n	800804a <ceil+0x92>
 8008034:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008038:	d103      	bne.n	8008042 <ceil+0x8a>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	f7f8 f92d 	bl	800029c <__adddf3>
 8008042:	ec41 0b10 	vmov	d0, r0, r1
 8008046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800804e:	f04f 37ff 	mov.w	r7, #4294967295
 8008052:	40df      	lsrs	r7, r3
 8008054:	4238      	tst	r0, r7
 8008056:	d0f4      	beq.n	8008042 <ceil+0x8a>
 8008058:	a311      	add	r3, pc, #68	@ (adr r3, 80080a0 <ceil+0xe8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 f91d 	bl	800029c <__adddf3>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	f7f8 fd5f 	bl	8000b28 <__aeabi_dcmpgt>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0c2      	beq.n	8007ff4 <ceil+0x3c>
 800806e:	2c00      	cmp	r4, #0
 8008070:	dd0a      	ble.n	8008088 <ceil+0xd0>
 8008072:	2e14      	cmp	r6, #20
 8008074:	d101      	bne.n	800807a <ceil+0xc2>
 8008076:	3401      	adds	r4, #1
 8008078:	e006      	b.n	8008088 <ceil+0xd0>
 800807a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800807e:	2301      	movs	r3, #1
 8008080:	40b3      	lsls	r3, r6
 8008082:	441d      	add	r5, r3
 8008084:	45a8      	cmp	r8, r5
 8008086:	d8f6      	bhi.n	8008076 <ceil+0xbe>
 8008088:	ea25 0507 	bic.w	r5, r5, r7
 800808c:	e7b2      	b.n	8007ff4 <ceil+0x3c>
 800808e:	2500      	movs	r5, #0
 8008090:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008094:	e7ae      	b.n	8007ff4 <ceil+0x3c>
 8008096:	4c05      	ldr	r4, [pc, #20]	@ (80080ac <ceil+0xf4>)
 8008098:	2500      	movs	r5, #0
 800809a:	e7ab      	b.n	8007ff4 <ceil+0x3c>
 800809c:	f3af 8000 	nop.w
 80080a0:	8800759c 	.word	0x8800759c
 80080a4:	7e37e43c 	.word	0x7e37e43c
 80080a8:	000fffff 	.word	0x000fffff
 80080ac:	3ff00000 	.word	0x3ff00000

080080b0 <_init>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr

080080bc <_fini>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr
